{"version":3,"file":"2802.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/announcements.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/notificationplugin.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/palette.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/settingconnector.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/settingsplugin.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/themesplugins.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/toolbarregistryplugin.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/workspacesplugin.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/apputils-extension/lib/index.js"],"sourcesContent":["import { Notification } from '@jupyterlab/apputils';\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { ConfigSection, ServerConnection } from '@jupyterlab/services';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nconst COMMAND_HELP_OPEN = 'help:open';\nconst NEWS_API_URL = '/lab/api/news';\nconst UPDATE_API_URL = '/lab/api/update';\nconst PRIVACY_URL = 'https://jupyterlab.readthedocs.io/en/3.6.x/privacy_policies.html';\n/**\n * Call the announcement API\n *\n * @param endpoint Endpoint to request\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nasync function requestAPI(endpoint, init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, endpoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n}\nexport const announcements = {\n    id: '@jupyterlab/apputils-extension:announcements',\n    autoStart: true,\n    optional: [ISettingRegistry, ITranslator],\n    activate: (app, settingRegistry, translator) => {\n        var _a;\n        const CONFIG_SECTION_NAME = announcements.id.replace(/[^\\w]/g, '');\n        void Promise.all([\n            app.restored,\n            (_a = settingRegistry === null || settingRegistry === void 0 ? void 0 : settingRegistry.load('@jupyterlab/apputils-extension:notification')) !== null && _a !== void 0 ? _a : Promise.resolve(null),\n            // Use config instead of state to store independently of the workspace\n            // if a news has been displayed or not.\n            ConfigSection.create({\n                name: CONFIG_SECTION_NAME\n            })\n        ]).then(async ([_, settings, config]) => {\n            const trans = (translator !== null && translator !== void 0 ? translator : nullTranslator).load('jupyterlab');\n            // Store dismiss state\n            Notification.manager.changed.connect((manager, change) => {\n                var _a;\n                if (change.type !== 'removed') {\n                    return;\n                }\n                const { id, tags } = ((_a = change\n                    .notification.options.data) !== null && _a !== void 0 ? _a : {});\n                if ((tags !== null && tags !== void 0 ? tags : []).some(tag => ['news', 'update'].includes(tag)) && id) {\n                    const update = {};\n                    update[id] = { seen: true, dismissed: true };\n                    config.update(update).catch(reason => {\n                        console.error(`Failed to update the announcements config:\\n${reason}`);\n                    });\n                }\n            });\n            const mustFetchNews = settings === null || settings === void 0 ? void 0 : settings.get('fetchNews').composite;\n            if (mustFetchNews === 'none') {\n                const notificationId = Notification.emit(trans.__('Would you like to receive official Jupyter news?\\nPlease read the privacy policy.'), 'default', {\n                    autoClose: false,\n                    actions: [\n                        {\n                            label: trans.__('Open privacy policy'),\n                            caption: PRIVACY_URL,\n                            callback: event => {\n                                event.preventDefault();\n                                if (app.commands.hasCommand(COMMAND_HELP_OPEN)) {\n                                    void app.commands.execute(COMMAND_HELP_OPEN, {\n                                        text: trans.__('Privacy policies'),\n                                        url: PRIVACY_URL\n                                    });\n                                }\n                                else {\n                                    window.open(PRIVACY_URL, '_blank', 'noreferrer');\n                                }\n                            },\n                            displayType: 'link'\n                        },\n                        {\n                            label: trans.__('Yes'),\n                            callback: () => {\n                                Notification.dismiss(notificationId);\n                                config\n                                    .update({})\n                                    .then(() => fetchNews())\n                                    .catch(reason => {\n                                    console.error(`Failed to get the news:\\n${reason}`);\n                                });\n                                settings === null || settings === void 0 ? void 0 : settings.set('fetchNews', 'true').catch((reason) => {\n                                    console.error(`Failed to save setting 'fetchNews':\\n${reason}`);\n                                });\n                            }\n                        },\n                        {\n                            label: trans.__('No'),\n                            callback: () => {\n                                Notification.dismiss(notificationId);\n                                settings === null || settings === void 0 ? void 0 : settings.set('fetchNews', 'false').catch((reason) => {\n                                    console.error(`Failed to save setting 'fetchNews':\\n${reason}`);\n                                });\n                            }\n                        }\n                    ]\n                });\n            }\n            else {\n                await fetchNews();\n            }\n            async function fetchNews() {\n                var _a, _b, _c, _d;\n                if (((_a = settings === null || settings === void 0 ? void 0 : settings.get('fetchNews').composite) !== null && _a !== void 0 ? _a : 'false') === 'true') {\n                    try {\n                        const response = await requestAPI(NEWS_API_URL);\n                        for (const { link, message, type, options } of response.news) {\n                            // @ts-expect-error data has no index\n                            const id = options.data['id'];\n                            // Filter those notifications\n                            const state = (_b = config.data[id]) !== null && _b !== void 0 ? _b : {\n                                seen: false,\n                                dismissed: false\n                            };\n                            if (!state.dismissed) {\n                                options.actions = [\n                                    {\n                                        label: trans.__('Hide'),\n                                        caption: trans.__('Never show this notification again.'),\n                                        callback: () => {\n                                            const update = {};\n                                            update[id] = { seen: true, dismissed: true };\n                                            config.update(update).catch(reason => {\n                                                console.error(`Failed to update the announcements config:\\n${reason}`);\n                                            });\n                                        }\n                                    }\n                                ];\n                                if ((link === null || link === void 0 ? void 0 : link.length) === 2) {\n                                    options.actions.push({\n                                        label: link[0],\n                                        caption: link[1],\n                                        callback: () => {\n                                            window.open(link[1], '_blank', 'noreferrer');\n                                        },\n                                        displayType: 'link'\n                                    });\n                                }\n                                if (!state.seen) {\n                                    options.autoClose = 5000;\n                                    const update = {};\n                                    update[id] = { seen: true };\n                                    config.update(update).catch(reason => {\n                                        console.error(`Failed to update the announcements config:\\n${reason}`);\n                                    });\n                                }\n                                Notification.emit(message, type, options);\n                            }\n                        }\n                    }\n                    catch (reason) {\n                        console.log('Failed to get the announcements.', reason);\n                    }\n                }\n                if ((_c = settings === null || settings === void 0 ? void 0 : settings.get('checkForUpdates').composite) !== null && _c !== void 0 ? _c : true) {\n                    const response = await requestAPI(UPDATE_API_URL);\n                    if (response.notification) {\n                        const { link, message, type, options } = response.notification;\n                        // @ts-expect-error data has no index\n                        const id = options.data['id'];\n                        const state = (_d = config.data[id]) !== null && _d !== void 0 ? _d : {\n                            seen: false,\n                            dismissed: false\n                        };\n                        if (!state.dismissed) {\n                            let notificationId;\n                            options.actions = [\n                                {\n                                    label: trans.__('Do not check for updates'),\n                                    caption: trans.__('If pressed, you will not be prompted if a new JupyterLab version is found.'),\n                                    callback: () => {\n                                        settings === null || settings === void 0 ? void 0 : settings.set('checkForUpdates', false).then(() => {\n                                            Notification.dismiss(notificationId);\n                                        }).catch((reason) => {\n                                            console.error('Failed to set the `checkForUpdates` setting.', reason);\n                                        });\n                                    }\n                                }\n                            ];\n                            if ((link === null || link === void 0 ? void 0 : link.length) === 2) {\n                                options.actions.push({\n                                    label: link[0],\n                                    caption: link[1],\n                                    callback: () => {\n                                        window.open(link[1], '_blank', 'noreferrer');\n                                    },\n                                    displayType: 'link'\n                                });\n                            }\n                            if (!state.seen) {\n                                options.autoClose = 5000;\n                                const update = {};\n                                update[id] = { seen: true };\n                                config.update(update).catch(reason => {\n                                    console.error(`Failed to update the announcements config:\\n${reason}`);\n                                });\n                            }\n                            notificationId = Notification.emit(message, type, options);\n                        }\n                    }\n                }\n            }\n        });\n    }\n};\n//# sourceMappingURL=announcements.js.map","/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { Notification, ReactWidget, ToolbarButtonComponent, UseSignal, VDomModel } from '@jupyterlab/apputils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { GroupItem, IStatusBar, showPopup, TextItem } from '@jupyterlab/statusbar';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { bellIcon, Button, closeIcon, deleteIcon } from '@jupyterlab/ui-components';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n/**\n * Toast close button class\n */\nconst TOAST_CLOSE_BUTTON_CLASS = 'jp-Notification-Toast-Close';\n/**\n * Maximal number of characters displayed in a notification.\n */\nconst MAX_MESSAGE_LENGTH = 140;\nvar CommandIDs;\n(function (CommandIDs) {\n    /**\n     * Dismiss a notification\n     */\n    CommandIDs.dismiss = 'apputils:dismiss-notification';\n    /**\n     * Display all notifications\n     */\n    CommandIDs.display = 'apputils:display-notifications';\n    /**\n     * Create a notification\n     */\n    CommandIDs.notify = 'apputils:notify';\n    /**\n     * Update a notification\n     */\n    CommandIDs.update = 'apputils:update-notification';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Half spacing between subitems in a status item.\n */\nconst HALF_SPACING = 4;\n/**\n * Notification center view\n */\nfunction NotificationCenter(props) {\n    const { manager, onClose, trans } = props;\n    // Markdown parsed notifications\n    const [notifications, setNotifications] = React.useState([]);\n    // Load asynchronously react-toastify icons\n    const [icons, setIcons] = React.useState(null);\n    React.useEffect(() => {\n        async function onChanged() {\n            setNotifications(await Promise.all(manager.notifications.map(async (n) => {\n                return Object.freeze(Object.assign({}, n));\n            })));\n        }\n        if (notifications.length !== manager.count) {\n            void onChanged();\n        }\n        manager.changed.connect(onChanged);\n        return () => {\n            manager.changed.disconnect(onChanged);\n        };\n    }, [manager]);\n    React.useEffect(() => {\n        Private.getIcons()\n            .then(toastifyIcons => {\n            setIcons(toastifyIcons);\n        })\n            .catch(r => {\n            console.error(`Failed to get react-toastify icons:\\n${r}`);\n        });\n    }, []);\n    return (React.createElement(UseSignal, { signal: manager.changed }, () => (React.createElement(React.Fragment, null,\n        React.createElement(\"h2\", { className: \"jp-Notification-Header jp-Toolbar\" },\n            React.createElement(\"span\", { className: \"jp-Toolbar-item\" }, manager.count > 0\n                ? trans._n('%1 notification', '%1 notifications', manager.count)\n                : trans.__('No notifications')),\n            React.createElement(\"span\", { className: \"jp-Toolbar-item jp-Toolbar-spacer\" }),\n            React.createElement(ToolbarButtonComponent, { actualOnClick: true, onClick: () => {\n                    manager.dismiss();\n                }, icon: deleteIcon, tooltip: trans.__('Dismiss all notifications'), enabled: manager.count > 0 }),\n            React.createElement(ToolbarButtonComponent, { actualOnClick: true, onClick: onClose, icon: closeIcon, tooltip: trans.__('Hide notifications') })),\n        React.createElement(\"ol\", { className: \"jp-Notification-List\" }, notifications.map(notification => {\n            var _a;\n            const { id, message, type, options } = notification;\n            const toastType = type === 'in-progress' ? 'default' : type;\n            const closeNotification = () => {\n                manager.dismiss(id);\n            };\n            const icon = type === 'default'\n                ? null\n                : type === 'in-progress'\n                    ? (_a = icons === null || icons === void 0 ? void 0 : icons.spinner) !== null && _a !== void 0 ? _a : null : icons && icons[type];\n            return (React.createElement(\"li\", { className: \"jp-Notification-List-Item\", key: notification.id, onClick: event => {\n                    // Stop propagation to avoid closing the popup on click\n                    event.stopPropagation();\n                } },\n                React.createElement(\"div\", { className: `Toastify__toast Toastify__toast-theme--light Toastify__toast--${toastType} jp-Notification-Toast-${toastType}` },\n                    React.createElement(\"div\", { className: \"Toastify__toast-body\" },\n                        icon && (React.createElement(\"div\", { className: \"Toastify__toast-icon\" }, icon({ theme: 'light', type: toastType }))),\n                        React.createElement(\"div\", null, Private.createContent(message, closeNotification, options.actions))),\n                    React.createElement(\"button\", { className: `bp3-button bp3-minimal jp-Button jp-mod-minimal ${TOAST_CLOSE_BUTTON_CLASS}`, title: trans.__('Dismiss notification'), onClick: closeNotification },\n                        React.createElement(deleteIcon.react, { className: \"jp-icon-hover\", tag: \"span\" })))));\n        }))))));\n}\n/**\n * Status widget model\n */\nclass NotificationStatusModel extends VDomModel {\n    constructor(manager) {\n        super();\n        this.manager = manager;\n        this._highlight = false;\n        this._listOpened = false;\n        this._doNotDisturbMode = false;\n        this._count = manager.count;\n        this.manager.changed.connect(this.onNotificationChanged, this);\n    }\n    /**\n     * Number of notifications.\n     */\n    get count() {\n        return this._count;\n    }\n    /**\n     * Whether to silence all notifications or not.\n     */\n    get doNotDisturbMode() {\n        return this._doNotDisturbMode;\n    }\n    set doNotDisturbMode(v) {\n        this._doNotDisturbMode = v;\n    }\n    /**\n     * Whether to highlight the status widget or not.\n     */\n    get highlight() {\n        return this._highlight;\n    }\n    /**\n     * Whether the popup is opened or not.\n     */\n    get listOpened() {\n        return this._listOpened;\n    }\n    set listOpened(v) {\n        this._listOpened = v;\n        if (this._listOpened || this._highlight) {\n            this._highlight = false;\n        }\n        this.stateChanged.emit();\n    }\n    onNotificationChanged(manager, change) {\n        // Set private attribute to trigger only once the signal emission\n        this._count = this.manager.count;\n        const { autoClose } = change.notification.options;\n        const noToast = this.doNotDisturbMode ||\n            (typeof autoClose === 'number' && autoClose <= 0);\n        // Highlight if\n        //   the list is not opened (the style change if list is opened due to clickedItem style in statusbar.)\n        //   the change type is not removed\n        //   the notification will be hidden\n        if (!this._listOpened && change.type !== 'removed' && noToast) {\n            this._highlight = true;\n        }\n        this.stateChanged.emit();\n    }\n}\n/**\n * Status view\n */\nfunction NotificationStatus(props) {\n    return (React.createElement(GroupItem, { spacing: HALF_SPACING, onClick: () => {\n            props.onClick();\n        }, title: props.count > 0\n            ? props.trans._n('%1 notification', '%1 notifications', props.count)\n            : props.trans.__('No notifications') },\n        React.createElement(TextItem, { className: \"jp-Notification-Status-Text\", source: `${props.count}` }),\n        React.createElement(bellIcon.react, { top: '2px', stylesheet: 'statusBar' })));\n}\n/**\n * Add notification center and toast\n */\nexport const notificationPlugin = {\n    id: '@jupyterlab/apputils-extension:notification',\n    autoStart: true,\n    requires: [IStatusBar],\n    optional: [ISettingRegistry, ITranslator],\n    activate: (app, statusBar, settingRegistry, translator) => {\n        Private.translator = translator !== null && translator !== void 0 ? translator : nullTranslator;\n        const trans = Private.translator.load('jupyterlab');\n        const model = new NotificationStatusModel(Notification.manager);\n        model.doNotDisturbMode = false;\n        if (settingRegistry) {\n            void Promise.all([\n                settingRegistry.load(notificationPlugin.id),\n                app.restored\n            ]).then(([plugin]) => {\n                const updateSettings = () => {\n                    model.doNotDisturbMode = plugin.get('doNotDisturbMode')\n                        .composite;\n                };\n                updateSettings();\n                plugin.changed.connect(updateSettings);\n            });\n        }\n        app.commands.addCommand(CommandIDs.notify, {\n            label: trans.__('Emit a notification'),\n            caption: trans.__('Notification is described by {message: string, type?: string, options?: {autoClose?: number | false, actions: {label: string, commandId: string, args?: ReadOnlyJSONObject, caption?: string, className?: string}[], data?: ReadOnlyJSONValue}}.'),\n            execute: args => {\n                var _a;\n                const { message, type } = args;\n                const options = (_a = args.options) !== null && _a !== void 0 ? _a : {};\n                return Notification.manager.notify(message, type !== null && type !== void 0 ? type : 'default', Object.assign(Object.assign({}, options), { actions: options.actions\n                        ? options.actions.map((action) => {\n                            return Object.assign(Object.assign({}, action), { callback: () => {\n                                    app.commands\n                                        .execute(action.commandId, action.args)\n                                        .catch(r => {\n                                        console.error(`Failed to executed '${action.commandId}':\\n${r}`);\n                                    });\n                                } });\n                        })\n                        : null }));\n            }\n        });\n        app.commands.addCommand(CommandIDs.update, {\n            label: trans.__('Update a notification'),\n            caption: trans.__('Notification is described by {id: string, message: string, type?: string, options?: {autoClose?: number | false, actions: {label: string, commandId: string, args?: ReadOnlyJSONObject, caption?: string, className?: string}[], data?: ReadOnlyJSONValue}}.'),\n            execute: args => {\n                const _a = args, { id, message, type } = _a, options = __rest(_a, [\"id\", \"message\", \"type\"]);\n                return Notification.manager.update(Object.assign(Object.assign({ id,\n                    message, type: type !== null && type !== void 0 ? type : 'default' }, options), { actions: options.actions\n                        ? options.actions.map((action) => {\n                            return Object.assign(Object.assign({}, action), { callback: () => {\n                                    app.commands\n                                        .execute(action.commandId, action.args)\n                                        .catch(r => {\n                                        console.error(`Failed to executed '${action.commandId}':\\n${r}`);\n                                    });\n                                } });\n                        })\n                        : null }));\n            }\n        });\n        app.commands.addCommand(CommandIDs.dismiss, {\n            label: trans.__('Dismiss a notification'),\n            execute: args => {\n                const { id } = args;\n                Notification.manager.dismiss(id);\n            }\n        });\n        let popup = null;\n        model.listOpened = false;\n        const notificationList = ReactWidget.create(React.createElement(NotificationCenter, { manager: Notification.manager, onClose: () => {\n                popup === null || popup === void 0 ? void 0 : popup.dispose();\n            }, trans: trans }));\n        notificationList.addClass('jp-Notification-Center');\n        async function onNotification(manager, change) {\n            var _a;\n            if (model.doNotDisturbMode || (popup !== null && !popup.isDisposed)) {\n                return;\n            }\n            const { message, type, options, id } = change.notification;\n            if (typeof options.autoClose === 'number' && options.autoClose <= 0) {\n                // If the notification is silent, bail early.\n                return;\n            }\n            switch (change.type) {\n                case 'added':\n                    await Private.createToast(id, message, type, options);\n                    break;\n                case 'updated':\n                    {\n                        const toast = await Private.toast();\n                        const actions = options.actions;\n                        const autoClose = (_a = options.autoClose) !== null && _a !== void 0 ? _a : (actions && actions.length > 0 ? false : null);\n                        if (toast.isActive(id)) {\n                            // Update existing toast\n                            const closeToast = () => {\n                                // Dismiss the displayed toast\n                                toast.dismiss(id);\n                                // Dismiss the notification from the queue\n                                manager.dismiss(id);\n                            };\n                            toast.update(id, {\n                                type: type === 'in-progress' ? null : type,\n                                isLoading: type === 'in-progress',\n                                autoClose: autoClose,\n                                render: Private.createContent(message, closeToast, options.actions)\n                            });\n                        }\n                        else {\n                            // Needs to recreate a closed toast\n                            await Private.createToast(id, message, type, options);\n                        }\n                    }\n                    break;\n                case 'removed':\n                    await Private.toast().then(t => {\n                        t.dismiss(id);\n                    });\n                    break;\n            }\n        }\n        Notification.manager.changed.connect(onNotification);\n        const displayNotifications = () => {\n            if (popup) {\n                popup.dispose();\n                popup = null;\n            }\n            else {\n                popup = showPopup({\n                    body: notificationList,\n                    anchor: notificationStatus,\n                    align: 'right',\n                    hasDynamicSize: true,\n                    startHidden: true\n                });\n                // Dismiss all toasts when opening the notification center\n                const finalize = () => {\n                    popup === null || popup === void 0 ? void 0 : popup.launch();\n                    // Focus on the pop-up\n                    notificationList.node.focus();\n                    popup === null || popup === void 0 ? void 0 : popup.disposed.connect(() => {\n                        model.listOpened = false;\n                        popup = null;\n                    });\n                };\n                Private.toast()\n                    .then(t => {\n                    t.dismiss();\n                    finalize();\n                })\n                    .catch(r => {\n                    console.error(`Failed to dismiss all toasts:\\n${r}`);\n                    finalize();\n                });\n            }\n            model.listOpened = popup !== null;\n        };\n        app.commands.addCommand(CommandIDs.display, {\n            label: trans.__('Show Notifications'),\n            execute: displayNotifications\n        });\n        const notificationStatus = ReactWidget.create(React.createElement(UseSignal, { signal: model.stateChanged }, () => {\n            if (model.highlight || (popup && !popup.isDisposed)) {\n                notificationStatus.addClass('jp-mod-selected');\n            }\n            else {\n                notificationStatus.removeClass('jp-mod-selected');\n            }\n            return (React.createElement(NotificationStatus, { count: model.count, highlight: model.highlight, trans: trans, onClick: displayNotifications }));\n        }));\n        notificationStatus.addClass('jp-Notification-Status');\n        statusBar.registerStatusItem(notificationPlugin.id, {\n            item: notificationStatus,\n            align: 'right',\n            rank: -1\n        });\n    }\n};\nvar Private;\n(function (Private) {\n    /**\n     * Translator object for private namespace\n     */\n    Private.translator = nullTranslator;\n    /**\n     * Pointer to asynchronously loaded react-toastify\n     */\n    let toastify = null;\n    function CloseButton(props) {\n        const trans = Private.translator.load('jupyterlab');\n        return (React.createElement(\"button\", { className: `bp3-button bp3-minimal jp-Button jp-mod-minimal ${TOAST_CLOSE_BUTTON_CLASS}`, title: trans.__('Hide notification'), onClick: props.closeToast },\n            React.createElement(closeIcon.react, { className: \"jp-icon-hover\", tag: \"span\" })));\n    }\n    /**\n     * Asynchronously load the toast container\n     *\n     * @returns The toast object\n     */\n    async function toast() {\n        if (toastify === null) {\n            toastify = await import('react-toastify');\n            const container = document.body.appendChild(document.createElement('div'));\n            container.id = 'react-toastify-container';\n            ReactDOM.render(React.createElement(toastify.ToastContainer, { draggable: false, closeOnClick: false, hideProgressBar: true, newestOnTop: true, pauseOnFocusLoss: true, pauseOnHover: true, position: \"bottom-right\", className: \"jp-toastContainer\", transition: toastify.Slide, closeButton: CloseButton }), container);\n        }\n        return toastify.toast;\n    }\n    Private.toast = toast;\n    /**\n     * react-toastify icons loader\n     */\n    async function getIcons() {\n        if (toastify === null) {\n            await toast();\n        }\n        return toastify.Icons;\n    }\n    Private.getIcons = getIcons;\n    const displayType2Class = {\n        accent: 'jp-mod-accept',\n        link: 'jp-mod-link',\n        warn: 'jp-mod-warn',\n        default: ''\n    };\n    /**\n     * Create a button with customized callback in a toast\n     */\n    function ToastButton({ action, closeToast }) {\n        var _a, _b;\n        const clickHandler = (event) => {\n            action.callback(event);\n            if (!event.defaultPrevented) {\n                closeToast();\n            }\n        };\n        const classes = [\n            'jp-toast-button',\n            displayType2Class[(_a = action.displayType) !== null && _a !== void 0 ? _a : 'default']\n        ].join(' ');\n        return (React.createElement(Button, { title: (_b = action.caption) !== null && _b !== void 0 ? _b : action.label, className: classes, onClick: clickHandler, small: true }, action.label));\n    }\n    /**\n     * Helper function to construct the notification content\n     *\n     * @param message Message to print in the notification\n     * @param closeHandler Function closing the notification\n     * @param actions Toast actions\n     */\n    function createContent(message, closeHandler, actions) {\n        var _a;\n        const shortenMessage = message.length > MAX_MESSAGE_LENGTH\n            ? message.slice(0, MAX_MESSAGE_LENGTH) + '…'\n            : message;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", null, shortenMessage.split('\\n').map((part, index) => (React.createElement(React.Fragment, { key: `part-${index}` },\n                index > 0 ? React.createElement(\"br\", null) : null,\n                part)))),\n            ((_a = actions === null || actions === void 0 ? void 0 : actions.length) !== null && _a !== void 0 ? _a : 0) > 0 && (React.createElement(\"div\", { className: \"jp-toast-buttonBar\" },\n                React.createElement(\"div\", { className: \"jp-toast-spacer\" }),\n                actions.map((action, idx) => {\n                    return (React.createElement(ToastButton, { key: 'button-' + idx, action: action, closeToast: closeHandler }));\n                })))));\n    }\n    Private.createContent = createContent;\n    /**\n     * Create a toast notification\n     *\n     * @param toastId Toast unique id\n     * @param message Toast message\n     * @param type Toast type\n     * @param options Toast options\n     * @returns Toast id\n     */\n    async function createToast(toastId, message, type, options = {}) {\n        const { actions, autoClose, data } = options;\n        const t = await toast();\n        const toastOptions = {\n            autoClose: autoClose !== null && autoClose !== void 0 ? autoClose : (actions && actions.length > 0 ? false : undefined),\n            data: data,\n            className: `jp-Notification-Toast-${type}`,\n            toastId,\n            type: type === 'in-progress' ? null : type,\n            isLoading: type === 'in-progress'\n        };\n        return t(({ closeToast }) => createContent(message, () => {\n            closeToast();\n            Notification.manager.dismiss(toastId);\n        }, actions), toastOptions);\n    }\n    Private.createToast = createToast;\n})(Private || (Private = {}));\n//# sourceMappingURL=notificationplugin.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { ModalCommandPalette } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { CommandPaletteSvg, paletteIcon } from '@jupyterlab/ui-components';\nimport { find } from '@lumino/algorithm';\nimport { CommandRegistry } from '@lumino/commands';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { CommandPalette } from '@lumino/widgets';\n/**\n * The command IDs used by the apputils extension.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.activate = 'apputils:activate-command-palette';\n})(CommandIDs || (CommandIDs = {}));\nconst PALETTE_PLUGIN_ID = '@jupyterlab/apputils-extension:palette';\n/**\n * A thin wrapper around the `CommandPalette` class to conform with the\n * JupyterLab interface for the application-wide command palette.\n */\nexport class Palette {\n    /**\n     * Create a palette instance.\n     */\n    constructor(palette, translator) {\n        this.translator = translator || nullTranslator;\n        const trans = this.translator.load('jupyterlab');\n        this._palette = palette;\n        this._palette.title.label = '';\n        this._palette.title.caption = trans.__('Command Palette');\n    }\n    /**\n     * The placeholder text of the command palette's search input.\n     */\n    set placeholder(placeholder) {\n        this._palette.inputNode.placeholder = placeholder;\n    }\n    get placeholder() {\n        return this._palette.inputNode.placeholder;\n    }\n    /**\n     * Activate the command palette for user input.\n     */\n    activate() {\n        this._palette.activate();\n    }\n    /**\n     * Add a command item to the command palette.\n     *\n     * @param options - The options for creating the command item.\n     *\n     * @returns A disposable that will remove the item from the palette.\n     */\n    addItem(options) {\n        const item = this._palette.addItem(options);\n        return new DisposableDelegate(() => {\n            this._palette.removeItem(item);\n        });\n    }\n}\n/**\n * A namespace for `Palette` statics.\n */\n(function (Palette) {\n    /**\n     * Activate the command palette.\n     */\n    function activate(app, translator, settingRegistry) {\n        const { commands, shell } = app;\n        const trans = translator.load('jupyterlab');\n        const palette = Private.createPalette(app, translator);\n        const modalPalette = new ModalCommandPalette({ commandPalette: palette });\n        let modal = false;\n        palette.node.setAttribute('role', 'region');\n        palette.node.setAttribute('aria-label', trans.__('Command Palette Section'));\n        shell.add(palette, 'left', { rank: 300 });\n        if (settingRegistry) {\n            const loadSettings = settingRegistry.load(PALETTE_PLUGIN_ID);\n            const updateSettings = (settings) => {\n                const newModal = settings.get('modal').composite;\n                if (modal && !newModal) {\n                    palette.parent = null;\n                    modalPalette.detach();\n                    shell.add(palette, 'left', { rank: 300 });\n                }\n                else if (!modal && newModal) {\n                    palette.parent = null;\n                    modalPalette.palette = palette;\n                    palette.show();\n                    modalPalette.attach();\n                }\n                modal = newModal;\n            };\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                updateSettings(settings);\n                settings.changed.connect(settings => {\n                    updateSettings(settings);\n                });\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n        // Show the current palette shortcut in its title.\n        const updatePaletteTitle = () => {\n            const binding = find(app.commands.keyBindings, b => b.command === CommandIDs.activate);\n            if (binding) {\n                const ks = binding.keys.map(CommandRegistry.formatKeystroke).join(', ');\n                palette.title.caption = trans.__('Commands (%1)', ks);\n            }\n            else {\n                palette.title.caption = trans.__('Commands');\n            }\n        };\n        updatePaletteTitle();\n        app.commands.keyBindingChanged.connect(() => {\n            updatePaletteTitle();\n        });\n        commands.addCommand(CommandIDs.activate, {\n            execute: () => {\n                if (modal) {\n                    modalPalette.activate();\n                }\n                else {\n                    shell.activateById(palette.id);\n                }\n            },\n            label: trans.__('Activate Command Palette')\n        });\n        palette.inputNode.placeholder = trans.__('SEARCH');\n        return new Palette(palette, translator);\n    }\n    Palette.activate = activate;\n    /**\n     * Restore the command palette.\n     */\n    function restore(app, restorer, translator) {\n        const palette = Private.createPalette(app, translator);\n        // Let the application restorer track the command palette for restoration of\n        // application state (e.g. setting the command palette as the current side bar\n        // widget).\n        restorer.add(palette, 'command-palette');\n    }\n    Palette.restore = restore;\n})(Palette || (Palette = {}));\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The private command palette instance.\n     */\n    let palette;\n    /**\n     * Create the application-wide command palette.\n     */\n    function createPalette(app, translator) {\n        if (!palette) {\n            // use a renderer tweaked to use inline svg icons\n            palette = new CommandPalette({\n                commands: app.commands,\n                renderer: CommandPaletteSvg.defaultRenderer\n            });\n            palette.id = 'command-palette';\n            palette.title.icon = paletteIcon;\n            const trans = translator.load('jupyterlab');\n            palette.title.label = trans.__('Commands');\n        }\n        return palette;\n    }\n    Private.createPalette = createPalette;\n})(Private || (Private = {}));\n//# sourceMappingURL=palette.js.map","import { PageConfig } from '@jupyterlab/coreutils';\nimport { DataConnector } from '@jupyterlab/statedb';\nimport { Throttler } from '@lumino/polling';\n/**\n * A data connector for fetching settings.\n *\n * #### Notes\n * This connector adds a query parameter to the base services setting manager.\n */\nexport class SettingConnector extends DataConnector {\n    constructor(connector) {\n        super();\n        this._throttlers = Object.create(null);\n        this._connector = connector;\n    }\n    /**\n     * Fetch settings for a plugin.\n     * @param id - The plugin ID\n     *\n     * #### Notes\n     * The REST API requests are throttled at one request per plugin per 100ms.\n     */\n    fetch(id) {\n        const throttlers = this._throttlers;\n        if (!(id in throttlers)) {\n            throttlers[id] = new Throttler(() => this._connector.fetch(id), 100);\n        }\n        return throttlers[id].invoke();\n    }\n    async list(query = 'all') {\n        const { isDeferred, isDisabled } = PageConfig.Extension;\n        const { ids, values } = await this._connector.list();\n        if (query === 'all') {\n            return { ids, values };\n        }\n        return {\n            ids: ids.filter(id => !isDeferred(id) && !isDisabled(id)),\n            values: values.filter(({ id }) => !isDeferred(id) && !isDisabled(id))\n        };\n    }\n    async save(id, raw) {\n        await this._connector.save(id, raw);\n    }\n}\n//# sourceMappingURL=settingconnector.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { ISettingRegistry, SettingRegistry } from '@jupyterlab/settingregistry';\nimport { SettingConnector } from './settingconnector';\n/**\n * The default setting registry provider.\n */\nexport const settingsPlugin = {\n    id: '@jupyterlab/apputils-extension:settings',\n    activate: async (app) => {\n        const { isDisabled } = PageConfig.Extension;\n        const connector = new SettingConnector(app.serviceManager.settings);\n        const registry = new SettingRegistry({\n            connector,\n            plugins: (await connector.list('active')).values\n        });\n        // If there are plugins that have schemas that are not in the setting\n        // registry after the application has restored, try to load them manually\n        // because otherwise, its settings will never become available in the\n        // setting registry.\n        void app.restored.then(async () => {\n            const plugins = await connector.list('all');\n            plugins.ids.forEach(async (id, index) => {\n                if (isDisabled(id) || id in registry.plugins) {\n                    return;\n                }\n                try {\n                    await registry.load(id);\n                }\n                catch (error) {\n                    console.warn(`Settings failed to load for (${id})`, error);\n                    if (plugins.values[index].schema['jupyter.lab.transform']) {\n                        console.warn(`This may happen if {autoStart: false} in (${id}) ` +\n                            `or if it is one of the deferredExtensions in page config.`);\n                    }\n                }\n            });\n        });\n        return registry;\n    },\n    autoStart: true,\n    provides: ISettingRegistry\n};\n//# sourceMappingURL=settingsplugin.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { JupyterFrontEnd } from '@jupyterlab/application';\nimport { ICommandPalette, ISplashScreen, IThemeManager, ThemeManager } from '@jupyterlab/apputils';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.changeTheme = 'apputils:change-theme';\n    CommandIDs.themeScrollbars = 'apputils:theme-scrollbars';\n    CommandIDs.changeFont = 'apputils:change-font';\n    CommandIDs.incrFontSize = 'apputils:incr-font-size';\n    CommandIDs.decrFontSize = 'apputils:decr-font-size';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The default theme manager provider.\n */\nexport const themesPlugin = {\n    id: '@jupyterlab/apputils-extension:themes',\n    requires: [ISettingRegistry, JupyterFrontEnd.IPaths, ITranslator],\n    optional: [ISplashScreen],\n    activate: (app, settings, paths, translator, splash) => {\n        const trans = translator.load('jupyterlab');\n        const host = app.shell;\n        const commands = app.commands;\n        const url = URLExt.join(PageConfig.getBaseUrl(), paths.urls.themes);\n        const key = themesPlugin.id;\n        const manager = new ThemeManager({\n            key,\n            host,\n            settings,\n            splash: splash !== null && splash !== void 0 ? splash : undefined,\n            url\n        });\n        // Keep a synchronously set reference to the current theme,\n        // since the asynchronous setting of the theme in `changeTheme`\n        // can lead to an incorrect toggle on the currently used theme.\n        let currentTheme;\n        manager.themeChanged.connect((sender, args) => {\n            // Set data attributes on the application shell for the current theme.\n            currentTheme = args.newValue;\n            document.body.dataset.jpThemeLight = String(manager.isLight(currentTheme));\n            document.body.dataset.jpThemeName = currentTheme;\n            if (document.body.dataset.jpThemeScrollbars !==\n                String(manager.themeScrollbars(currentTheme))) {\n                document.body.dataset.jpThemeScrollbars = String(manager.themeScrollbars(currentTheme));\n            }\n            commands.notifyCommandChanged(CommandIDs.changeTheme);\n        });\n        commands.addCommand(CommandIDs.changeTheme, {\n            label: args => {\n                const theme = args['theme'];\n                const displayName = manager.getDisplayName(theme);\n                return args['isPalette']\n                    ? trans.__('Use Theme: %1', displayName)\n                    : displayName;\n            },\n            isToggled: args => args['theme'] === currentTheme,\n            execute: args => {\n                const theme = args['theme'];\n                if (theme === manager.theme) {\n                    return;\n                }\n                return manager.setTheme(theme);\n            }\n        });\n        commands.addCommand(CommandIDs.themeScrollbars, {\n            label: trans.__('Theme Scrollbars'),\n            isToggled: () => manager.isToggledThemeScrollbars(),\n            execute: () => manager.toggleThemeScrollbars()\n        });\n        commands.addCommand(CommandIDs.changeFont, {\n            label: args => args['enabled'] ? `${args['font']}` : trans.__('waiting for fonts'),\n            isEnabled: args => args['enabled'],\n            isToggled: args => manager.getCSS(args['key']) === args['font'],\n            execute: args => manager.setCSSOverride(args['key'], args['font'])\n        });\n        commands.addCommand(CommandIDs.incrFontSize, {\n            label: args => {\n                switch (args.key) {\n                    case 'code-font-size':\n                        return trans.__('Increase Code Font Size');\n                    case 'content-font-size1':\n                        return trans.__('Increase Content Font Size');\n                    case 'ui-font-size1':\n                        return trans.__('Increase UI Font Size');\n                    default:\n                        return trans.__('Increase Font Size');\n                }\n            },\n            execute: args => manager.incrFontSize(args['key'])\n        });\n        commands.addCommand(CommandIDs.decrFontSize, {\n            label: args => {\n                switch (args.key) {\n                    case 'code-font-size':\n                        return trans.__('Decrease Code Font Size');\n                    case 'content-font-size1':\n                        return trans.__('Decrease Content Font Size');\n                    case 'ui-font-size1':\n                        return trans.__('Decrease UI Font Size');\n                    default:\n                        return trans.__('Decrease Font Size');\n                }\n            },\n            execute: args => manager.decrFontSize(args['key'])\n        });\n        return manager;\n    },\n    autoStart: true,\n    provides: IThemeManager\n};\n/**\n * The default theme manager's UI command palette and main menu functionality.\n *\n * #### Notes\n * This plugin loads separately from the theme manager plugin in order to\n * prevent blocking of the theme manager while it waits for the command palette\n * and main menu to become available.\n */\nexport const themesPaletteMenuPlugin = {\n    id: '@jupyterlab/apputils-extension:themes-palette-menu',\n    requires: [IThemeManager, ITranslator],\n    optional: [ICommandPalette, IMainMenu],\n    activate: (app, manager, translator, palette, mainMenu) => {\n        const trans = translator.load('jupyterlab');\n        // If we have a main menu, add the theme manager to the settings menu.\n        if (mainMenu) {\n            void app.restored.then(() => {\n                var _a;\n                const isPalette = false;\n                const themeMenu = (_a = mainMenu.settingsMenu.items.find(item => {\n                    var _a;\n                    return item.type === 'submenu' &&\n                        ((_a = item.submenu) === null || _a === void 0 ? void 0 : _a.id) === 'jp-mainmenu-settings-apputilstheme';\n                })) === null || _a === void 0 ? void 0 : _a.submenu;\n                // choose a theme\n                if (themeMenu) {\n                    manager.themes.forEach((theme, index) => {\n                        themeMenu.insertItem(index, {\n                            command: CommandIDs.changeTheme,\n                            args: { isPalette, theme }\n                        });\n                    });\n                }\n            });\n        }\n        // If we have a command palette, add theme switching options to it.\n        if (palette) {\n            void app.restored.then(() => {\n                const category = trans.__('Theme');\n                const command = CommandIDs.changeTheme;\n                const isPalette = true;\n                // choose a theme\n                manager.themes.forEach(theme => {\n                    palette.addItem({ command, args: { isPalette, theme }, category });\n                });\n                // toggle scrollbar theming\n                palette.addItem({ command: CommandIDs.themeScrollbars, category });\n                // increase/decrease code font size\n                palette.addItem({\n                    command: CommandIDs.incrFontSize,\n                    args: {\n                        key: 'code-font-size'\n                    },\n                    category\n                });\n                palette.addItem({\n                    command: CommandIDs.decrFontSize,\n                    args: {\n                        key: 'code-font-size'\n                    },\n                    category\n                });\n                // increase/decrease content font size\n                palette.addItem({\n                    command: CommandIDs.incrFontSize,\n                    args: {\n                        key: 'content-font-size1'\n                    },\n                    category\n                });\n                palette.addItem({\n                    command: CommandIDs.decrFontSize,\n                    args: {\n                        key: 'content-font-size1'\n                    },\n                    category\n                });\n                // increase/decrease ui font size\n                palette.addItem({\n                    command: CommandIDs.incrFontSize,\n                    args: {\n                        key: 'ui-font-size1'\n                    },\n                    category\n                });\n                palette.addItem({\n                    command: CommandIDs.decrFontSize,\n                    args: {\n                        key: 'ui-font-size1'\n                    },\n                    category\n                });\n            });\n        }\n    },\n    autoStart: true\n};\n//# sourceMappingURL=themesplugins.js.map","import { createDefaultFactory, IToolbarWidgetRegistry, ToolbarWidgetRegistry } from '@jupyterlab/apputils';\n/**\n * The default toolbar registry.\n */\nexport const toolbarRegistry = {\n    id: '@jupyterlab/apputils-extension:toolbar-registry',\n    autoStart: true,\n    provides: IToolbarWidgetRegistry,\n    activate: (app) => {\n        const registry = new ToolbarWidgetRegistry({\n            defaultFactory: createDefaultFactory(app.commands)\n        });\n        return registry;\n    }\n};\n//# sourceMappingURL=toolbarregistryplugin.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { IRouter, JupyterFrontEnd } from '@jupyterlab/application';\nimport { Dialog, IWindowResolver, showDialog } from '@jupyterlab/apputils';\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { ABCWidgetFactory, DocumentWidget } from '@jupyterlab/docregistry';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { Widget } from '@lumino/widgets';\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.saveWorkspace = 'workspace-ui:save';\n    CommandIDs.saveWorkspaceAs = 'workspace-ui:save-as';\n})(CommandIDs || (CommandIDs = {}));\nconst WORKSPACE_NAME = 'jupyterlab-workspace';\nconst WORKSPACE_EXT = '.' + WORKSPACE_NAME;\nconst LAST_SAVE_ID = 'workspace-ui:lastSave';\nconst ICON_NAME = 'jp-JupyterIcon';\n/**\n * The workspace MIME renderer and save plugin.\n */\nexport const workspacesPlugin = {\n    id: '@jupyterlab/apputils-extension:workspaces',\n    autoStart: true,\n    requires: [\n        IFileBrowserFactory,\n        IWindowResolver,\n        IStateDB,\n        ITranslator,\n        JupyterFrontEnd.IPaths\n    ],\n    optional: [IRouter],\n    activate: (app, fbf, resolver, state, translator, paths, router) => {\n        // The workspace factory creates dummy widgets to load a new workspace.\n        const factory = new Private.WorkspaceFactory({\n            workspaces: app.serviceManager.workspaces,\n            router,\n            state,\n            translator,\n            paths\n        });\n        const trans = translator.load('jupyterlab');\n        app.docRegistry.addFileType({\n            name: WORKSPACE_NAME,\n            contentType: 'file',\n            fileFormat: 'text',\n            displayName: trans.__('JupyterLab workspace File'),\n            extensions: [WORKSPACE_EXT],\n            mimeTypes: ['text/json'],\n            iconClass: ICON_NAME\n        });\n        app.docRegistry.addWidgetFactory(factory);\n        app.commands.addCommand(CommandIDs.saveWorkspaceAs, {\n            label: trans.__('Save Current Workspace As…'),\n            execute: async () => {\n                const data = app.serviceManager.workspaces.fetch(resolver.name);\n                await Private.saveAs(fbf.defaultBrowser, app.serviceManager.contents, data, state, translator);\n            }\n        });\n        app.commands.addCommand(CommandIDs.saveWorkspace, {\n            label: trans.__('Save Current Workspace'),\n            execute: async () => {\n                const { contents } = app.serviceManager;\n                const data = app.serviceManager.workspaces.fetch(resolver.name);\n                const lastSave = (await state.fetch(LAST_SAVE_ID));\n                if (lastSave === undefined) {\n                    await Private.saveAs(fbf.defaultBrowser, contents, data, state, translator);\n                }\n                else {\n                    await Private.save(lastSave, contents, data, state);\n                }\n            }\n        });\n    }\n};\nvar Private;\n(function (Private) {\n    /**\n     * Save workspace to a user provided location\n     */\n    async function save(userPath, contents, data, state) {\n        let name = userPath.split('/').pop();\n        // Add extension if not provided or remove extension from name if it was.\n        if (name !== undefined && name.includes('.')) {\n            name = name.split('.')[0];\n        }\n        else {\n            userPath = userPath + WORKSPACE_EXT;\n        }\n        // Save last save location, for save button to work\n        await state.save(LAST_SAVE_ID, userPath);\n        const resolvedData = await data;\n        resolvedData.metadata.id = `${name}`;\n        await contents.save(userPath, {\n            type: 'file',\n            format: 'text',\n            content: JSON.stringify(resolvedData)\n        });\n    }\n    Private.save = save;\n    /**\n     * Ask user for location, and save workspace.\n     * Default location is the current directory in the file browser\n     */\n    async function saveAs(browser, contents, data, state, translator) {\n        var _a;\n        translator = translator || nullTranslator;\n        const lastSave = await state.fetch(LAST_SAVE_ID);\n        let defaultName;\n        if (lastSave === undefined) {\n            defaultName = 'new-workspace';\n        }\n        else {\n            defaultName = (_a = lastSave.split('/').pop()) === null || _a === void 0 ? void 0 : _a.split('.')[0];\n        }\n        const defaultPath = browser.model.path + '/' + defaultName + WORKSPACE_EXT;\n        const userPath = await getSavePath(defaultPath, translator);\n        if (userPath) {\n            await save(userPath, contents, data, state);\n        }\n    }\n    Private.saveAs = saveAs;\n    /**\n     * This widget factory is used to handle double click on workspace\n     */\n    class WorkspaceFactory extends ABCWidgetFactory {\n        /**\n         * Construct a widget factory that uploads a workspace and navigates to it.\n         *\n         * @param options - The instantiation options for a `WorkspaceFactory`.\n         */\n        constructor(options) {\n            const trans = (options.translator || nullTranslator).load('jupyterlab');\n            super({\n                name: trans.__('Workspace loader'),\n                fileTypes: [WORKSPACE_NAME],\n                defaultFor: [WORKSPACE_NAME],\n                readOnly: true\n            });\n            this._application = options.paths.urls.app;\n            this._router = options.router;\n            this._state = options.state;\n            this._workspaces = options.workspaces;\n        }\n        /**\n         * Loads the workspace into load, and jump to it\n         * @param context This is used queried to query the workspace content\n         */\n        createNewWidget(context) {\n            // Save a file's contents as a workspace and navigate to that workspace.\n            void context.ready.then(async () => {\n                const file = context.model;\n                const workspace = file.toJSON();\n                const path = context.path;\n                const id = workspace.metadata.id;\n                // Save the file contents as a workspace.\n                await this._workspaces.save(id, workspace);\n                // Save last save location for the save command.\n                await this._state.save(LAST_SAVE_ID, path);\n                // Navigate to new workspace.\n                const url = URLExt.join(this._application, 'workspaces', id);\n                if (this._router) {\n                    this._router.navigate(url, { hard: true });\n                }\n                else {\n                    document.location.href = url;\n                }\n            });\n            return dummyWidget(context);\n        }\n    }\n    Private.WorkspaceFactory = WorkspaceFactory;\n    /**\n     * Returns a dummy widget with disposed content that doesn't render in the UI.\n     *\n     * @param context - The file context.\n     */\n    function dummyWidget(context) {\n        const widget = new DocumentWidget({ content: new Widget(), context });\n        widget.content.dispose();\n        return widget;\n    }\n    /**\n     * Ask user for a path to save to.\n     * @param defaultPath Path already present when the dialog is shown\n     */\n    async function getSavePath(defaultPath, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const saveBtn = Dialog.okButton({ label: trans.__('Save') });\n        const result = await showDialog({\n            title: trans.__('Save Current Workspace As…'),\n            body: new SaveWidget(defaultPath),\n            buttons: [Dialog.cancelButton({ label: trans.__('Cancel') }), saveBtn]\n        });\n        if (result.button.label === trans.__('Save')) {\n            return result.value;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * A widget that gets a file path from a user.\n     */\n    class SaveWidget extends Widget {\n        /**\n         * Gets a modal node for getting save location. Will have a default to the current opened directory\n         * @param path Default location\n         */\n        constructor(path) {\n            super({ node: createSaveNode(path) });\n        }\n        /**\n         * Gets the save path entered by the user\n         */\n        getValue() {\n            return this.node.value;\n        }\n    }\n    /**\n     * Create the node for a save widget.\n     */\n    function createSaveNode(path) {\n        const input = document.createElement('input');\n        input.value = path;\n        return input;\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=workspacesplugin.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module apputils-extension\n */\nimport { ILayoutRestorer, IRouter, JupyterFrontEnd } from '@jupyterlab/application';\nimport { Dialog, ICommandPalette, ISanitizer, ISessionContextDialogs, ISplashScreen, IWindowResolver, MainAreaWidget, Printing, Sanitizer, sessionContextDialogs, WindowResolver } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt, URLExt } from '@jupyterlab/coreutils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB, StateDB } from '@jupyterlab/statedb';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { jupyterFaviconIcon } from '@jupyterlab/ui-components';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Debouncer, Throttler } from '@lumino/polling';\nimport { announcements } from './announcements';\nimport { notificationPlugin } from './notificationplugin';\nimport { Palette } from './palette';\nimport { settingsPlugin } from './settingsplugin';\nimport { themesPaletteMenuPlugin, themesPlugin } from './themesplugins';\nimport { toolbarRegistry } from './toolbarregistryplugin';\nimport { workspacesPlugin } from './workspacesplugin';\n/**\n * The interval in milliseconds before recover options appear during splash.\n */\nconst SPLASH_RECOVER_TIMEOUT = 12000;\n/**\n * The command IDs used by the apputils plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.loadState = 'apputils:load-statedb';\n    CommandIDs.print = 'apputils:print';\n    CommandIDs.reset = 'apputils:reset';\n    CommandIDs.resetOnLoad = 'apputils:reset-on-load';\n    CommandIDs.runFirstEnabled = 'apputils:run-first-enabled';\n    CommandIDs.runAllEnabled = 'apputils:run-all-enabled';\n    CommandIDs.toggleHeader = 'apputils:toggle-header';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The default command palette extension.\n */\nconst palette = {\n    id: '@jupyterlab/apputils-extension:palette',\n    autoStart: true,\n    requires: [ITranslator],\n    provides: ICommandPalette,\n    optional: [ISettingRegistry],\n    activate: (app, translator, settingRegistry) => {\n        return Palette.activate(app, translator, settingRegistry);\n    }\n};\n/**\n * The default command palette's restoration extension.\n *\n * #### Notes\n * The command palette's restoration logic is handled separately from the\n * command palette provider extension because the layout restorer dependency\n * causes the command palette to be unavailable to other extensions earlier\n * in the application load cycle.\n */\nconst paletteRestorer = {\n    id: '@jupyterlab/apputils-extension:palette-restorer',\n    autoStart: true,\n    requires: [ILayoutRestorer, ITranslator],\n    activate: (app, restorer, translator) => {\n        Palette.restore(app, restorer, translator);\n    }\n};\n/**\n * The default window name resolver provider.\n */\nconst resolver = {\n    id: '@jupyterlab/apputils-extension:resolver',\n    autoStart: true,\n    provides: IWindowResolver,\n    requires: [JupyterFrontEnd.IPaths, IRouter],\n    activate: async (app, paths, router) => {\n        const { hash, search } = router.current;\n        const query = URLExt.queryStringToObject(search || '');\n        const solver = new WindowResolver();\n        const workspace = PageConfig.getOption('workspace');\n        const treePath = PageConfig.getOption('treePath');\n        const mode = PageConfig.getOption('mode') === 'multiple-document' ? 'lab' : 'doc';\n        // This is used as a key in local storage to refer to workspaces, either the name\n        // of the workspace or the string PageConfig.defaultWorkspace. Both lab and doc modes share the same workspace.\n        const candidate = workspace ? workspace : PageConfig.defaultWorkspace;\n        const rest = treePath ? URLExt.join('tree', treePath) : '';\n        try {\n            await solver.resolve(candidate);\n            return solver;\n        }\n        catch (error) {\n            // Window resolution has failed so the URL must change. Return a promise\n            // that never resolves to prevent the application from loading plugins\n            // that rely on `IWindowResolver`.\n            return new Promise(() => {\n                const { base } = paths.urls;\n                const pool = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n                const random = pool[Math.floor(Math.random() * pool.length)];\n                let path = URLExt.join(base, mode, 'workspaces', `auto-${random}`);\n                path = rest ? URLExt.join(path, URLExt.encodeParts(rest)) : path;\n                // Reset the workspace on load.\n                query['reset'] = '';\n                const url = path + URLExt.objectToQueryString(query) + (hash || '');\n                router.navigate(url, { hard: true });\n            });\n        }\n    }\n};\n/**\n * The default splash screen provider.\n */\nconst splash = {\n    id: '@jupyterlab/apputils-extension:splash',\n    autoStart: true,\n    requires: [ITranslator],\n    provides: ISplashScreen,\n    activate: (app, translator) => {\n        const trans = translator.load('jupyterlab');\n        const { commands, restored } = app;\n        // Create splash element and populate it.\n        const splash = document.createElement('div');\n        const galaxy = document.createElement('div');\n        const logo = document.createElement('div');\n        splash.id = 'jupyterlab-splash';\n        galaxy.id = 'galaxy';\n        logo.id = 'main-logo';\n        jupyterFaviconIcon.element({\n            container: logo,\n            stylesheet: 'splash'\n        });\n        galaxy.appendChild(logo);\n        ['1', '2', '3'].forEach(id => {\n            const moon = document.createElement('div');\n            const planet = document.createElement('div');\n            moon.id = `moon${id}`;\n            moon.className = 'moon orbit';\n            planet.id = `planet${id}`;\n            planet.className = 'planet';\n            moon.appendChild(planet);\n            galaxy.appendChild(moon);\n        });\n        splash.appendChild(galaxy);\n        // Create debounced recovery dialog function.\n        let dialog;\n        const recovery = new Throttler(async () => {\n            if (dialog) {\n                return;\n            }\n            dialog = new Dialog({\n                title: trans.__('Loading…'),\n                body: trans.__(`The loading screen is taking a long time.\nWould you like to clear the workspace or keep waiting?`),\n                buttons: [\n                    Dialog.cancelButton({ label: trans.__('Keep Waiting') }),\n                    Dialog.warnButton({ label: trans.__('Clear Workspace') })\n                ]\n            });\n            try {\n                const result = await dialog.launch();\n                dialog.dispose();\n                dialog = null;\n                if (result.button.accept && commands.hasCommand(CommandIDs.reset)) {\n                    return commands.execute(CommandIDs.reset);\n                }\n                // Re-invoke the recovery timer in the next frame.\n                requestAnimationFrame(() => {\n                    // Because recovery can be stopped, handle invocation rejection.\n                    void recovery.invoke().catch(_ => undefined);\n                });\n            }\n            catch (error) {\n                /* no-op */\n            }\n        }, { limit: SPLASH_RECOVER_TIMEOUT, edge: 'trailing' });\n        // Return ISplashScreen.\n        let splashCount = 0;\n        return {\n            show: (light = true) => {\n                splash.classList.remove('splash-fade');\n                splash.classList.toggle('light', light);\n                splash.classList.toggle('dark', !light);\n                splashCount++;\n                document.body.appendChild(splash);\n                // Because recovery can be stopped, handle invocation rejection.\n                void recovery.invoke().catch(_ => undefined);\n                return new DisposableDelegate(async () => {\n                    await restored;\n                    if (--splashCount === 0) {\n                        void recovery.stop();\n                        if (dialog) {\n                            dialog.dispose();\n                            dialog = null;\n                        }\n                        splash.classList.add('splash-fade');\n                        window.setTimeout(() => {\n                            document.body.removeChild(splash);\n                        }, 200);\n                    }\n                });\n            }\n        };\n    }\n};\nconst print = {\n    id: '@jupyterlab/apputils-extension:print',\n    autoStart: true,\n    requires: [ITranslator],\n    activate: (app, translator) => {\n        const trans = translator.load('jupyterlab');\n        app.commands.addCommand(CommandIDs.print, {\n            label: trans.__('Print…'),\n            isEnabled: () => {\n                const widget = app.shell.currentWidget;\n                return Printing.getPrintFunction(widget) !== null;\n            },\n            execute: async () => {\n                const widget = app.shell.currentWidget;\n                const printFunction = Printing.getPrintFunction(widget);\n                if (printFunction) {\n                    await printFunction();\n                }\n            }\n        });\n    }\n};\nexport const toggleHeader = {\n    id: '@jupyterlab/apputils-extension:toggle-header',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ICommandPalette],\n    activate: (app, translator, palette) => {\n        const trans = translator.load('jupyterlab');\n        const category = trans.__('Main Area');\n        app.commands.addCommand(CommandIDs.toggleHeader, {\n            label: trans.__('Show Header Above Content'),\n            isEnabled: () => app.shell.currentWidget instanceof MainAreaWidget &&\n                app.shell.currentWidget.contentHeader.widgets.length > 0,\n            isToggled: () => {\n                const widget = app.shell.currentWidget;\n                return widget instanceof MainAreaWidget\n                    ? !widget.contentHeader.isHidden\n                    : false;\n            },\n            execute: async () => {\n                const widget = app.shell.currentWidget;\n                if (widget instanceof MainAreaWidget) {\n                    widget.contentHeader.setHidden(!widget.contentHeader.isHidden);\n                }\n            }\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.toggleHeader, category });\n        }\n    }\n};\n/**\n * Update the browser title based on the workspace and the current\n * active item.\n */\nasync function updateTabTitle(workspace, db, name) {\n    var _a, _b;\n    const data = await db.toJSON();\n    let current = (_b = (_a = data['layout-restorer:data']) === null || _a === void 0 ? void 0 : _a.main) === null || _b === void 0 ? void 0 : _b.current;\n    if (current === undefined) {\n        document.title = `${PageConfig.getOption('appName') || 'JupyterLab'}${workspace.startsWith('auto-') ? ` (${workspace})` : ``}`;\n    }\n    else {\n        // File name from current path\n        let currentFile = PathExt.basename(window.location.href);\n        // Truncate to first 12 characters of current document name + ... if length > 15\n        currentFile =\n            currentFile.length > 15\n                ? currentFile.slice(0, 12).concat(`…`)\n                : currentFile;\n        // Number of restorable items that are either notebooks or editors\n        const count = Object.keys(data).filter(item => item.startsWith('notebook') || item.startsWith('editor')).length;\n        if (workspace.startsWith('auto-')) {\n            document.title = `${currentFile} (${workspace}${count > 1 ? ` : ${count}` : ``}) - ${name}`;\n        }\n        else {\n            document.title = `${currentFile}${count > 1 ? ` (${count})` : ``} - ${name}`;\n        }\n    }\n}\n/**\n * The default state database for storing application state.\n *\n * #### Notes\n * If this extension is loaded with a window resolver, it will automatically add\n * state management commands, URL support for `clone` and `reset`, and workspace\n * auto-saving. Otherwise, it will return a simple in-memory state database.\n */\nconst state = {\n    id: '@jupyterlab/apputils-extension:state',\n    autoStart: true,\n    provides: IStateDB,\n    requires: [JupyterFrontEnd.IPaths, IRouter, ITranslator],\n    optional: [IWindowResolver],\n    activate: (app, paths, router, translator, resolver) => {\n        const trans = translator.load('jupyterlab');\n        if (resolver === null) {\n            return new StateDB();\n        }\n        let resolved = false;\n        const { commands, name, serviceManager } = app;\n        const { workspaces } = serviceManager;\n        const workspace = resolver.name;\n        const transform = new PromiseDelegate();\n        const db = new StateDB({ transform: transform.promise });\n        const save = new Debouncer(async () => {\n            const id = workspace;\n            const metadata = { id };\n            const data = await db.toJSON();\n            await workspaces.save(id, { data, metadata });\n        });\n        // Any time the local state database changes, save the workspace.\n        db.changed.connect(() => void save.invoke(), db);\n        db.changed.connect(() => updateTabTitle(workspace, db, name));\n        commands.addCommand(CommandIDs.loadState, {\n            execute: async (args) => {\n                // Since the command can be executed an arbitrary number of times, make\n                // sure it is safe to call multiple times.\n                if (resolved) {\n                    return;\n                }\n                const { hash, path, search } = args;\n                const query = URLExt.queryStringToObject(search || '');\n                const clone = typeof query['clone'] === 'string'\n                    ? query['clone'] === ''\n                        ? PageConfig.defaultWorkspace\n                        : query['clone']\n                    : null;\n                const source = clone || workspace || null;\n                if (source === null) {\n                    console.error(`${CommandIDs.loadState} cannot load null workspace.`);\n                    return;\n                }\n                try {\n                    const saved = await workspaces.fetch(source);\n                    // If this command is called after a reset, the state database\n                    // will already be resolved.\n                    if (!resolved) {\n                        resolved = true;\n                        transform.resolve({ type: 'overwrite', contents: saved.data });\n                    }\n                }\n                catch ({ message }) {\n                    console.warn(`Fetching workspace \"${workspace}\" failed.`, message);\n                    // If the workspace does not exist, cancel the data transformation\n                    // and save a workspace with the current user state data.\n                    if (!resolved) {\n                        resolved = true;\n                        transform.resolve({ type: 'cancel', contents: null });\n                    }\n                }\n                if (source === clone) {\n                    // Maintain the query string parameters but remove `clone`.\n                    delete query['clone'];\n                    const url = path + URLExt.objectToQueryString(query) + hash;\n                    const cloned = save.invoke().then(() => router.stop);\n                    // After the state has been cloned, navigate to the URL.\n                    void cloned.then(() => {\n                        router.navigate(url);\n                    });\n                    return cloned;\n                }\n                // After the state database has finished loading, save it.\n                await save.invoke();\n            }\n        });\n        commands.addCommand(CommandIDs.reset, {\n            label: trans.__('Reset Application State'),\n            execute: async ({ reload }) => {\n                await db.clear();\n                await save.invoke();\n                if (reload) {\n                    router.reload();\n                }\n            }\n        });\n        commands.addCommand(CommandIDs.resetOnLoad, {\n            execute: (args) => {\n                const { hash, path, search } = args;\n                const query = URLExt.queryStringToObject(search || '');\n                const reset = 'reset' in query;\n                const clone = 'clone' in query;\n                if (!reset) {\n                    return;\n                }\n                // If the state database has already been resolved, resetting is\n                // impossible without reloading.\n                if (resolved) {\n                    return router.reload();\n                }\n                // Empty the state database.\n                resolved = true;\n                transform.resolve({ type: 'clear', contents: null });\n                // Maintain the query string parameters but remove `reset`.\n                delete query['reset'];\n                const url = path + URLExt.objectToQueryString(query) + hash;\n                const cleared = db.clear().then(() => save.invoke());\n                // After the state has been reset, navigate to the URL.\n                if (clone) {\n                    void cleared.then(() => {\n                        router.navigate(url, { hard: true });\n                    });\n                }\n                else {\n                    void cleared.then(() => {\n                        router.navigate(url);\n                    });\n                }\n                return cleared;\n            }\n        });\n        router.register({\n            command: CommandIDs.loadState,\n            pattern: /.?/,\n            rank: 30 // High priority: 30:100.\n        });\n        router.register({\n            command: CommandIDs.resetOnLoad,\n            pattern: /(\\?reset|\\&reset)($|&)/,\n            rank: 20 // High priority: 20:100.\n        });\n        return db;\n    }\n};\n/**\n * The default session context dialogs extension.\n */\nconst sessionDialogs = {\n    id: '@jupyterlab/apputils-extension:sessionDialogs',\n    provides: ISessionContextDialogs,\n    autoStart: true,\n    activate: () => {\n        return sessionContextDialogs;\n    }\n};\n/**\n * Utility commands\n */\nconst utilityCommands = {\n    id: '@jupyterlab/apputils-extension:utilityCommands',\n    requires: [ITranslator],\n    autoStart: true,\n    activate: (app, translator) => {\n        const trans = translator.load('jupyterlab');\n        const { commands } = app;\n        commands.addCommand(CommandIDs.runFirstEnabled, {\n            label: trans.__('Run First Enabled Command'),\n            execute: args => {\n                const commands = args.commands;\n                const commandArgs = args.args;\n                const argList = Array.isArray(args);\n                for (let i = 0; i < commands.length; i++) {\n                    const cmd = commands[i];\n                    const arg = argList ? commandArgs[i] : commandArgs;\n                    if (app.commands.isEnabled(cmd, arg)) {\n                        return app.commands.execute(cmd, arg);\n                    }\n                }\n            }\n        });\n        commands.addCommand(CommandIDs.runAllEnabled, {\n            label: trans.__('Run All Enabled Commands Passed as Args'),\n            execute: async (args) => {\n                const commands = args.commands;\n                const commandArgs = args.args;\n                const argList = Array.isArray(args);\n                const errorIfNotEnabled = args.errorIfNotEnabled;\n                for (let i = 0; i < commands.length; i++) {\n                    const cmd = commands[i];\n                    const arg = argList ? commandArgs[i] : commandArgs;\n                    if (app.commands.isEnabled(cmd, arg)) {\n                        await app.commands.execute(cmd, arg);\n                    }\n                    else {\n                        if (errorIfNotEnabled) {\n                            console.error(`${cmd} is not enabled.`);\n                        }\n                    }\n                }\n            }\n        });\n    }\n};\n/**\n * The default HTML sanitizer.\n */\nconst sanitizer = {\n    id: '@jupyter/apputils-extension:sanitizer',\n    autoStart: true,\n    provides: ISanitizer,\n    requires: [ISettingRegistry],\n    activate: (app, settings) => {\n        const sanitizer = new Sanitizer();\n        const loadSetting = (setting) => {\n            const allowedSchemes = setting.get('allowedSchemes').composite;\n            if (allowedSchemes) {\n                sanitizer.setAllowedSchemes(allowedSchemes);\n            }\n        };\n        // Wait for the application to be restored and\n        // for the settings for this plugin to be loaded\n        settings\n            .load('@jupyterlab/apputils-extension:sanitizer')\n            .then(setting => {\n            // Read the settings\n            loadSetting(setting);\n            // Listen for your plugin setting changes using Signal\n            setting.changed.connect(loadSetting);\n        })\n            .catch(reason => {\n            console.error(`Failed to load sanitizer settings:`, reason);\n        });\n        return sanitizer;\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    announcements,\n    notificationPlugin,\n    palette,\n    paletteRestorer,\n    print,\n    resolver,\n    sanitizer,\n    settingsPlugin,\n    state,\n    splash,\n    sessionDialogs,\n    themesPlugin,\n    themesPaletteMenuPlugin,\n    toggleHeader,\n    toolbarRegistry,\n    utilityCommands,\n    workspacesPlugin\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"names":["COMMAND_HELP_OPEN","NEWS_API_URL","UPDATE_API_URL","PRIVACY_URL","async","requestAPI","endpoint","init","settings","ServerConnection","requestUrl","URLExt","baseUrl","response","error","data","json","ok","message","announcements","id","autoStart","optional","ISettingRegistry","ITranslator","activate","app","settingRegistry","translator","_a","CONFIG_SECTION_NAME","replace","Promise","all","restored","load","resolve","ConfigSection","name","then","_","config","trans","nullTranslator","Notification","manager","change","type","tags","notification","options","some","tag","includes","update","seen","dismissed","catch","reason","console","get","composite","notificationId","__","autoClose","actions","label","caption","callback","event","preventDefault","commands","hasCommand","execute","text","url","window","open","displayType","fetchNews","set","_b","_c","_d","link","news","state","length","push","log","TOAST_CLOSE_BUTTON_CLASS","MAX_MESSAGE_LENGTH","CommandIDs","dismiss","display","notify","HALF_SPACING","NotificationCenter","props","onClose","notifications","setNotifications","icons","setIcons","onChanged","map","n","Object","freeze","assign","count","changed","connect","disconnect","Private","getIcons","toastifyIcons","r","UseSignal","signal","className","_n","ToolbarButtonComponent","actualOnClick","onClick","icon","deleteIcon","tooltip","enabled","closeIcon","toastType","closeNotification","spinner","key","stopPropagation","theme","createContent","title","NotificationStatusModel","VDomModel","constructor","super","this","_highlight","_listOpened","_doNotDisturbMode","_count","onNotificationChanged","doNotDisturbMode","v","highlight","listOpened","stateChanged","emit","noToast","NotificationStatus","GroupItem","spacing","TextItem","source","bellIcon","top","stylesheet","notificationPlugin","requires","IStatusBar","statusBar","model","plugin","updateSettings","addCommand","args","action","commandId","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","popup","notificationList","ReactWidget","dispose","addClass","isDisposed","createToast","toast","isActive","closeToast","isLoading","render","displayNotifications","showPopup","body","anchor","notificationStatus","align","hasDynamicSize","startHidden","finalize","launch","node","focus","disposed","removeClass","registerStatusItem","item","rank","toastify","CloseButton","container","document","appendChild","createElement","ToastContainer","draggable","closeOnClick","hideProgressBar","newestOnTop","pauseOnFocusLoss","pauseOnHover","position","transition","Slide","closeButton","Icons","displayType2Class","accent","warn","default","ToastButton","classes","join","Button","defaultPrevented","small","closeHandler","shortenMessage","slice","split","part","index","idx","toastId","undefined","Palette","palette","_palette","placeholder","inputNode","addItem","DisposableDelegate","removeItem","shell","createPalette","modalPalette","ModalCommandPalette","commandPalette","modal","setAttribute","add","loadSettings","newModal","parent","detach","show","attach","updatePaletteTitle","binding","find","keyBindings","b","command","ks","keys","CommandRegistry","keyBindingChanged","activateById","restore","restorer","CommandPalette","renderer","CommandPaletteSvg","paletteIcon","SettingConnector","DataConnector","connector","_throttlers","create","_connector","fetch","throttlers","Throttler","invoke","query","isDeferred","isDisabled","PageConfig","ids","values","list","filter","raw","save","settingsPlugin","serviceManager","registry","SettingRegistry","plugins","forEach","schema","provides","changeTheme","themeScrollbars","changeFont","incrFontSize","decrFontSize","themesPlugin","JupyterFrontEnd","ISplashScreen","paths","splash","host","urls","themes","ThemeManager","currentTheme","themeChanged","sender","newValue","dataset","jpThemeLight","String","isLight","jpThemeName","jpThemeScrollbars","notifyCommandChanged","displayName","getDisplayName","isToggled","setTheme","isToggledThemeScrollbars","toggleThemeScrollbars","isEnabled","getCSS","setCSSOverride","IThemeManager","themesPaletteMenuPlugin","ICommandPalette","IMainMenu","mainMenu","themeMenu","settingsMenu","items","submenu","insertItem","isPalette","category","toolbarRegistry","IToolbarWidgetRegistry","ToolbarWidgetRegistry","defaultFactory","createDefaultFactory","saveWorkspace","saveWorkspaceAs","WORKSPACE_NAME","WORKSPACE_EXT","LAST_SAVE_ID","workspacesPlugin","IFileBrowserFactory","IWindowResolver","IStateDB","IRouter","fbf","resolver","router","factory","WorkspaceFactory","workspaces","docRegistry","addFileType","contentType","fileFormat","extensions","mimeTypes","iconClass","addWidgetFactory","saveAs","defaultBrowser","contents","lastSave","userPath","pop","resolvedData","metadata","format","content","JSON","stringify","browser","defaultName","defaultPath","path","saveBtn","Dialog","result","showDialog","SaveWidget","buttons","button","value","getSavePath","ABCWidgetFactory","fileTypes","defaultFor","readOnly","_application","_router","_state","_workspaces","createNewWidget","context","ready","workspace","toJSON","navigate","hard","location","href","widget","DocumentWidget","Widget","dummyWidget","createSaveNode","getValue","input","loadState","print","reset","resetOnLoad","runFirstEnabled","runAllEnabled","toggleHeader","paletteRestorer","ILayoutRestorer","hash","search","current","solver","WindowResolver","treePath","mode","candidate","rest","base","pool","random","Math","floor","galaxy","logo","dialog","jupyterFaviconIcon","moon","planet","recovery","accept","requestAnimationFrame","limit","edge","splashCount","light","classList","remove","toggle","stop","setTimeout","removeChild","currentWidget","Printing","printFunction","MainAreaWidget","contentHeader","widgets","isHidden","setHidden","StateDB","resolved","transform","PromiseDelegate","db","promise","Debouncer","main","startsWith","currentFile","PathExt","concat","updateTabTitle","clone","saved","cloned","reload","clear","cleared","register","pattern","sessionDialogs","ISessionContextDialogs","sessionContextDialogs","utilityCommands","commandArgs","argList","Array","isArray","cmd","arg","errorIfNotEnabled","sanitizer","ISanitizer","Sanitizer","loadSetting","setting","allowedSchemes","setAllowedSchemes"],"sourceRoot":""}