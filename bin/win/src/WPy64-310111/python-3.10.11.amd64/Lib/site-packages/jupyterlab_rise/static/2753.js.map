{"version":3,"file":"2753.bundle.js","mappings":"wPAuQIA,E,iEA5PG,MAAMC,EAITC,YAAYC,EAAU,CAAC,GAKnBC,KAAKC,WAAY,EACjBD,KAAKE,UAAW,EAChBF,KAAKG,aAAc,EACnBH,KAAKI,cAAgB,IAAI,EAAAC,OAAOL,MAChCA,KAAKM,SAAW,IAAI,EAAAD,OAAOL,MAC3BA,KAAKE,WAAaH,EAAQQ,QAC1BP,KAAKQ,eACDT,EAAQS,gBAAkBX,EAAgBY,sBAC9CT,KAAKU,KAAO,IAAI,EAAAC,eACZZ,EAAQa,SACR,IAAAC,MAAKd,EAAQa,QAAQE,IACjBd,KAAKe,KAAKD,EAAM,IAGxBd,KAAKU,KAAKM,QAAQC,QAAQjB,KAAKkB,eAAgBlB,KACnD,CAIImB,mBACA,OAAOnB,KAAKI,aAChB,CAIIY,cACA,OAAOhB,KAAKM,QAChB,CAIIc,aACA,OAAOpB,KAAKU,KAAOV,KAAKU,KAAKU,OAAS,CAC1C,CAIIb,cACA,OAAOP,KAAKE,QAChB,CAOIK,YAAQO,GACR,GAAIA,IAAUd,KAAKE,SACf,OAEJ,MAAMK,EAAWP,KAAKE,SAAWY,EACjC,IAAK,IAAIO,EAAI,EAAGA,EAAIrB,KAAKU,KAAKU,OAAQC,IAAK,CACvC,IAAIC,EAAOtB,KAAKU,KAAKa,IAAIF,GACzB,MAAMP,EAAQQ,EAAKE,SACnBF,EAAKG,UACLH,EAAOtB,KAAK0B,YAAY,CAAEZ,QAAOP,YACjCP,KAAKU,KAAKiB,IAAIN,EAAGC,EACrB,CACJ,CAIIM,iBACA,OAAO5B,KAAKG,WAChB,CAIAsB,UACQzB,KAAK4B,aAGT5B,KAAKG,aAAc,EACnBH,KAAKU,KAAKe,UACV,EAAApB,OAAA,UAAiBL,MACrB,CAIAuB,IAAIM,GACA,OAAO7B,KAAKU,KAAKa,IAAIM,EACzB,CAIAF,IAAIE,EAAOf,GACPA,EAAQ,EAAAgB,QAAA,SAAiBhB,GAEzBlB,EAAQmC,UAAUjB,GAClB,MAAMQ,EAAOtB,KAAK0B,YAAY,CAAEZ,QAAOP,QAASP,KAAKE,WACrDF,KAAKU,KAAKiB,IAAIE,EAAOP,EACzB,CAUAU,IAAIC,GAMA,OAJIjC,KAAKC,YACLD,KAAKkC,QACLlC,KAAKC,WAAY,GAEdD,KAAKe,KAAKkB,EACrB,CAMAC,MAAMC,GAAO,GACTnC,KAAKoC,YAAc,GACfD,EACAnC,KAAKC,WAAY,IAGrB,IAAAY,MAAKb,KAAKU,MAAOY,IACbA,EAAKG,SAAS,IAElBzB,KAAKU,KAAKwB,QACd,CAOAG,SAASzB,GACLZ,KAAKkC,SACL,IAAArB,MAAKD,GAAQE,IACTd,KAAKe,KAAKD,EAAM,GAExB,CAIAU,SACI,OAAO,IAAAc,UAAQ,IAAAC,KAAIvC,KAAKU,MAAOuB,GAAWA,EAAOT,WACrD,CAIAT,KAAKD,GACD,MAAMP,EAAUP,KAAKE,SAKrB,GAJAY,EAAQ,EAAAgB,QAAA,SAAiBhB,GAEzBlB,EAAQmC,UAAUjB,GAEd,WAAkBA,IAClBd,KAAKoC,aACLtB,EAAM0B,OAASxC,KAAKyC,WACpBzC,KAAK0C,cAAc,CACf5B,QACA6B,UAAW3C,KAAKU,KAAKa,IAAIvB,KAAKoB,OAAS,KACvC,CAIJpB,KAAKoC,aAAetB,EAAM8B,KAC1B5C,KAAKoC,YAAcxC,EAAQiD,uBAAuB7C,KAAKoC,aACvDtB,EAAM8B,KAAO5C,KAAKoC,YAClB,MAAMd,EAAOtB,KAAK0B,YAAY,CAAEZ,QAAOP,YACjCsB,EAAQ7B,KAAKoB,OAAS,EAI5B,OAHapB,KAAKU,KAAKa,IAAIM,GACtBJ,UACLzB,KAAKU,KAAKiB,IAAIE,EAAOP,GACdO,CACX,CACI,WAAkBf,KAClBA,EAAM8B,KAAOhD,EAAQiD,uBAAuB/B,EAAM8B,OAGtD,MAAMtB,EAAOtB,KAAK0B,YAAY,CAAEZ,QAAOP,YAUvC,OARI,WAAkBO,IAClBd,KAAKoC,YAActB,EAAM8B,KACzB5C,KAAKyC,UAAY3B,EAAM0B,MAGvBxC,KAAKoC,YAAc,GAGhBpC,KAAKU,KAAKoC,KAAKxB,EAC1B,CAOAoB,cAAc3C,GACV,OAAO,CACX,CAIA2B,YAAY3B,GACR,MACMuB,EADUtB,KAAKQ,eACAuC,kBAAkBhD,GAEvC,OADAuB,EAAKN,QAAQC,QAAQjB,KAAKgD,iBAAkBhD,MACrCsB,CACX,CAIAJ,eAAe+B,EAAQC,GACnBlD,KAAKM,SAAS6C,KAAKD,EACvB,CAIAF,mBACIhD,KAAKI,cAAc+C,UAAK,EAC5B,GAKJ,SAAWtD,GAIP,MAAMuD,EAIFL,kBAAkBhD,GACd,OAAO,IAAI,EAAAsD,YAAYtD,EAC3B,EAEJF,EAAgBuD,eAAiBA,EAIjCvD,EAAgBY,sBAAwB,IAAI2C,CAC/C,CAjBD,CAiBGvD,IAAoBA,EAAkB,CAAC,IAK1C,SAAWD,GAWPA,EAAQmC,UAPR,SAAmBjB,GACX,WAAkBA,IACdwC,MAAMC,QAAQzC,EAAM8B,QACpB9B,EAAM8B,KAAO9B,EAAM8B,KAAKY,KAAK,MAGzC,EAkCA5D,EAAQiD,uBAHR,SAAgCD,GAC5B,OAdJ,SAA2Ba,GAEvB,IADAA,EAAMA,EAAIC,QAAQ,UAAW,MACtBD,EAAIE,OAAO,YAAc,GAAG,CAC/B,MAAMC,EAAOH,EAAII,MAAM,aAAa,GACpC,IAAIC,EAASL,EAAII,MAAM,aAAa,GACpCC,GAAkBF,EAAKG,MAAMD,EAAO1C,OAAQwC,EAAKxC,QACjDqC,EAAMA,EAAIC,QAAQ,UAAW,MAAMA,QAAQ,SAAUI,EACzD,CACA,OAAOL,CACX,CAKWO,CA3BX,SAAsBP,GAClB,IAAIQ,EAAMR,EACV,GAGIQ,GAFAR,EAAMQ,GAEIP,QAAQ,cAAe,UAC5BO,EAAI7C,OAASqC,EAAIrC,QAC1B,OAAOqC,CACX,CAmB6BS,CAAatB,GAC1C,CAEH,CA7CD,CA6CGhD,IAAYA,EAAU,CAAC,I,gDC9StBuE,EAAU,WACV,GAAmB,oBAARC,IACP,OAAOA,IASX,SAASC,EAASC,EAAKC,GACnB,IAAIC,GAAU,EAQd,OAPAF,EAAIG,MAAK,SAAUC,EAAO7C,GACtB,OAAI6C,EAAM,KAAOH,IACbC,EAAS3C,GACF,EAGf,IACO2C,CACX,CACA,OAAsB,WAClB,SAASG,IACL3E,KAAK4E,YAAc,EACvB,CAsEA,OArEAC,OAAOC,eAAeH,EAAQI,UAAW,OAAQ,CAI7CxD,IAAK,WACD,OAAOvB,KAAK4E,YAAYxD,MAC5B,EACA4D,YAAY,EACZC,cAAc,IAMlBN,EAAQI,UAAUxD,IAAM,SAAUgD,GAC9B,IAAI1C,EAAQwC,EAASrE,KAAK4E,YAAaL,GACnCG,EAAQ1E,KAAK4E,YAAY/C,GAC7B,OAAO6C,GAASA,EAAM,EAC1B,EAMAC,EAAQI,UAAUpD,IAAM,SAAU4C,EAAKzD,GACnC,IAAIe,EAAQwC,EAASrE,KAAK4E,YAAaL,IAClC1C,EACD7B,KAAK4E,YAAY/C,GAAO,GAAKf,EAG7Bd,KAAK4E,YAAY9B,KAAK,CAACyB,EAAKzD,GAEpC,EAKA6D,EAAQI,UAAUG,OAAS,SAAUX,GACjC,IAAIY,EAAUnF,KAAK4E,YACf/C,EAAQwC,EAASc,EAASZ,IACzB1C,GACDsD,EAAQC,OAAOvD,EAAO,EAE9B,EAKA8C,EAAQI,UAAUM,IAAM,SAAUd,GAC9B,SAAUF,EAASrE,KAAK4E,YAAaL,EACzC,EAIAI,EAAQI,UAAU7C,MAAQ,WACtBlC,KAAK4E,YAAYQ,OAAO,EAC5B,EAMAT,EAAQI,UAAUO,QAAU,SAAUC,EAAUC,QAChC,IAARA,IAAkBA,EAAM,MAC5B,IAAK,IAAIC,EAAK,EAAGC,EAAK1F,KAAK4E,YAAaa,EAAKC,EAAGtE,OAAQqE,IAAM,CAC1D,IAAIf,EAAQgB,EAAGD,GACfF,EAASI,KAAKH,EAAKd,EAAM,GAAIA,EAAM,GACvC,CACJ,EACOC,CACX,CA1EqB,EA2ExB,CAjGa,GAsGViB,EAA8B,oBAAXC,QAA8C,oBAAbC,UAA4BD,OAAOC,WAAaA,SAGpGC,OACsB,IAAX,EAAAC,GAA0B,EAAAA,EAAOC,OAASA,KAC1C,EAAAD,EAES,oBAATE,MAAwBA,KAAKD,OAASA,KACtCC,KAEW,oBAAXL,QAA0BA,OAAOI,OAASA,KAC1CJ,OAGJM,SAAS,cAATA,GASPC,EACqC,mBAA1BC,sBAIAA,sBAAsBC,KAAKP,GAE/B,SAAUR,GAAY,OAAOgB,YAAW,WAAc,OAAOhB,EAASiB,KAAKC,MAAQ,GAAG,IAAO,GAAK,EAIzGC,EAAkB,EAiElBC,EAAgB,GAGhBC,EAAiB,CAAC,MAAO,QAAS,SAAU,OAAQ,QAAS,SAAU,OAAQ,UAE/EC,EAAwD,oBAArBC,iBAInCC,EAA0C,WAM1C,SAASA,IAML/G,KAAKgH,YAAa,EAMlBhH,KAAKiH,sBAAuB,EAM5BjH,KAAKkH,mBAAqB,KAM1BlH,KAAKmH,WAAa,GAClBnH,KAAKoH,iBAAmBpH,KAAKoH,iBAAiBd,KAAKtG,MACnDA,KAAKqH,QAjGb,SAAmB9B,EAAU+B,GACzB,IAAIC,GAAc,EAAOC,GAAe,EAAOC,EAAe,EAO9D,SAASC,IACDH,IACAA,GAAc,EACdhC,KAEAiC,GACAG,GAER,CAQA,SAASC,IACLxB,EAAwBsB,EAC5B,CAMA,SAASC,IACL,IAAIE,EAAYrB,KAAKC,MACrB,GAAIc,EAAa,CAEb,GAAIM,EAAYJ,EAAef,EAC3B,OAMJc,GAAe,CACnB,MAEID,GAAc,EACdC,GAAe,EACfjB,WAAWqB,EAAiBN,GAEhCG,EAAeI,CACnB,CACA,OAAOF,CACX,CA4CuBG,CAAS9H,KAAKqH,QAAQf,KAAKtG,MAAO2G,EACrD,CA+JA,OAxJAI,EAAyBhC,UAAUgD,YAAc,SAAUC,IACjDhI,KAAKmH,WAAWc,QAAQD,IAC1BhI,KAAKmH,WAAWrE,KAAKkF,GAGpBhI,KAAKgH,YACNhH,KAAKkI,UAEb,EAOAnB,EAAyBhC,UAAUoD,eAAiB,SAAUH,GAC1D,IAAII,EAAYpI,KAAKmH,WACjBtF,EAAQuG,EAAUH,QAAQD,IAEzBnG,GACDuG,EAAUhD,OAAOvD,EAAO,IAGvBuG,EAAUhH,QAAUpB,KAAKgH,YAC1BhH,KAAKqI,aAEb,EAOAtB,EAAyBhC,UAAUsC,QAAU,WACnBrH,KAAKsI,oBAIvBtI,KAAKqH,SAEb,EASAN,EAAyBhC,UAAUuD,iBAAmB,WAElD,IAAIC,EAAkBvI,KAAKmH,WAAWqB,QAAO,SAAUR,GACnD,OAAOA,EAASS,eAAgBT,EAASU,WAC7C,IAOA,OADAH,EAAgBjD,SAAQ,SAAU0C,GAAY,OAAOA,EAASW,iBAAmB,IAC1EJ,EAAgBnH,OAAS,CACpC,EAOA2F,EAAyBhC,UAAUmD,SAAW,WAGrCtC,IAAa5F,KAAKgH,aAMvBlB,SAAS8C,iBAAiB,gBAAiB5I,KAAKoH,kBAChDvB,OAAO+C,iBAAiB,SAAU5I,KAAKqH,SACnCR,GACA7G,KAAKkH,mBAAqB,IAAIJ,iBAAiB9G,KAAKqH,SACpDrH,KAAKkH,mBAAmB2B,QAAQ/C,SAAU,CACtCgD,YAAY,EACZC,WAAW,EACXC,eAAe,EACfC,SAAS,MAIbnD,SAAS8C,iBAAiB,qBAAsB5I,KAAKqH,SACrDrH,KAAKiH,sBAAuB,GAEhCjH,KAAKgH,YAAa,EACtB,EAOAD,EAAyBhC,UAAUsD,YAAc,WAGxCzC,GAAc5F,KAAKgH,aAGxBlB,SAASoD,oBAAoB,gBAAiBlJ,KAAKoH,kBACnDvB,OAAOqD,oBAAoB,SAAUlJ,KAAKqH,SACtCrH,KAAKkH,oBACLlH,KAAKkH,mBAAmBiC,aAExBnJ,KAAKiH,sBACLnB,SAASoD,oBAAoB,qBAAsBlJ,KAAKqH,SAE5DrH,KAAKkH,mBAAqB,KAC1BlH,KAAKiH,sBAAuB,EAC5BjH,KAAKgH,YAAa,EACtB,EAQAD,EAAyBhC,UAAUqC,iBAAmB,SAAU1B,GAC5D,IAAI0D,EAAK1D,EAAG2D,aAAcA,OAAsB,IAAPD,EAAgB,GAAKA,EAEvCxC,EAAenC,MAAK,SAAUF,GACjD,SAAU8E,EAAapB,QAAQ1D,EACnC,KAEIvE,KAAKqH,SAEb,EAMAN,EAAyBuC,YAAc,WAInC,OAHKtJ,KAAKuJ,YACNvJ,KAAKuJ,UAAY,IAAIxC,GAElB/G,KAAKuJ,SAChB,EAMAxC,EAAyBwC,UAAY,KAC9BxC,CACX,CAjM6C,GA0MzCyC,EAAqB,SAAWC,EAAQC,GACxC,IAAK,IAAIjE,EAAK,EAAGC,EAAKb,OAAO8E,KAAKD,GAAQjE,EAAKC,EAAGtE,OAAQqE,IAAM,CAC5D,IAAIlB,EAAMmB,EAAGD,GACbZ,OAAOC,eAAe2E,EAAQlF,EAAK,CAC/BzD,MAAO4I,EAAMnF,GACbS,YAAY,EACZ4E,UAAU,EACV3E,cAAc,GAEtB,CACA,OAAOwE,CACV,EAQGI,EAAc,SAAWJ,GAOzB,OAHkBA,GAAUA,EAAOK,eAAiBL,EAAOK,cAAcC,aAGnDhE,CACzB,EAGGiE,EAAYC,EAAe,EAAG,EAAG,EAAG,GAOxC,SAASC,EAAQpJ,GACb,OAAOqJ,WAAWrJ,IAAU,CAChC,CAQA,SAASsJ,EAAeC,GAEpB,IADA,IAAIC,EAAY,GACP7E,EAAK,EAAGA,EAAK8E,UAAUnJ,OAAQqE,IACpC6E,EAAU7E,EAAK,GAAK8E,UAAU9E,GAElC,OAAO6E,EAAUE,QAAO,SAAUC,EAAMC,GAEpC,OAAOD,EAAOP,EADFG,EAAO,UAAYK,EAAW,UAE9C,GAAG,EACP,CAyGA,IAAIC,EAGkC,oBAAvBC,mBACA,SAAUnB,GAAU,OAAOA,aAAkBI,EAAYJ,GAAQmB,kBAAoB,EAKzF,SAAUnB,GAAU,OAAQA,aAAkBI,EAAYJ,GAAQoB,YAC3C,mBAAnBpB,EAAOqB,OAAyB,EAiB/C,SAASC,EAAetB,GACpB,OAAK7D,EAGD+E,EAAqBlB,GAhH7B,SAA2BA,GACvB,IAAIuB,EAAOvB,EAAOqB,UAClB,OAAOb,EAAe,EAAG,EAAGe,EAAKC,MAAOD,EAAKE,OACjD,CA8GeC,CAAkB1B,GAvGjC,SAAmCA,GAG/B,IAAI2B,EAAc3B,EAAO2B,YAAaC,EAAe5B,EAAO4B,aAS5D,IAAKD,IAAgBC,EACjB,OAAOrB,EAEX,IAAIK,EAASR,EAAYJ,GAAQ6B,iBAAiB7B,GAC9C8B,EA3CR,SAAqBlB,GAGjB,IAFA,IACIkB,EAAW,CAAC,EACP9F,EAAK,EAAG+F,EAFD,CAAC,MAAO,QAAS,SAAU,QAED/F,EAAK+F,EAAYpK,OAAQqE,IAAM,CACrE,IAAIiF,EAAWc,EAAY/F,GACvB3E,EAAQuJ,EAAO,WAAaK,GAChCa,EAASb,GAAYR,EAAQpJ,EACjC,CACA,OAAOyK,CACX,CAkCmBE,CAAYpB,GACvBqB,EAAWH,EAASI,KAAOJ,EAASK,MACpCC,EAAUN,EAASO,IAAMP,EAASQ,OAKlCd,EAAQf,EAAQG,EAAOY,OAAQC,EAAShB,EAAQG,EAAOa,QAqB3D,GAlByB,eAArBb,EAAO2B,YAOH/F,KAAKgG,MAAMhB,EAAQS,KAAcN,IACjCH,GAASb,EAAeC,EAAQ,OAAQ,SAAWqB,GAEnDzF,KAAKgG,MAAMf,EAASW,KAAaR,IACjCH,GAAUd,EAAeC,EAAQ,MAAO,UAAYwB,KAoDhE,SAA2BpC,GACvB,OAAOA,IAAWI,EAAYJ,GAAQ3D,SAASoG,eACnD,CA/CSC,CAAkB1C,GAAS,CAK5B,IAAI2C,EAAgBnG,KAAKgG,MAAMhB,EAAQS,GAAYN,EAC/CiB,EAAiBpG,KAAKgG,MAAMf,EAASW,GAAWR,EAMpB,IAA5BpF,KAAKqG,IAAIF,KACTnB,GAASmB,GAEoB,IAA7BnG,KAAKqG,IAAID,KACTnB,GAAUmB,EAElB,CACA,OAAOpC,EAAesB,EAASI,KAAMJ,EAASO,IAAKb,EAAOC,EAC9D,CAyCWqB,CAA0B9C,GALtBO,CAMf,CAiCA,SAASC,EAAeuC,EAAGC,EAAGxB,EAAOC,GACjC,MAAO,CAAEsB,EAAGA,EAAGC,EAAGA,EAAGxB,MAAOA,EAAOC,OAAQA,EAC/C,CAMA,IAAIwB,EAAmC,WAMnC,SAASA,EAAkBjD,GAMvBzJ,KAAK2M,eAAiB,EAMtB3M,KAAK4M,gBAAkB,EAMvB5M,KAAK6M,aAAe5C,EAAe,EAAG,EAAG,EAAG,GAC5CjK,KAAKyJ,OAASA,CAClB,CAyBA,OAlBAiD,EAAkB3H,UAAU+H,SAAW,WACnC,IAAIC,EAAOhC,EAAe/K,KAAKyJ,QAE/B,OADAzJ,KAAK6M,aAAeE,EACZA,EAAK9B,QAAUjL,KAAK2M,gBACxBI,EAAK7B,SAAWlL,KAAK4M,eAC7B,EAOAF,EAAkB3H,UAAUiI,cAAgB,WACxC,IAAID,EAAO/M,KAAK6M,aAGhB,OAFA7M,KAAK2M,eAAiBI,EAAK9B,MAC3BjL,KAAK4M,gBAAkBG,EAAK7B,OACrB6B,CACX,EACOL,CACX,CApDsC,GAsDlCO,EAOA,SAA6BxD,EAAQyD,GACjC,IA/FoBxH,EACpB8G,EAAUC,EAAUxB,EAAkBC,EAEtCiC,EACAJ,EA2FIK,GA9FJZ,GADoB9G,EA+FiBwH,GA9F9BV,EAAGC,EAAI/G,EAAG+G,EAAGxB,EAAQvF,EAAGuF,MAAOC,EAASxF,EAAGwF,OAElDiC,EAAoC,oBAApBE,gBAAkCA,gBAAkBxI,OACpEkI,EAAOlI,OAAOyI,OAAOH,EAAOpI,WAEhCyE,EAAmBuD,EAAM,CACrBP,EAAGA,EAAGC,EAAGA,EAAGxB,MAAOA,EAAOC,OAAQA,EAClCY,IAAKW,EACLb,MAAOY,EAAIvB,EACXc,OAAQb,EAASuB,EACjBd,KAAMa,IAEHO,GAyFHvD,EAAmBxJ,KAAM,CAAEyJ,OAAQA,EAAQ2D,YAAaA,GAC5D,EAIAG,EAAmC,WAWnC,SAASA,EAAkBhI,EAAUiI,EAAYC,GAc7C,GAPAzN,KAAK0N,oBAAsB,GAM3B1N,KAAK2N,cAAgB,IAAIxJ,EACD,mBAAboB,EACP,MAAM,IAAIqI,UAAU,2DAExB5N,KAAK6N,UAAYtI,EACjBvF,KAAK8N,YAAcN,EACnBxN,KAAK+N,aAAeN,CACxB,CAmHA,OA5GAF,EAAkBxI,UAAU8D,QAAU,SAAUY,GAC5C,IAAKc,UAAUnJ,OACX,MAAM,IAAIwM,UAAU,4CAGxB,GAAuB,oBAAZI,SAA6BA,mBAAmBnJ,OAA3D,CAGA,KAAM4E,aAAkBI,EAAYJ,GAAQuE,SACxC,MAAM,IAAIJ,UAAU,yCAExB,IAAIK,EAAejO,KAAK2N,cAEpBM,EAAa5I,IAAIoE,KAGrBwE,EAAatM,IAAI8H,EAAQ,IAAIiD,EAAkBjD,IAC/CzJ,KAAK8N,YAAY/F,YAAY/H,MAE7BA,KAAK8N,YAAYzG,UAZjB,CAaJ,EAOAkG,EAAkBxI,UAAUmJ,UAAY,SAAUzE,GAC9C,IAAKc,UAAUnJ,OACX,MAAM,IAAIwM,UAAU,4CAGxB,GAAuB,oBAAZI,SAA6BA,mBAAmBnJ,OAA3D,CAGA,KAAM4E,aAAkBI,EAAYJ,GAAQuE,SACxC,MAAM,IAAIJ,UAAU,yCAExB,IAAIK,EAAejO,KAAK2N,cAEnBM,EAAa5I,IAAIoE,KAGtBwE,EAAa/I,OAAOuE,GACfwE,EAAaxD,MACdzK,KAAK8N,YAAY3F,eAAenI,MAXpC,CAaJ,EAMAuN,EAAkBxI,UAAUoE,WAAa,WACrCnJ,KAAKmO,cACLnO,KAAK2N,cAAczL,QACnBlC,KAAK8N,YAAY3F,eAAenI,KACpC,EAOAuN,EAAkBxI,UAAU0D,aAAe,WACvC,IAAI2F,EAAQpO,KACZA,KAAKmO,cACLnO,KAAK2N,cAAcrI,SAAQ,SAAU+I,GAC7BA,EAAYvB,YACZsB,EAAMV,oBAAoB5K,KAAKuL,EAEvC,GACJ,EAOAd,EAAkBxI,UAAU4D,gBAAkB,WAE1C,GAAK3I,KAAK0I,YAAV,CAGA,IAAIlD,EAAMxF,KAAK+N,aAEX5I,EAAUnF,KAAK0N,oBAAoBnL,KAAI,SAAU8L,GACjD,OAAO,IAAIpB,EAAoBoB,EAAY5E,OAAQ4E,EAAYrB,gBACnE,IACAhN,KAAK6N,UAAUlI,KAAKH,EAAKL,EAASK,GAClCxF,KAAKmO,aAPL,CAQJ,EAMAZ,EAAkBxI,UAAUoJ,YAAc,WACtCnO,KAAK0N,oBAAoBtI,OAAO,EACpC,EAMAmI,EAAkBxI,UAAU2D,UAAY,WACpC,OAAO1I,KAAK0N,oBAAoBtM,OAAS,CAC7C,EACOmM,CACX,CAnJsC,GAwJlCnF,EAA+B,oBAAZkG,QAA0B,IAAIA,QAAY,IAAInK,EAKjEoK,EAOA,SAASA,EAAehJ,GACpB,KAAMvF,gBAAgBuO,GAClB,MAAM,IAAIX,UAAU,sCAExB,IAAKrD,UAAUnJ,OACX,MAAM,IAAIwM,UAAU,4CAExB,IAAIJ,EAAazG,EAAyBuC,cACtCtB,EAAW,IAAIuF,EAAkBhI,EAAUiI,EAAYxN,MAC3DoI,EAAUzG,IAAI3B,KAAMgI,EACxB,EAIJ,CACI,UACA,YACA,cACF1C,SAAQ,SAAUkJ,GAChBD,EAAexJ,UAAUyJ,GAAU,WAC/B,IAAI9I,EACJ,OAAQA,EAAK0C,EAAU7G,IAAIvB,OAAOwO,GAAQC,MAAM/I,EAAI6E,UACxD,CACJ,IAUA,aAN2C,IAA5BxE,EAASwI,eACTxI,EAASwI,eAEbA,EC54BLG,EAAyB,sBAIzBC,EAA2B,uBAI3BC,EAA2B,uBAqC1B,MAAMC,UAAmB,EAAAC,OAI5BhP,YAAYC,GACR,IAAI2F,EACJqJ,QAQA/O,KAAKgP,oBAAsB,IAAI,EAAA3O,OAAOL,MAItCA,KAAKiP,SAAYC,IACb,MAAMC,EAAQnP,KAAKmP,MACbC,EAAUF,EAAIG,OAAOC,SAC3B,IAAIrN,EACJ,MACMsN,GADaL,EAAIM,QAAQC,WAAa,CAAC,GACL,WACxC,IAAIC,EACJ,OAAQN,GACJ,IAAK,iBACL,IAAK,eACL,IAAK,SACL,IAAK,QACDnN,EAAS4C,OAAO8K,OAAO9K,OAAO8K,OAAO,CAAC,EAAGT,EAAIM,SAAU,CAAEI,YAAaR,IACtED,EAAMnN,IAAIC,GACV,MACJ,IAAK,eAAgB,CACjB,MAAME,EAAO+M,EAAIM,QAAQrN,KACzBgN,EAAMjN,MAAMC,GACZ,KACJ,CACA,IAAK,sBAGD,GAFAF,EAAS4C,OAAO8K,OAAO9K,OAAO8K,OAAO,CAAC,EAAGT,EAAIM,SAAU,CAAEI,YAAa,iBACtEF,EAAU1P,KAAK6P,cAActO,IAAIgO,GAC7BG,EACA,IAAK,MAAM7N,KAAS6N,EAChBP,EAAMxN,IAAIE,EAAOI,GAO7BsN,GAAyB,iBAAZH,IACbM,EAAU1P,KAAK6P,cAActO,IAAIgO,IAAc,GAC/CG,EAAQ5M,KAAKqM,EAAM/N,OAAS,GAC5BpB,KAAK6P,cAAclO,IAAI4N,EAAWG,GACtC,EAKJ1P,KAAK8P,gBAAmBZ,IAIpB,MAAMC,EAAQnP,KAAKmP,MACbK,EAAUN,EAAIM,QACpB,GAAuB,OAAnBA,EAAQO,OACR,OAEJ,MAAMC,EAAUR,GAAWA,EAAQQ,QACnC,IAAKA,IAAYA,EAAQ5O,OACrB,OAEJ,MAAM6O,EAAQD,EAAQxH,QAAQnH,GAAmB,SAAbA,EAAE6O,SACtC,IAAKD,EAAM7O,OACP,OAEJ,MACMa,EAAS,CACX2N,YAAa,eACbO,KAHSC,KAAKC,MAAMD,KAAKE,UAAUL,EAAM,KAG9BE,KACXI,SAAU,CAAC,GAEfpB,EAAMnN,IAAIC,EAAO,EAErBjC,KAAKwQ,kBAAoB,KACzBxQ,KAAK6P,cAAgB,IAAIzL,IACzBpE,KAAKyQ,eAAiB,IAAI,EAAAC,cAAc,CACpCC,UAAW,EAAAC,KAAA,UAEf5Q,KAAK6Q,SA1Ia,iBA2IlB7Q,KAAKQ,eACDT,EAAQS,gBAAkBqO,EAAWpO,sBACzCT,KAAK8Q,OAAS,IAAI,EAAAC,YAClB/Q,KAAKgR,WAAajR,EAAQiR,WAC1BhR,KAAKiR,kBAAwD,QAAnCvL,EAAK3F,EAAQmR,wBAAqC,IAAPxL,EAAgBA,EAAKyL,IAC1F,MAAMhC,EAASnP,KAAKmP,MAAQpP,EAAQoP,MACpC,IAAK,IAAI9N,EAAI,EAAGA,EAAI4E,KAAKmL,IAAIjC,EAAM/N,OAAQpB,KAAKiR,kBAAoB,GAAI5P,IAAK,CACzE,MAAMY,EAASkN,EAAM5N,IAAIF,GACzBrB,KAAKqR,cAAchQ,EAAGY,EAC1B,CACAkN,EAAMnO,QAAQC,QAAQjB,KAAKsR,eAAgBtR,MAC3CmP,EAAMhO,aAAaF,QAAQjB,KAAKuR,eAAgBvR,KACpD,CAIIwR,cACA,OAAOxR,KAAK8Q,OAAOU,OACvB,CAIIC,aACA,OAAOzR,KAAK0R,OAChB,CACID,WAAO3Q,GAEP,GAAId,KAAKmP,MAAMvN,WACX,MAAM+P,MAAM,qBAEZ3R,KAAK0R,UAAY5Q,IAGjBd,KAAK0R,SACL1R,KAAK0R,QAAQjQ,UAEjBzB,KAAK0R,QAAU5Q,EACfd,KAAKmP,MAAMjN,QAEPlC,KAAKwR,QAAQpQ,SACbpB,KAAK4R,SACL5R,KAAKgP,oBAAoB7L,KAAKnD,KAAKmP,MAAM/N,SAG7CN,EAAM+Q,QAAU7R,KAAKiP,SAErBnO,EAAMgR,QAAU9R,KAAK8P,gBAErBhP,EAAMiR,QAAU7C,IACR,EAAA8C,cAAA,kBAAgC9C,IAChClP,KAAKiS,eAAe/C,EAAKpO,EAC7B,EAER,CAOIoQ,uBACA,OAAOlR,KAAKiR,iBAChB,CACIC,qBAAiBgB,GACjB,GAAIA,GAAS,EAET,YADAC,QAAQC,KAAK,0DAGjB,MAAMC,EAAYrS,KAAKiR,kBACvBjR,KAAKiR,kBAAoBiB,EACrBG,EAAYH,GACZlS,KAAKsS,oBAAoBD,EAEjC,CAIA5Q,UACQzB,KAAK0R,UACL1R,KAAK0R,QAAQjQ,UACbzB,KAAK0R,QAAU,MAEnB1R,KAAK6P,cAAc3N,QACnBlC,KAAKyQ,eAAehP,UACpBsN,MAAMtN,SACV,CAIA6P,eAAerO,EAAQC,GACnB,OAAQA,EAAKqP,MACT,IAAK,MACDvS,KAAKqR,cAAcnO,EAAKsP,SAAUtP,EAAKuP,UAAU,IACjD,MACJ,IAAK,SACD,GAAIzS,KAAKwR,QAAQpQ,OAEb,GAA0B,IAAtBpB,KAAKmP,MAAM/N,OACXpB,KAAK4R,aAEJ,CAGD,MAAMc,EAAaxP,EAAKyP,SACxB,IAAK,IAAItR,EAAI,EAAGA,EAAI6B,EAAK0P,UAAUxR,QAAUsR,EAAa1S,KAAKwR,QAAQpQ,SAAUC,EAAG,CAChF,MAAMwR,EAAS7S,KAAKwR,QAAQkB,GAC5BG,EAAOC,OAAS,KAChBD,EAAOpR,SACX,CAEAzB,KAAK+S,sBAAsBL,EAAYxP,EAAK0P,UAAUxR,QAEtDpB,KAAKgT,4BACT,CAEJ,MACJ,IAAK,MACDhT,KAAKiT,WAAW/P,EAAKsP,SAAUtP,EAAKuP,UAAU,IAKtDzS,KAAKgP,oBAAoB7L,KAAK8C,KAAKmL,IAAIpR,KAAKmP,MAAM/N,OAAQpB,KAAKiR,mBACnE,CASA8B,sBAAsBL,EAAYQ,GAC9BlT,KAAK6P,cAAcvK,SAAS6N,IACxB,MAAMC,EAAWV,EAAaQ,EAG9B,IAAK,IAAI7R,EAFU8R,EAAQ/R,OAED,EAAGC,GAAK,IAAKA,EAAG,CACtC,MAAMQ,EAAQsR,EAAQ9R,GAElBQ,GAAS6Q,GAAc7Q,EAAQuR,EAC/BD,EAAQ/N,OAAO/D,EAAG,GAEbQ,GAASuR,IAEdD,EAAQ9R,IAAM6R,EAEtB,IAER,CAIA3B,eAAetO,GACX,MAAMoQ,EAAepN,KAAKmL,IAAIpR,KAAKmP,MAAM/N,OAAQpB,KAAKiR,mBACtD,IAAK,IAAI5P,EAAI,EAAGA,EAAIgS,EAAchS,IAC9BrB,KAAKiT,WAAW5R,EAAGrB,KAAKmP,MAAM5N,IAAIF,IAEtCrB,KAAKgP,oBAAoB7L,KAAKkQ,EAClC,CAIAzB,SAEI,IAAK5R,KAAKwR,QAAQpQ,OACd,OAGJ,MAAMA,EAASpB,KAAKwR,QAAQpQ,OAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAC7B,MAAMwR,EAAS7S,KAAKwR,QAAQ,GAC5BqB,EAAOC,OAAS,KAChBD,EAAOpR,SACX,CAEAzB,KAAK6P,cAAc3N,QAEnBlC,KAAKgT,4BACT,CACAA,6BAMI,MAAMjG,EAAO/M,KAAKsT,KAAKC,wBACvBvT,KAAKsT,KAAKE,MAAMC,UAAY,GAAG1G,EAAK7B,WAChClL,KAAKwQ,mBACL3K,OAAO6N,aAAa1T,KAAKwQ,mBAE7BxQ,KAAKwQ,kBAAoB3K,OAAOU,YAAW,KACnCvG,KAAK4B,aAGT5B,KAAKsT,KAAKE,MAAMC,UAAY,GAAE,GAC/B,GACP,CAIAxB,eAAe/C,EAAKuC,GAEhB,MAAMkC,EAAU3T,KAAKQ,eACfoT,EAAc1E,EAAIM,QAAQqE,OAC1BC,EAAW5E,EAAIM,QAAQsE,SACvBC,EAAQ,IAAI,EAAAC,MAClBD,EAAMlD,SAASnC,GACfqF,EAAMlD,SAnUuB,4BAoU7B,MAAMgD,EAASF,EAAQM,qBACvBJ,EAAOhD,SAASjC,GAChBmF,EAAMG,UAAUL,GAChB,MAAMM,EAAQR,EAAQS,YAAY,CAC9BC,cAAenF,EAAIG,OACnBwE,OAAQD,EACRE,WACArC,WAEJ0C,EAAMtD,SAASlC,GACfoF,EAAMG,UAAUC,GAEZnU,KAAKmP,MAAM/N,QAAUpB,KAAKkR,mBAC1BlR,KAAKkR,iBAAmBlR,KAAKmP,MAAM/N,QAEvCpB,KAAK8Q,OAAOoD,UAAUH,GAKjBI,EAAMrT,MAAMwT,MAAKxT,IAEdd,KAAKmP,MAAM/N,QAAUpB,KAAKkR,mBAC1BlR,KAAKkR,iBAAmBlR,KAAKmP,MAAM/N,OAAS,GAGhDpB,KAAKmP,MAAMnN,IAAI,CACX4N,YAAa,SACbpN,KAAM,QACNI,KAAM9B,EAAQ,OAElBiT,EAAMtS,SAAS,GAEvB,CAIAwR,WAAWpR,EAAOsN,GACd,GAAItN,GAAS7B,KAAKiR,kBACd,OAEJ,MAAM8C,EAAQ/T,KAAK8Q,OAAOU,QAAQ3P,GAC5B0S,EAAYR,EAAMvC,QAClBuC,EAAMvC,QAAQ,GACduC,EAIAS,EAAWxU,KAAKgR,WAAWyD,kBAAkBtF,EAAMgB,KAAMhB,EAAM5O,QAAU,MAAQ,UACnFgU,EAASG,aACT,EAAQC,yBAAyBpT,IAAIgT,KAAcC,GACnD3F,EAAW+F,WAAWJ,EAAUrF,EAAMoB,YAClCgE,aAAoB,EAAQM,iBAC3BN,EAASG,YAAYvF,IAG1BnP,KAAK8Q,OAAOU,QAAQ3P,GAAOJ,UAC3BzB,KAAKqR,cAAcxP,EAAOsN,GAElC,CAOAkC,cAAcxP,EAAOsN,GACjB,GAAItN,EAAQ7B,KAAKiR,kBACb,OAEJ,MAAMH,EAAS9Q,KAAK8Q,OACpB,GAAIjP,IAAU7B,KAAKiR,kBAAmB,CAClC,MAAM6D,EAAU,IAAI,EAAQC,eAAe/U,KAAKiR,mBAAmB,KAC/D,MAAMoB,EAAYrS,KAAKiR,kBACvBjR,KAAKiR,kBAAoBE,IACzBnR,KAAKsS,oBAAoBD,EAAU,IAEvCvB,EAAOkE,aAAanT,EAAO7B,KAAKiV,eAAeH,GACnD,KACK,CACD,IAAI7S,EAASjC,KAAKkV,iBAAiB/F,GAC/BlN,EACAA,EAAOkT,YA1ZD,8BA0ZqD,OAAzBhG,EAAMiG,gBAGxCnT,EAAS,IAAI,EAAA6M,OAEZ9O,KAAKyQ,eAAepL,IAAIpD,IACpBjC,KAAKyQ,eAAezO,IAAIC,GAEjC6O,EAAOkE,aAAanT,EAAOI,EAC/B,CACJ,CAIIoT,oBACA,OAAOrV,KAAKyQ,cAChB,CAOA6B,oBAAoBD,GAEhBrS,KAAKwR,QAAQa,GAAW5Q,UACxB,IAAK,IAAI6T,EAAMjD,EAAWiD,EAAMtV,KAAKmP,MAAM/N,OAAQkU,IAC/CtV,KAAKqR,cAAciE,EAAKtV,KAAKmP,MAAM5N,IAAI+T,IAE3CtV,KAAKgP,oBAAoB7L,KAAK8C,KAAKmL,IAAIpR,KAAKmP,MAAM/N,OAAQpB,KAAKiR,mBACnE,CAOAiE,iBAAiB/F,GACb,MAAMlN,EAASjC,KAAKuV,uBAAuBpG,GAC3C,OAAKlN,EAGEjC,KAAKiV,eAAehT,EAAQkN,EAAMiG,gBAF9B,IAGf,CAIAG,uBAAuBpG,GACnB,MAAMqF,EAAWxU,KAAKgR,WAAWyD,kBAAkBtF,EAAMgB,KAAMhB,EAAM5O,QAAU,MAAQ,UACvF,IAAKiU,EACD,OAAO,KAEX,IAAIvS,EAASjC,KAAKgR,WAAWwE,eAAehB,GAe5C,OAbiB,IADA3F,EAAW+F,WAAWJ,EAAUrF,EAAMoB,YAEnDtO,EAAS,IAAI,EAAQ4S,iBAAiB5S,IAE1C,EAAQ0S,yBAAyBhT,IAAIM,EAAQuS,GAC7CvS,EAAOyS,YAAYvF,GAAOsG,OAAMC,IAE5B,MAAMC,EAAM7P,SAAS8P,cAAc,OACnCD,EAAIE,YAAc,qBAAqBH,EAAMI,UAC7C7T,EAAOqR,KAAKyC,YAAYJ,GAExB1T,EAAOqR,KAAK0C,UAAY,4BACxB/T,EAAOqR,KAAK2C,aAAa,iBAAkB,iCAAiC,IAEzEhU,CACX,CAQAgT,eAAehT,EAAQmT,EAAiB,MACpC,MAAMrB,EAAQ,IAAI,EAAQmC,YAC1BnC,EAAMlD,SAASnC,GACf,MAAMmF,EAAS7T,KAAKQ,eAAeyT,qBAMnC,OALAJ,EAAOuB,eAAiBA,EACxBvB,EAAOhD,SAASjC,GAChBmF,EAAMG,UAAUL,GAChB5R,EAAO4O,SAASlC,GAChBoF,EAAMG,UAAUjS,GACT8R,CACX,EAEG,MAAMoC,UAA6BtH,EAItCoD,eAAe/C,EAAKuC,GAEpB,CAIAyD,iBAAiB/F,GACb,MAAMlN,EAASjC,KAAKuV,uBAAuBpG,GAI3C,OAHIlN,GACAA,EAAO4O,SAASlC,GAEb1M,CACX,GAKJ,SAAW4M,GAyBPA,EAAWuH,QArBXC,eAAuBC,EAAMrU,EAAQsU,EAAgBhG,GACjD,IAAI7K,EAEJ,IAAI8Q,GAAc,EACdjG,GACAjN,MAAMC,QAAQgN,EAASkG,QACwB,IAA/ClG,EAASkG,KAAKxO,QAAQ,sBACtBuO,GAAc,GAElB,MAAMhH,EAAU,CACZ8G,OACAI,cAAeF,GAEbG,EAA2C,QAAjCjR,EAAK6Q,EAAeK,eAA4B,IAAPlR,OAAgB,EAASA,EAAGiR,OACrF,IAAKA,EACD,MAAM,IAAIhF,MAAM,0BAEpB,MAAMF,EAASkF,EAAOE,eAAerH,GAAS,EAAOe,GAErD,OADAtO,EAAOwP,OAASA,EACTA,EAAOqF,IAClB,EAaAjI,EAAW+F,WAXX,SAAoBJ,EAAUjE,GAC1B,MAAMwG,EAASxG,EAASiE,GAExB,OAAIuC,QAAiCC,IAAvBD,EAAiB,WAClBA,EAAiB,WAIjBxG,EAAmB,QAEpC,EAKA,MAAMnN,EAIF6Q,qBACI,OAAO,IAAIgD,CACf,CAIA7C,YAAYrU,GACR,OAAO,IAAImX,EAAMnX,EACrB,EAEJ8O,EAAWzL,eAAiBA,EAI5ByL,EAAWpO,sBAAwB,IAAI2C,CAC1C,CA5DD,CA4DGyL,IAAeA,EAAa,CAAC,IAIzB,MAAMoI,UAAqB,EAAAnI,OAI9BhP,cACIiP,QACA/O,KAAKmX,gBAAkB,KACvBnX,KAAK6Q,SAllBe,kBAmlBxB,CAIIuE,qBACA,OAAOpV,KAAKmX,eAChB,CACI/B,mBAAetU,GACfd,KAAKmX,gBAAkBrW,EAEnBd,KAAKsT,KAAKuC,YADA,OAAV/U,EACwB,GAGA,IAAIA,KAEpC,EAKG,MAAMoW,UAAc,EAAApI,OAIvBhP,YAAYC,GACRgP,MAAM,CACFuE,KAAM,EAAQ8D,sBAAsBrX,EAAQ8T,OAAQ9T,EAAQ+T,YAEhE9T,KAAKqX,SAAW,IAAI,EAAAC,gBACpBtX,KAAK6Q,SApmBO,YAqmBZ7Q,KAAKuX,YAAc,EACnBvX,KAAKwX,OAASxX,KAAKsT,KAAKmE,qBAAqB,SAAS,GACtDzX,KAAKwX,OAAOE,QAEZ1X,KAAKwX,OAAOG,YAAc,iBAC1B3X,KAAK0R,QAAU3R,EAAQ0R,OACvBzR,KAAK4X,cAAgB7X,EAAQsU,cAC7BrU,KAAK6X,OAAS9X,EAAQ8T,OAAS,IAC/B7T,KAAK8X,UAAY/X,EAAQ+T,QAC7B,CACAiE,kBAAkBC,GACd,MAAMC,EAAMf,EAAMgB,SAAS9W,OAG3B,IADA4W,EAAKA,EAAK,EAAIC,EAAMD,EAAKA,GAChBC,EACL,OAAOf,EAAMgB,SAASF,EAG9B,CACAD,oBAAoBI,GAChBjB,EAAMgB,SAASpV,KAAKqV,GAChBjB,EAAMgB,SAAS9W,OAAS,KAExB8V,EAAMgB,SAASE,OAEvB,CAIItX,YACA,OAAOd,KAAKqX,SAASgB,QAAQ/D,MAAK,IAAMtU,KAAK6X,QACjD,CAWAS,YAAYC,GACR,MAAMpE,EAAQnU,KAAKwX,OACnB,GAAmB,YAAfe,EAAMhG,KACN,GAAkB,YAAdgG,EAAMhU,IAAmB,CACzB,MAAMiU,EAActB,EAAMuB,WAAWzY,KAAKuX,YAAc,GACpDiB,IACyB,IAArBxY,KAAKuX,cACLvX,KAAK0Y,aAAevE,EAAMrT,OAE9BqT,EAAMrT,MAAQ0X,IACZxY,KAAKuX,YAEf,MACK,GAAkB,cAAdgB,EAAMhU,IACX,GAAyB,IAArBvE,KAAKuX,kBAGJ,IAA0B,IAAtBvX,KAAKuX,YACVpD,EAAMrT,MAAQd,KAAK0Y,eACjB1Y,KAAKuX,gBAEN,CACD,MAAMiB,EAActB,EAAMuB,WAAWzY,KAAKuX,YAAc,GACpDiB,IACArE,EAAMrT,MAAQ0X,IACZxY,KAAKuX,YAEf,KAEmB,UAAdgB,EAAMhU,MACXvE,KAAK0R,QAAQiH,eAAe,CACxB5I,OAAQ,KACRjP,MAAOqT,EAAMrT,OACdd,KAAK4X,eACJ5X,KAAK8X,UACL9X,KAAK6X,QAAU,YAGf7X,KAAK6X,QAAU1D,EAAMrT,MACrBoW,EAAM0B,aAAazE,EAAMrT,QAE7Bd,KAAKqX,SAASwB,aAAQ,GAGlC,CAIAC,cAAc5J,GACVlP,KAAKwX,OAAO5O,iBAAiB,UAAW5I,MACxCA,KAAK+Y,QACT,CAIAC,gBAAgB9J,GACZlP,KAAKwX,OAAOE,OAChB,CAIAuB,eAAe/J,GACXlP,KAAKwX,OAAOtO,oBAAoB,UAAWlJ,KAC/C,EASJ,IAAI,EAPJkX,EAAMgB,SAAW,GAQjB,SAAWtY,GAkBPA,EAAQwX,sBAdR,SAA+BvD,EAAQC,GACnC,MAAMR,EAAOxN,SAAS8P,cAAc,OAC9BsD,EAAapT,SAAS8P,cAAc,OAC1CsD,EAAWlD,UA3tBQ,kBA4tBnBkD,EAAWrD,YAAchC,EACzB,MAAMM,EAAQrO,SAAS8P,cAAc,SAOrC,OANAzB,EAAM6B,UA1tBY,iBA2tBdlC,IACAK,EAAM5B,KAAO,YAEjBe,EAAKyC,YAAYmD,GACjBA,EAAWnD,YAAY5B,GAChBb,CACX,EAKA,MAAMuB,UAAyB,EAAA/F,OAI3BhP,YAAYqZ,GACRpK,MAAM,CAAEuE,KAAMxN,SAAS8P,cAAc,YACrC5V,KAAK6Q,SAAS,mBACd7Q,KAAKoZ,SAAWD,EAEhB,MAAME,EAASrZ,KAAKsT,KACpB+F,EAAOC,YAAc,IACrBD,EAAOE,UAAY,OACnBF,EAAOzQ,iBAAiB,QAAQ,KAI5ByQ,EAAOG,gBAAgBC,OAIvBJ,EAAOG,gBAAgBE,MAAM1Z,KAAKoZ,SAAS9F,KAAKqG,WAChDN,EAAOG,gBAAgBI,QACvB,MAAMC,EAAOR,EAAOG,gBAAgBK,KAEpCR,EAAO7F,MAAMtI,OAAS,GAAG2O,EAAKC,iBAC9BT,EAAOU,qBAAuB,IAAI,GAAe,KAC7CV,EAAO7F,MAAMtI,OAAS,GAAG2O,EAAKC,gBAAgB,IAElDT,EAAOU,qBAAqBlR,QAAQgR,EAAK,GAEjD,CAYAnF,YAAYvF,GACR,OAAOnP,KAAKoZ,SAAS1E,YAAYvF,EACrC,EAEJvP,EAAQiV,iBAAmBA,EAC3BjV,EAAQ+U,yBAA2B,IAAI,EAAAqF,iBAAiB,CACpDxX,KAAM,oBACN8K,OAAQ2M,GAAS,KAKrB,MAAM/D,UAAoB,EAAAlC,MAItBlU,YAAYC,GACRgP,MAAMhP,EACV,CAIAma,WAAWC,GACPna,KAAKsT,KAAKoE,OACd,CAIAoB,cAAc5J,GACVH,MAAM+J,cAAc5J,GACpBlP,KAAKsT,KAAK1K,iBAAiB,cAAe5I,KAAKka,WAAW5T,KAAKtG,MACnE,CAIAiZ,eAAe/J,GACXH,MAAMqL,cAAclL,GACpBlP,KAAKsT,KAAKpK,oBAAoB,cAAelJ,KAAKka,WAAW5T,KAAKtG,MACtE,EAEJJ,EAAQsW,YAAcA,EAItB,MAAMnB,UAAuB,EAAAjG,OAUzBhP,YAAYoR,EAAkBmJ,GAC1B,MAAM/G,EAAOxN,SAAS8P,cAAc,OACpCtC,EAAKgH,mBAAmB,aAAc,+HAEZpJ,8GAG1BnC,MAAM,CACFuE,SAEJtT,KAAKua,SAAWF,EAChBra,KAAK6Q,SAAS,qBACd7Q,KAAK6Q,SAAS,wBAClB,CAWAyH,YAAYC,GACW,UAAfA,EAAMhG,MACNvS,KAAKua,SAAShC,EAEtB,CAIAO,cAAc5J,GACVH,MAAM+J,cAAc5J,GACpBlP,KAAKsT,KAAK1K,iBAAiB,QAAS5I,KACxC,CAKAiZ,eAAe/J,GACXH,MAAMkK,eAAe/J,GACrBlP,KAAKsT,KAAKpK,oBAAoB,QAASlJ,KAC3C,EAEJJ,EAAQmV,eAAiBA,CAC5B,CApKD,CAoKG,IAAY,EAAU,CAAC,G","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/outputarea/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/outputarea/lib/widget.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as nbformat from '@jupyterlab/nbformat';\nimport { ObservableList } from '@jupyterlab/observables';\nimport { OutputModel } from '@jupyterlab/rendermime';\nimport { each, map, toArray } from '@lumino/algorithm';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default implementation of the IOutputAreaModel.\n */\nexport class OutputAreaModel {\n    /**\n     * Construct a new observable outputs instance.\n     */\n    constructor(options = {}) {\n        /**\n         * A flag that is set when we want to clear the output area\n         * *after* the next addition to it.\n         */\n        this.clearNext = false;\n        this._trusted = false;\n        this._isDisposed = false;\n        this._stateChanged = new Signal(this);\n        this._changed = new Signal(this);\n        this._trusted = !!options.trusted;\n        this.contentFactory =\n            options.contentFactory || OutputAreaModel.defaultContentFactory;\n        this.list = new ObservableList();\n        if (options.values) {\n            each(options.values, value => {\n                this._add(value);\n            });\n        }\n        this.list.changed.connect(this._onListChanged, this);\n    }\n    /**\n     * A signal emitted when the model state changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * A signal emitted when the model changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the length of the items in the model.\n     */\n    get length() {\n        return this.list ? this.list.length : 0;\n    }\n    /**\n     * Get whether the model is trusted.\n     */\n    get trusted() {\n        return this._trusted;\n    }\n    /**\n     * Set whether the model is trusted.\n     *\n     * #### Notes\n     * Changing the value will cause all of the models to re-set.\n     */\n    set trusted(value) {\n        if (value === this._trusted) {\n            return;\n        }\n        const trusted = (this._trusted = value);\n        for (let i = 0; i < this.list.length; i++) {\n            let item = this.list.get(i);\n            const value = item.toJSON();\n            item.dispose();\n            item = this._createItem({ value, trusted });\n            this.list.set(i, item);\n        }\n    }\n    /**\n     * Test whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this.list.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * Get an item at the specified index.\n     */\n    get(index) {\n        return this.list.get(index);\n    }\n    /**\n     * Set the value at the specified index.\n     */\n    set(index, value) {\n        value = JSONExt.deepCopy(value);\n        // Normalize stream data.\n        Private.normalize(value);\n        const item = this._createItem({ value, trusted: this._trusted });\n        this.list.set(index, item);\n    }\n    /**\n     * Add an output, which may be combined with previous output.\n     *\n     * @returns The total number of outputs.\n     *\n     * #### Notes\n     * The output bundle is copied.\n     * Contiguous stream outputs of the same `name` are combined.\n     */\n    add(output) {\n        // If we received a delayed clear message, then clear now.\n        if (this.clearNext) {\n            this.clear();\n            this.clearNext = false;\n        }\n        return this._add(output);\n    }\n    /**\n     * Clear all of the output.\n     *\n     * @param wait Delay clearing the output until the next message is added.\n     */\n    clear(wait = false) {\n        this._lastStream = '';\n        if (wait) {\n            this.clearNext = true;\n            return;\n        }\n        each(this.list, (item) => {\n            item.dispose();\n        });\n        this.list.clear();\n    }\n    /**\n     * Deserialize the model from JSON.\n     *\n     * #### Notes\n     * This will clear any existing data.\n     */\n    fromJSON(values) {\n        this.clear();\n        each(values, value => {\n            this._add(value);\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return toArray(map(this.list, (output) => output.toJSON()));\n    }\n    /**\n     * Add a copy of the item to the list.\n     */\n    _add(value) {\n        const trusted = this._trusted;\n        value = JSONExt.deepCopy(value);\n        // Normalize the value.\n        Private.normalize(value);\n        // Consolidate outputs if they are stream outputs of the same kind.\n        if (nbformat.isStream(value) &&\n            this._lastStream &&\n            value.name === this._lastName &&\n            this.shouldCombine({\n                value,\n                lastModel: this.list.get(this.length - 1)\n            })) {\n            // In order to get a list change event, we add the previous\n            // text to the current item and replace the previous item.\n            // This also replaces the metadata of the last item.\n            this._lastStream += value.text;\n            this._lastStream = Private.removeOverwrittenChars(this._lastStream);\n            value.text = this._lastStream;\n            const item = this._createItem({ value, trusted });\n            const index = this.length - 1;\n            const prev = this.list.get(index);\n            prev.dispose();\n            this.list.set(index, item);\n            return index;\n        }\n        if (nbformat.isStream(value)) {\n            value.text = Private.removeOverwrittenChars(value.text);\n        }\n        // Create the new item.\n        const item = this._createItem({ value, trusted });\n        // Update the stream information.\n        if (nbformat.isStream(value)) {\n            this._lastStream = value.text;\n            this._lastName = value.name;\n        }\n        else {\n            this._lastStream = '';\n        }\n        // Add the item to our list and return the new length.\n        return this.list.push(item);\n    }\n    /**\n     * Whether a new value should be consolidated with the previous output.\n     *\n     * This will only be called if the minimal criteria of both being stream\n     * messages of the same type.\n     */\n    shouldCombine(options) {\n        return true;\n    }\n    /**\n     * Create an output item and hook up its signals.\n     */\n    _createItem(options) {\n        const factory = this.contentFactory;\n        const item = factory.createOutputModel(options);\n        item.changed.connect(this._onGenericChange, this);\n        return item;\n    }\n    /**\n     * Handle a change to the list.\n     */\n    _onListChanged(sender, args) {\n        this._changed.emit(args);\n    }\n    /**\n     * Handle a change to an item.\n     */\n    _onGenericChange() {\n        this._stateChanged.emit(void 0);\n    }\n}\n/**\n * The namespace for OutputAreaModel class statics.\n */\n(function (OutputAreaModel) {\n    /**\n     * The default implementation of a `IModelOutputFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an output model.\n         */\n        createOutputModel(options) {\n            return new OutputModel(options);\n        }\n    }\n    OutputAreaModel.ContentFactory = ContentFactory;\n    /**\n     * The default output model factory.\n     */\n    OutputAreaModel.defaultContentFactory = new ContentFactory();\n})(OutputAreaModel || (OutputAreaModel = {}));\n/**\n * A namespace for module-private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Normalize an output.\n     */\n    function normalize(value) {\n        if (nbformat.isStream(value)) {\n            if (Array.isArray(value.text)) {\n                value.text = value.text.join('\\n');\n            }\n        }\n    }\n    Private.normalize = normalize;\n    /**\n     * Remove characters that are overridden by backspace characters.\n     */\n    function fixBackspace(txt) {\n        let tmp = txt;\n        do {\n            txt = tmp;\n            // Cancel out anything-but-newline followed by backspace\n            tmp = txt.replace(/[^\\n]\\x08/gm, ''); // eslint-disable-line no-control-regex\n        } while (tmp.length < txt.length);\n        return txt;\n    }\n    /**\n     * Remove chunks that should be overridden by the effect of\n     * carriage return characters.\n     */\n    function fixCarriageReturn(txt) {\n        txt = txt.replace(/\\r+\\n/gm, '\\n'); // \\r followed by \\n --> newline\n        while (txt.search(/\\r[^$]/g) > -1) {\n            const base = txt.match(/^(.*)\\r+/m)[1];\n            let insert = txt.match(/\\r+(.*)$/m)[1];\n            insert = insert + base.slice(insert.length, base.length);\n            txt = txt.replace(/\\r+.*$/m, '\\r').replace(/^.*\\r/m, insert);\n        }\n        return txt;\n    }\n    /*\n     * Remove characters overridden by backspaces and carriage returns\n     */\n    function removeOverwrittenChars(text) {\n        return fixCarriageReturn(fixBackspace(text));\n    }\n    Private.removeOverwrittenChars = removeOverwrittenChars;\n})(Private || (Private = {}));\n//# sourceMappingURL=model.js.map","/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\r\n/* eslint-disable require-jsdoc, valid-jsdoc */\r\nvar MapShim = (function () {\r\n    if (typeof Map !== 'undefined') {\r\n        return Map;\r\n    }\r\n    /**\r\n     * Returns index in provided array that matches the specified key.\r\n     *\r\n     * @param {Array<Array>} arr\r\n     * @param {*} key\r\n     * @returns {number}\r\n     */\r\n    function getIndex(arr, key) {\r\n        var result = -1;\r\n        arr.some(function (entry, index) {\r\n            if (entry[0] === key) {\r\n                result = index;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        return result;\r\n    }\r\n    return /** @class */ (function () {\r\n        function class_1() {\r\n            this.__entries__ = [];\r\n        }\r\n        Object.defineProperty(class_1.prototype, \"size\", {\r\n            /**\r\n             * @returns {boolean}\r\n             */\r\n            get: function () {\r\n                return this.__entries__.length;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @param {*} key\r\n         * @returns {*}\r\n         */\r\n        class_1.prototype.get = function (key) {\r\n            var index = getIndex(this.__entries__, key);\r\n            var entry = this.__entries__[index];\r\n            return entry && entry[1];\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @param {*} value\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.set = function (key, value) {\r\n            var index = getIndex(this.__entries__, key);\r\n            if (~index) {\r\n                this.__entries__[index][1] = value;\r\n            }\r\n            else {\r\n                this.__entries__.push([key, value]);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.delete = function (key) {\r\n            var entries = this.__entries__;\r\n            var index = getIndex(entries, key);\r\n            if (~index) {\r\n                entries.splice(index, 1);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.has = function (key) {\r\n            return !!~getIndex(this.__entries__, key);\r\n        };\r\n        /**\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.clear = function () {\r\n            this.__entries__.splice(0);\r\n        };\r\n        /**\r\n         * @param {Function} callback\r\n         * @param {*} [ctx=null]\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.forEach = function (callback, ctx) {\r\n            if (ctx === void 0) { ctx = null; }\r\n            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\r\n                var entry = _a[_i];\r\n                callback.call(ctx, entry[1], entry[0]);\r\n            }\r\n        };\r\n        return class_1;\r\n    }());\r\n})();\n\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\r\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\n\n// Returns global object of a current environment.\r\nvar global$1 = (function () {\r\n    if (typeof global !== 'undefined' && global.Math === Math) {\r\n        return global;\r\n    }\r\n    if (typeof self !== 'undefined' && self.Math === Math) {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined' && window.Math === Math) {\r\n        return window;\r\n    }\r\n    // eslint-disable-next-line no-new-func\r\n    return Function('return this')();\r\n})();\n\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\r\nvar requestAnimationFrame$1 = (function () {\r\n    if (typeof requestAnimationFrame === 'function') {\r\n        // It's required to use a bounded function because IE sometimes throws\r\n        // an \"Invalid calling object\" error if rAF is invoked without the global\r\n        // object on the left hand side.\r\n        return requestAnimationFrame.bind(global$1);\r\n    }\r\n    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\r\n})();\n\n// Defines minimum timeout before adding a trailing call.\r\nvar trailingTimeout = 2;\r\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\r\nfunction throttle (callback, delay) {\r\n    var leadingCall = false, trailingCall = false, lastCallTime = 0;\r\n    /**\r\n     * Invokes the original callback function and schedules new invocation if\r\n     * the \"proxy\" was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function resolvePending() {\r\n        if (leadingCall) {\r\n            leadingCall = false;\r\n            callback();\r\n        }\r\n        if (trailingCall) {\r\n            proxy();\r\n        }\r\n    }\r\n    /**\r\n     * Callback invoked after the specified delay. It will further postpone\r\n     * invocation of the original function delegating it to the\r\n     * requestAnimationFrame.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function timeoutCallback() {\r\n        requestAnimationFrame$1(resolvePending);\r\n    }\r\n    /**\r\n     * Schedules invocation of the original function.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function proxy() {\r\n        var timeStamp = Date.now();\r\n        if (leadingCall) {\r\n            // Reject immediately following calls.\r\n            if (timeStamp - lastCallTime < trailingTimeout) {\r\n                return;\r\n            }\r\n            // Schedule new call to be in invoked when the pending one is resolved.\r\n            // This is important for \"transitions\" which never actually start\r\n            // immediately so there is a chance that we might miss one if change\r\n            // happens amids the pending invocation.\r\n            trailingCall = true;\r\n        }\r\n        else {\r\n            leadingCall = true;\r\n            trailingCall = false;\r\n            setTimeout(timeoutCallback, delay);\r\n        }\r\n        lastCallTime = timeStamp;\r\n    }\r\n    return proxy;\r\n}\n\n// Minimum delay before invoking the update of observers.\r\nvar REFRESH_DELAY = 20;\r\n// A list of substrings of CSS properties used to find transition events that\r\n// might affect dimensions of observed elements.\r\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\r\n// Check if MutationObserver is available.\r\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\r\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\r\nvar ResizeObserverController = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserverController.\r\n     *\r\n     * @private\r\n     */\r\n    function ResizeObserverController() {\r\n        /**\r\n         * Indicates whether DOM listeners have been added.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.connected_ = false;\r\n        /**\r\n         * Tells that controller has subscribed for Mutation Events.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.mutationEventsAdded_ = false;\r\n        /**\r\n         * Keeps reference to the instance of MutationObserver.\r\n         *\r\n         * @private {MutationObserver}\r\n         */\r\n        this.mutationsObserver_ = null;\r\n        /**\r\n         * A list of connected observers.\r\n         *\r\n         * @private {Array<ResizeObserverSPI>}\r\n         */\r\n        this.observers_ = [];\r\n        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\r\n        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\r\n    }\r\n    /**\r\n     * Adds observer to observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be added.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.addObserver = function (observer) {\r\n        if (!~this.observers_.indexOf(observer)) {\r\n            this.observers_.push(observer);\r\n        }\r\n        // Add listeners if they haven't been added yet.\r\n        if (!this.connected_) {\r\n            this.connect_();\r\n        }\r\n    };\r\n    /**\r\n     * Removes observer from observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.removeObserver = function (observer) {\r\n        var observers = this.observers_;\r\n        var index = observers.indexOf(observer);\r\n        // Remove observer if it's present in registry.\r\n        if (~index) {\r\n            observers.splice(index, 1);\r\n        }\r\n        // Remove listeners if controller has no connected observers.\r\n        if (!observers.length && this.connected_) {\r\n            this.disconnect_();\r\n        }\r\n    };\r\n    /**\r\n     * Invokes the update of observers. It will continue running updates insofar\r\n     * it detects changes.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.refresh = function () {\r\n        var changesDetected = this.updateObservers_();\r\n        // Continue running updates if changes have been detected as there might\r\n        // be future ones caused by CSS transitions.\r\n        if (changesDetected) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Updates every observer from observers list and notifies them of queued\r\n     * entries.\r\n     *\r\n     * @private\r\n     * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n     *      dimensions of it's elements.\r\n     */\r\n    ResizeObserverController.prototype.updateObservers_ = function () {\r\n        // Collect observers that have active observations.\r\n        var activeObservers = this.observers_.filter(function (observer) {\r\n            return observer.gatherActive(), observer.hasActive();\r\n        });\r\n        // Deliver notifications in a separate cycle in order to avoid any\r\n        // collisions between observers, e.g. when multiple instances of\r\n        // ResizeObserver are tracking the same element and the callback of one\r\n        // of them changes content dimensions of the observed target. Sometimes\r\n        // this may result in notifications being blocked for the rest of observers.\r\n        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\r\n        return activeObservers.length > 0;\r\n    };\r\n    /**\r\n     * Initializes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.connect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already added.\r\n        if (!isBrowser || this.connected_) {\r\n            return;\r\n        }\r\n        // Subscription to the \"Transitionend\" event is used as a workaround for\r\n        // delayed transitions. This way it's possible to capture at least the\r\n        // final state of an element.\r\n        document.addEventListener('transitionend', this.onTransitionEnd_);\r\n        window.addEventListener('resize', this.refresh);\r\n        if (mutationObserverSupported) {\r\n            this.mutationsObserver_ = new MutationObserver(this.refresh);\r\n            this.mutationsObserver_.observe(document, {\r\n                attributes: true,\r\n                childList: true,\r\n                characterData: true,\r\n                subtree: true\r\n            });\r\n        }\r\n        else {\r\n            document.addEventListener('DOMSubtreeModified', this.refresh);\r\n            this.mutationEventsAdded_ = true;\r\n        }\r\n        this.connected_ = true;\r\n    };\r\n    /**\r\n     * Removes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.disconnect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already removed.\r\n        if (!isBrowser || !this.connected_) {\r\n            return;\r\n        }\r\n        document.removeEventListener('transitionend', this.onTransitionEnd_);\r\n        window.removeEventListener('resize', this.refresh);\r\n        if (this.mutationsObserver_) {\r\n            this.mutationsObserver_.disconnect();\r\n        }\r\n        if (this.mutationEventsAdded_) {\r\n            document.removeEventListener('DOMSubtreeModified', this.refresh);\r\n        }\r\n        this.mutationsObserver_ = null;\r\n        this.mutationEventsAdded_ = false;\r\n        this.connected_ = false;\r\n    };\r\n    /**\r\n     * \"Transitionend\" event handler.\r\n     *\r\n     * @private\r\n     * @param {TransitionEvent} event\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\r\n        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;\r\n        // Detect whether transition may affect dimensions of an element.\r\n        var isReflowProperty = transitionKeys.some(function (key) {\r\n            return !!~propertyName.indexOf(key);\r\n        });\r\n        if (isReflowProperty) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Returns instance of the ResizeObserverController.\r\n     *\r\n     * @returns {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.getInstance = function () {\r\n        if (!this.instance_) {\r\n            this.instance_ = new ResizeObserverController();\r\n        }\r\n        return this.instance_;\r\n    };\r\n    /**\r\n     * Holds reference to the controller's instance.\r\n     *\r\n     * @private {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.instance_ = null;\r\n    return ResizeObserverController;\r\n}());\n\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\r\nvar defineConfigurable = (function (target, props) {\r\n    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        Object.defineProperty(target, key, {\r\n            value: props[key],\r\n            enumerable: false,\r\n            writable: false,\r\n            configurable: true\r\n        });\r\n    }\r\n    return target;\r\n});\n\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\r\nvar getWindowOf = (function (target) {\r\n    // Assume that the element is an instance of Node, which means that it\r\n    // has the \"ownerDocument\" property from which we can retrieve a\r\n    // corresponding global object.\r\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\r\n    // Return the local global object if it's not possible extract one from\r\n    // provided element.\r\n    return ownerGlobal || global$1;\r\n});\n\n// Placeholder of an empty content rectangle.\r\nvar emptyRect = createRectInit(0, 0, 0, 0);\r\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\r\nfunction toFloat(value) {\r\n    return parseFloat(value) || 0;\r\n}\r\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\r\nfunction getBordersSize(styles) {\r\n    var positions = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        positions[_i - 1] = arguments[_i];\r\n    }\r\n    return positions.reduce(function (size, position) {\r\n        var value = styles['border-' + position + '-width'];\r\n        return size + toFloat(value);\r\n    }, 0);\r\n}\r\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\r\nfunction getPaddings(styles) {\r\n    var positions = ['top', 'right', 'bottom', 'left'];\r\n    var paddings = {};\r\n    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\r\n        var position = positions_1[_i];\r\n        var value = styles['padding-' + position];\r\n        paddings[position] = toFloat(value);\r\n    }\r\n    return paddings;\r\n}\r\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getSVGContentRect(target) {\r\n    var bbox = target.getBBox();\r\n    return createRectInit(0, 0, bbox.width, bbox.height);\r\n}\r\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getHTMLElementContentRect(target) {\r\n    // Client width & height properties can't be\r\n    // used exclusively as they provide rounded values.\r\n    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;\r\n    // By this condition we can catch all non-replaced inline, hidden and\r\n    // detached elements. Though elements with width & height properties less\r\n    // than 0.5 will be discarded as well.\r\n    //\r\n    // Without it we would need to implement separate methods for each of\r\n    // those cases and it's not possible to perform a precise and performance\r\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\r\n    // gives wrong results for elements with width & height less than 0.5.\r\n    if (!clientWidth && !clientHeight) {\r\n        return emptyRect;\r\n    }\r\n    var styles = getWindowOf(target).getComputedStyle(target);\r\n    var paddings = getPaddings(styles);\r\n    var horizPad = paddings.left + paddings.right;\r\n    var vertPad = paddings.top + paddings.bottom;\r\n    // Computed styles of width & height are being used because they are the\r\n    // only dimensions available to JS that contain non-rounded values. It could\r\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\r\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\r\n    var width = toFloat(styles.width), height = toFloat(styles.height);\r\n    // Width & height include paddings and borders when the 'border-box' box\r\n    // model is applied (except for IE).\r\n    if (styles.boxSizing === 'border-box') {\r\n        // Following conditions are required to handle Internet Explorer which\r\n        // doesn't include paddings and borders to computed CSS dimensions.\r\n        //\r\n        // We can say that if CSS dimensions + paddings are equal to the \"client\"\r\n        // properties then it's either IE, and thus we don't need to subtract\r\n        // anything, or an element merely doesn't have paddings/borders styles.\r\n        if (Math.round(width + horizPad) !== clientWidth) {\r\n            width -= getBordersSize(styles, 'left', 'right') + horizPad;\r\n        }\r\n        if (Math.round(height + vertPad) !== clientHeight) {\r\n            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\r\n        }\r\n    }\r\n    // Following steps can't be applied to the document's root element as its\r\n    // client[Width/Height] properties represent viewport area of the window.\r\n    // Besides, it's as well not necessary as the <html> itself neither has\r\n    // rendered scroll bars nor it can be clipped.\r\n    if (!isDocumentElement(target)) {\r\n        // In some browsers (only in Firefox, actually) CSS width & height\r\n        // include scroll bars size which can be removed at this step as scroll\r\n        // bars are the only difference between rounded dimensions + paddings\r\n        // and \"client\" properties, though that is not always true in Chrome.\r\n        var vertScrollbar = Math.round(width + horizPad) - clientWidth;\r\n        var horizScrollbar = Math.round(height + vertPad) - clientHeight;\r\n        // Chrome has a rather weird rounding of \"client\" properties.\r\n        // E.g. for an element with content width of 314.2px it sometimes gives\r\n        // the client width of 315px and for the width of 314.7px it may give\r\n        // 314px. And it doesn't happen all the time. So just ignore this delta\r\n        // as a non-relevant.\r\n        if (Math.abs(vertScrollbar) !== 1) {\r\n            width -= vertScrollbar;\r\n        }\r\n        if (Math.abs(horizScrollbar) !== 1) {\r\n            height -= horizScrollbar;\r\n        }\r\n    }\r\n    return createRectInit(paddings.left, paddings.top, width, height);\r\n}\r\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nvar isSVGGraphicsElement = (function () {\r\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\r\n    // interface.\r\n    if (typeof SVGGraphicsElement !== 'undefined') {\r\n        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\r\n    }\r\n    // If it's so, then check that element is at least an instance of the\r\n    // SVGElement and that it has the \"getBBox\" method.\r\n    // eslint-disable-next-line no-extra-parens\r\n    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&\r\n        typeof target.getBBox === 'function'); };\r\n})();\r\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nfunction isDocumentElement(target) {\r\n    return target === getWindowOf(target).document.documentElement;\r\n}\r\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getContentRect(target) {\r\n    if (!isBrowser) {\r\n        return emptyRect;\r\n    }\r\n    if (isSVGGraphicsElement(target)) {\r\n        return getSVGContentRect(target);\r\n    }\r\n    return getHTMLElementContentRect(target);\r\n}\r\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\r\nfunction createReadOnlyRect(_a) {\r\n    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;\r\n    // If DOMRectReadOnly is available use it as a prototype for the rectangle.\r\n    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\r\n    var rect = Object.create(Constr.prototype);\r\n    // Rectangle's properties are not writable and non-enumerable.\r\n    defineConfigurable(rect, {\r\n        x: x, y: y, width: width, height: height,\r\n        top: y,\r\n        right: x + width,\r\n        bottom: height + y,\r\n        left: x\r\n    });\r\n    return rect;\r\n}\r\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction createRectInit(x, y, width, height) {\r\n    return { x: x, y: y, width: width, height: height };\r\n}\n\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\r\nvar ResizeObservation = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObservation.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     */\r\n    function ResizeObservation(target) {\r\n        /**\r\n         * Broadcasted width of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastWidth = 0;\r\n        /**\r\n         * Broadcasted height of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastHeight = 0;\r\n        /**\r\n         * Reference to the last observed content rectangle.\r\n         *\r\n         * @private {DOMRectInit}\r\n         */\r\n        this.contentRect_ = createRectInit(0, 0, 0, 0);\r\n        this.target = target;\r\n    }\r\n    /**\r\n     * Updates content rectangle and tells whether it's width or height properties\r\n     * have changed since the last broadcast.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObservation.prototype.isActive = function () {\r\n        var rect = getContentRect(this.target);\r\n        this.contentRect_ = rect;\r\n        return (rect.width !== this.broadcastWidth ||\r\n            rect.height !== this.broadcastHeight);\r\n    };\r\n    /**\r\n     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n     * from the corresponding properties of the last observed content rectangle.\r\n     *\r\n     * @returns {DOMRectInit} Last observed content rectangle.\r\n     */\r\n    ResizeObservation.prototype.broadcastRect = function () {\r\n        var rect = this.contentRect_;\r\n        this.broadcastWidth = rect.width;\r\n        this.broadcastHeight = rect.height;\r\n        return rect;\r\n    };\r\n    return ResizeObservation;\r\n}());\n\nvar ResizeObserverEntry = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObserverEntry.\r\n     *\r\n     * @param {Element} target - Element that is being observed.\r\n     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n     */\r\n    function ResizeObserverEntry(target, rectInit) {\r\n        var contentRect = createReadOnlyRect(rectInit);\r\n        // According to the specification following properties are not writable\r\n        // and are also not enumerable in the native implementation.\r\n        //\r\n        // Property accessors are not being used as they'd require to define a\r\n        // private WeakMap storage which may cause memory leaks in browsers that\r\n        // don't support this type of collections.\r\n        defineConfigurable(this, { target: target, contentRect: contentRect });\r\n    }\r\n    return ResizeObserverEntry;\r\n}());\n\nvar ResizeObserverSPI = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n     *      when one of the observed elements changes it's content dimensions.\r\n     * @param {ResizeObserverController} controller - Controller instance which\r\n     *      is responsible for the updates of observer.\r\n     * @param {ResizeObserver} callbackCtx - Reference to the public\r\n     *      ResizeObserver instance which will be passed to callback function.\r\n     */\r\n    function ResizeObserverSPI(callback, controller, callbackCtx) {\r\n        /**\r\n         * Collection of resize observations that have detected changes in dimensions\r\n         * of elements.\r\n         *\r\n         * @private {Array<ResizeObservation>}\r\n         */\r\n        this.activeObservations_ = [];\r\n        /**\r\n         * Registry of the ResizeObservation instances.\r\n         *\r\n         * @private {Map<Element, ResizeObservation>}\r\n         */\r\n        this.observations_ = new MapShim();\r\n        if (typeof callback !== 'function') {\r\n            throw new TypeError('The callback provided as parameter 1 is not a function.');\r\n        }\r\n        this.callback_ = callback;\r\n        this.controller_ = controller;\r\n        this.callbackCtx_ = callbackCtx;\r\n    }\r\n    /**\r\n     * Starts observing provided element.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.observe = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is already being observed.\r\n        if (observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.set(target, new ResizeObservation(target));\r\n        this.controller_.addObserver(this);\r\n        // Force the update of observations.\r\n        this.controller_.refresh();\r\n    };\r\n    /**\r\n     * Stops observing provided element.\r\n     *\r\n     * @param {Element} target - Element to stop observing.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.unobserve = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is not being observed.\r\n        if (!observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.delete(target);\r\n        if (!observations.size) {\r\n            this.controller_.removeObserver(this);\r\n        }\r\n    };\r\n    /**\r\n     * Stops observing all elements.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.disconnect = function () {\r\n        this.clearActive();\r\n        this.observations_.clear();\r\n        this.controller_.removeObserver(this);\r\n    };\r\n    /**\r\n     * Collects observation instances the associated element of which has changed\r\n     * it's content rectangle.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.gatherActive = function () {\r\n        var _this = this;\r\n        this.clearActive();\r\n        this.observations_.forEach(function (observation) {\r\n            if (observation.isActive()) {\r\n                _this.activeObservations_.push(observation);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Invokes initial callback function with a list of ResizeObserverEntry\r\n     * instances collected from active resize observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.broadcastActive = function () {\r\n        // Do nothing if observer doesn't have active observations.\r\n        if (!this.hasActive()) {\r\n            return;\r\n        }\r\n        var ctx = this.callbackCtx_;\r\n        // Create ResizeObserverEntry instance for every active observation.\r\n        var entries = this.activeObservations_.map(function (observation) {\r\n            return new ResizeObserverEntry(observation.target, observation.broadcastRect());\r\n        });\r\n        this.callback_.call(ctx, entries, ctx);\r\n        this.clearActive();\r\n    };\r\n    /**\r\n     * Clears the collection of active observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.clearActive = function () {\r\n        this.activeObservations_.splice(0);\r\n    };\r\n    /**\r\n     * Tells whether observer has active observations.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObserverSPI.prototype.hasActive = function () {\r\n        return this.activeObservations_.length > 0;\r\n    };\r\n    return ResizeObserverSPI;\r\n}());\n\n// Registry of internal observers. If WeakMap is not available use current shim\r\n// for the Map collection as it has all required methods and because WeakMap\r\n// can't be fully polyfilled anyway.\r\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\r\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\r\nvar ResizeObserver = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n     *      dimensions of the observed elements change.\r\n     */\r\n    function ResizeObserver(callback) {\r\n        if (!(this instanceof ResizeObserver)) {\r\n            throw new TypeError('Cannot call a class as a function.');\r\n        }\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        var controller = ResizeObserverController.getInstance();\r\n        var observer = new ResizeObserverSPI(callback, controller, this);\r\n        observers.set(this, observer);\r\n    }\r\n    return ResizeObserver;\r\n}());\r\n// Expose public methods of ResizeObserver.\r\n[\r\n    'observe',\r\n    'unobserve',\r\n    'disconnect'\r\n].forEach(function (method) {\r\n    ResizeObserver.prototype[method] = function () {\r\n        var _a;\r\n        return (_a = observers.get(this))[method].apply(_a, arguments);\r\n    };\r\n});\n\nvar index = (function () {\r\n    // Export existing implementation if available.\r\n    if (typeof global$1.ResizeObserver !== 'undefined') {\r\n        return global$1.ResizeObserver;\r\n    }\r\n    return ResizeObserver;\r\n})();\n\nexport default index;\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { WidgetTracker } from '@jupyterlab/apputils';\nimport { KernelMessage } from '@jupyterlab/services';\nimport { PromiseDelegate, UUID } from '@lumino/coreutils';\nimport { AttachedProperty } from '@lumino/properties';\nimport { Signal } from '@lumino/signaling';\nimport { Panel, PanelLayout, Widget } from '@lumino/widgets';\nimport ResizeObserver from 'resize-observer-polyfill';\n/**\n * The class name added to an output area widget.\n */\nconst OUTPUT_AREA_CLASS = 'jp-OutputArea';\n/**\n * The class name added to the direction children of OutputArea\n */\nconst OUTPUT_AREA_ITEM_CLASS = 'jp-OutputArea-child';\n/**\n * The class name added to actual outputs\n */\nconst OUTPUT_AREA_OUTPUT_CLASS = 'jp-OutputArea-output';\n/**\n * The class name added to prompt children of OutputArea.\n */\nconst OUTPUT_AREA_PROMPT_CLASS = 'jp-OutputArea-prompt';\n/**\n * The class name added to OutputPrompt.\n */\nconst OUTPUT_PROMPT_CLASS = 'jp-OutputPrompt';\n/**\n * The class name added to an execution result.\n */\nconst EXECUTE_CLASS = 'jp-OutputArea-executeResult';\n/**\n * The class name added stdin items of OutputArea\n */\nconst OUTPUT_AREA_STDIN_ITEM_CLASS = 'jp-OutputArea-stdin-item';\n/**\n * The class name added to stdin widgets.\n */\nconst STDIN_CLASS = 'jp-Stdin';\n/**\n * The class name added to stdin data prompt nodes.\n */\nconst STDIN_PROMPT_CLASS = 'jp-Stdin-prompt';\n/**\n * The class name added to stdin data input nodes.\n */\nconst STDIN_INPUT_CLASS = 'jp-Stdin-input';\n/** ****************************************************************************\n * OutputArea\n ******************************************************************************/\n/**\n * An output area widget.\n *\n * #### Notes\n * The widget model must be set separately and can be changed\n * at any time.  Consumers of the widget must account for a\n * `null` model, and may want to listen to the `modelChanged`\n * signal.\n */\nexport class OutputArea extends Widget {\n    /**\n     * Construct an output area widget.\n     */\n    constructor(options) {\n        var _a;\n        super();\n        /**\n         * A public signal used to indicate the number of outputs has changed.\n         *\n         * #### Notes\n         * This is useful for parents who want to apply styling based on the number\n         * of outputs. Emits the current number of outputs.\n         */\n        this.outputLengthChanged = new Signal(this);\n        /**\n         * Handle an iopub message.\n         */\n        this._onIOPub = (msg) => {\n            const model = this.model;\n            const msgType = msg.header.msg_type;\n            let output;\n            const transient = (msg.content.transient || {});\n            const displayId = transient['display_id'];\n            let targets;\n            switch (msgType) {\n                case 'execute_result':\n                case 'display_data':\n                case 'stream':\n                case 'error':\n                    output = Object.assign(Object.assign({}, msg.content), { output_type: msgType });\n                    model.add(output);\n                    break;\n                case 'clear_output': {\n                    const wait = msg.content.wait;\n                    model.clear(wait);\n                    break;\n                }\n                case 'update_display_data':\n                    output = Object.assign(Object.assign({}, msg.content), { output_type: 'display_data' });\n                    targets = this._displayIdMap.get(displayId);\n                    if (targets) {\n                        for (const index of targets) {\n                            model.set(index, output);\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n            if (displayId && msgType === 'display_data') {\n                targets = this._displayIdMap.get(displayId) || [];\n                targets.push(model.length - 1);\n                this._displayIdMap.set(displayId, targets);\n            }\n        };\n        /**\n         * Handle an execute reply message.\n         */\n        this._onExecuteReply = (msg) => {\n            // API responses that contain a pager are special cased and their type\n            // is overridden from 'execute_reply' to 'display_data' in order to\n            // render output.\n            const model = this.model;\n            const content = msg.content;\n            if (content.status !== 'ok') {\n                return;\n            }\n            const payload = content && content.payload;\n            if (!payload || !payload.length) {\n                return;\n            }\n            const pages = payload.filter((i) => i.source === 'page');\n            if (!pages.length) {\n                return;\n            }\n            const page = JSON.parse(JSON.stringify(pages[0]));\n            const output = {\n                output_type: 'display_data',\n                data: page.data,\n                metadata: {}\n            };\n            model.add(output);\n        };\n        this._minHeightTimeout = null;\n        this._displayIdMap = new Map();\n        this._outputTracker = new WidgetTracker({\n            namespace: UUID.uuid4()\n        });\n        this.addClass(OUTPUT_AREA_CLASS);\n        this.contentFactory =\n            options.contentFactory || OutputArea.defaultContentFactory;\n        this.layout = new PanelLayout();\n        this.rendermime = options.rendermime;\n        this._maxNumberOutputs = (_a = options.maxNumberOutputs) !== null && _a !== void 0 ? _a : Infinity;\n        const model = (this.model = options.model);\n        for (let i = 0; i < Math.min(model.length, this._maxNumberOutputs + 1); i++) {\n            const output = model.get(i);\n            this._insertOutput(i, output);\n        }\n        model.changed.connect(this.onModelChanged, this);\n        model.stateChanged.connect(this.onStateChanged, this);\n    }\n    /**\n     * A read-only sequence of the children widgets in the output area.\n     */\n    get widgets() {\n        return this.layout.widgets;\n    }\n    /**\n     * The kernel future associated with the output area.\n     */\n    get future() {\n        return this._future;\n    }\n    set future(value) {\n        // Bail if the model is disposed.\n        if (this.model.isDisposed) {\n            throw Error('Model is disposed');\n        }\n        if (this._future === value) {\n            return;\n        }\n        if (this._future) {\n            this._future.dispose();\n        }\n        this._future = value;\n        this.model.clear();\n        // Make sure there were no input widgets.\n        if (this.widgets.length) {\n            this._clear();\n            this.outputLengthChanged.emit(this.model.length);\n        }\n        // Handle published messages.\n        value.onIOPub = this._onIOPub;\n        // Handle the execute reply.\n        value.onReply = this._onExecuteReply;\n        // Handle stdin.\n        value.onStdin = msg => {\n            if (KernelMessage.isInputRequestMsg(msg)) {\n                this.onInputRequest(msg, value);\n            }\n        };\n    }\n    /**\n     * The maximum number of output items to display on top and bottom of cell output.\n     *\n     * ### Notes\n     * It is set to Infinity if no trim is applied.\n     */\n    get maxNumberOutputs() {\n        return this._maxNumberOutputs;\n    }\n    set maxNumberOutputs(limit) {\n        if (limit <= 0) {\n            console.warn(`OutputArea.maxNumberOutputs must be strictly positive.`);\n            return;\n        }\n        const lastShown = this._maxNumberOutputs;\n        this._maxNumberOutputs = limit;\n        if (lastShown < limit) {\n            this._showTrimmedOutputs(lastShown);\n        }\n    }\n    /**\n     * Dispose of the resources used by the output area.\n     */\n    dispose() {\n        if (this._future) {\n            this._future.dispose();\n            this._future = null;\n        }\n        this._displayIdMap.clear();\n        this._outputTracker.dispose();\n        super.dispose();\n    }\n    /**\n     * Follow changes on the model state.\n     */\n    onModelChanged(sender, args) {\n        switch (args.type) {\n            case 'add':\n                this._insertOutput(args.newIndex, args.newValues[0]);\n                break;\n            case 'remove':\n                if (this.widgets.length) {\n                    // all items removed from model\n                    if (this.model.length === 0) {\n                        this._clear();\n                    }\n                    else {\n                        // range of items removed from model\n                        // remove widgets corresponding to removed model items\n                        const startIndex = args.oldIndex;\n                        for (let i = 0; i < args.oldValues.length && startIndex < this.widgets.length; ++i) {\n                            const widget = this.widgets[startIndex];\n                            widget.parent = null;\n                            widget.dispose();\n                        }\n                        // apply item offset to target model item indices in _displayIdMap\n                        this._moveDisplayIdIndices(startIndex, args.oldValues.length);\n                        // prevent jitter caused by immediate height change\n                        this._preventHeightChangeJitter();\n                    }\n                }\n                break;\n            case 'set':\n                this._setOutput(args.newIndex, args.newValues[0]);\n                break;\n            default:\n                break;\n        }\n        this.outputLengthChanged.emit(Math.min(this.model.length, this._maxNumberOutputs));\n    }\n    /**\n     * Update indices in _displayIdMap in response to element remove from model items\n     * *\n     * @param startIndex - The index of first element removed\n     *\n     * @param count - The number of elements removed from model items\n     *\n     */\n    _moveDisplayIdIndices(startIndex, count) {\n        this._displayIdMap.forEach((indices) => {\n            const rangeEnd = startIndex + count;\n            const numIndices = indices.length;\n            // reverse loop in order to prevent removing element affecting the index\n            for (let i = numIndices - 1; i >= 0; --i) {\n                const index = indices[i];\n                // remove model item indices in removed range\n                if (index >= startIndex && index < rangeEnd) {\n                    indices.splice(i, 1);\n                }\n                else if (index >= rangeEnd) {\n                    // move model item indices that were larger than range end\n                    indices[i] -= count;\n                }\n            }\n        });\n    }\n    /**\n     * Follow changes on the output model state.\n     */\n    onStateChanged(sender) {\n        const outputLength = Math.min(this.model.length, this._maxNumberOutputs);\n        for (let i = 0; i < outputLength; i++) {\n            this._setOutput(i, this.model.get(i));\n        }\n        this.outputLengthChanged.emit(outputLength);\n    }\n    /**\n     * Clear the widget inputs and outputs.\n     */\n    _clear() {\n        // Bail if there is no work to do.\n        if (!this.widgets.length) {\n            return;\n        }\n        // Remove all of our widgets.\n        const length = this.widgets.length;\n        for (let i = 0; i < length; i++) {\n            const widget = this.widgets[0];\n            widget.parent = null;\n            widget.dispose();\n        }\n        // Clear the display id map.\n        this._displayIdMap.clear();\n        // prevent jitter caused by immediate height change\n        this._preventHeightChangeJitter();\n    }\n    _preventHeightChangeJitter() {\n        // When an output area is cleared and then quickly replaced with new\n        // content (as happens with @interact in widgets, for example), the\n        // quickly changing height can make the page jitter.\n        // We introduce a small delay in the minimum height\n        // to prevent this jitter.\n        const rect = this.node.getBoundingClientRect();\n        this.node.style.minHeight = `${rect.height}px`;\n        if (this._minHeightTimeout) {\n            window.clearTimeout(this._minHeightTimeout);\n        }\n        this._minHeightTimeout = window.setTimeout(() => {\n            if (this.isDisposed) {\n                return;\n            }\n            this.node.style.minHeight = '';\n        }, 50);\n    }\n    /**\n     * Handle an input request from a kernel.\n     */\n    onInputRequest(msg, future) {\n        // Add an output widget to the end.\n        const factory = this.contentFactory;\n        const stdinPrompt = msg.content.prompt;\n        const password = msg.content.password;\n        const panel = new Panel();\n        panel.addClass(OUTPUT_AREA_ITEM_CLASS);\n        panel.addClass(OUTPUT_AREA_STDIN_ITEM_CLASS);\n        const prompt = factory.createOutputPrompt();\n        prompt.addClass(OUTPUT_AREA_PROMPT_CLASS);\n        panel.addWidget(prompt);\n        const input = factory.createStdin({\n            parent_header: msg.header,\n            prompt: stdinPrompt,\n            password,\n            future\n        });\n        input.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        panel.addWidget(input);\n        // Increase number of outputs to display the result up to the input request.\n        if (this.model.length >= this.maxNumberOutputs) {\n            this.maxNumberOutputs = this.model.length;\n        }\n        this.layout.addWidget(panel);\n        /**\n         * Wait for the stdin to complete, add it to the model (so it persists)\n         * and remove the stdin widget.\n         */\n        void input.value.then(value => {\n            // Increase number of outputs to display the result of stdin if needed.\n            if (this.model.length >= this.maxNumberOutputs) {\n                this.maxNumberOutputs = this.model.length + 1;\n            }\n            // Use stdin as the stream so it does not get combined with stdout.\n            this.model.add({\n                output_type: 'stream',\n                name: 'stdin',\n                text: value + '\\n'\n            });\n            panel.dispose();\n        });\n    }\n    /**\n     * Update an output in the layout in place.\n     */\n    _setOutput(index, model) {\n        if (index >= this._maxNumberOutputs) {\n            return;\n        }\n        const panel = this.layout.widgets[index];\n        const renderer = (panel.widgets\n            ? panel.widgets[1]\n            : panel);\n        // Check whether it is safe to reuse renderer:\n        // - Preferred mime type has not changed\n        // - Isolation has not changed\n        const mimeType = this.rendermime.preferredMimeType(model.data, model.trusted ? 'any' : 'ensure');\n        if (renderer.renderModel &&\n            Private.currentPreferredMimetype.get(renderer) === mimeType &&\n            OutputArea.isIsolated(mimeType, model.metadata) ===\n                renderer instanceof Private.IsolatedRenderer) {\n            void renderer.renderModel(model);\n        }\n        else {\n            this.layout.widgets[index].dispose();\n            this._insertOutput(index, model);\n        }\n    }\n    /**\n     * Render and insert a single output into the layout.\n     *\n     * @param index - The index of the output to be inserted.\n     * @param model - The model of the output to be inserted.\n     */\n    _insertOutput(index, model) {\n        if (index > this._maxNumberOutputs) {\n            return;\n        }\n        const layout = this.layout;\n        if (index === this._maxNumberOutputs) {\n            const warning = new Private.TrimmedOutputs(this._maxNumberOutputs, () => {\n                const lastShown = this._maxNumberOutputs;\n                this._maxNumberOutputs = Infinity;\n                this._showTrimmedOutputs(lastShown);\n            });\n            layout.insertWidget(index, this._wrappedOutput(warning));\n        }\n        else {\n            let output = this.createOutputItem(model);\n            if (output) {\n                output.toggleClass(EXECUTE_CLASS, model.executionCount !== null);\n            }\n            else {\n                output = new Widget();\n            }\n            if (!this._outputTracker.has(output)) {\n                void this._outputTracker.add(output);\n            }\n            layout.insertWidget(index, output);\n        }\n    }\n    /**\n     * A widget tracker for individual output widgets in the output area.\n     */\n    get outputTracker() {\n        return this._outputTracker;\n    }\n    /**\n     * Dispose information message and show output models from the given\n     * index to maxNumberOutputs\n     *\n     * @param lastShown Starting model index to insert.\n     */\n    _showTrimmedOutputs(lastShown) {\n        // Dispose information widget\n        this.widgets[lastShown].dispose();\n        for (let idx = lastShown; idx < this.model.length; idx++) {\n            this._insertOutput(idx, this.model.get(idx));\n        }\n        this.outputLengthChanged.emit(Math.min(this.model.length, this._maxNumberOutputs));\n    }\n    /**\n     * Create an output item with a prompt and actual output\n     *\n     * @returns a rendered widget, or null if we cannot render\n     * #### Notes\n     */\n    createOutputItem(model) {\n        const output = this.createRenderedMimetype(model);\n        if (!output) {\n            return null;\n        }\n        return this._wrappedOutput(output, model.executionCount);\n    }\n    /**\n     * Render a mimetype\n     */\n    createRenderedMimetype(model) {\n        const mimeType = this.rendermime.preferredMimeType(model.data, model.trusted ? 'any' : 'ensure');\n        if (!mimeType) {\n            return null;\n        }\n        let output = this.rendermime.createRenderer(mimeType);\n        const isolated = OutputArea.isIsolated(mimeType, model.metadata);\n        if (isolated === true) {\n            output = new Private.IsolatedRenderer(output);\n        }\n        Private.currentPreferredMimetype.set(output, mimeType);\n        output.renderModel(model).catch(error => {\n            // Manually append error message to output\n            const pre = document.createElement('pre');\n            pre.textContent = `Javascript Error: ${error.message}`;\n            output.node.appendChild(pre);\n            // Remove mime-type-specific CSS classes\n            output.node.className = 'lm-Widget jp-RenderedText';\n            output.node.setAttribute('data-mime-type', 'application/vnd.jupyter.stderr');\n        });\n        return output;\n    }\n    /**\n     * Wrap a output widget within a output panel\n     *\n     * @param output Output widget to wrap\n     * @param executionCount Execution count\n     * @returns The output panel\n     */\n    _wrappedOutput(output, executionCount = null) {\n        const panel = new Private.OutputPanel();\n        panel.addClass(OUTPUT_AREA_ITEM_CLASS);\n        const prompt = this.contentFactory.createOutputPrompt();\n        prompt.executionCount = executionCount;\n        prompt.addClass(OUTPUT_AREA_PROMPT_CLASS);\n        panel.addWidget(prompt);\n        output.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        panel.addWidget(output);\n        return panel;\n    }\n}\nexport class SimplifiedOutputArea extends OutputArea {\n    /**\n     * Handle an input request from a kernel by doing nothing.\n     */\n    onInputRequest(msg, future) {\n        return;\n    }\n    /**\n     * Create an output item without a prompt, just the output widgets\n     */\n    createOutputItem(model) {\n        const output = this.createRenderedMimetype(model);\n        if (output) {\n            output.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        }\n        return output;\n    }\n}\n/**\n * A namespace for OutputArea statics.\n */\n(function (OutputArea) {\n    /**\n     * Execute code on an output area.\n     */\n    async function execute(code, output, sessionContext, metadata) {\n        var _a;\n        // Override the default for `stop_on_error`.\n        let stopOnError = true;\n        if (metadata &&\n            Array.isArray(metadata.tags) &&\n            metadata.tags.indexOf('raises-exception') !== -1) {\n            stopOnError = false;\n        }\n        const content = {\n            code,\n            stop_on_error: stopOnError\n        };\n        const kernel = (_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!kernel) {\n            throw new Error('Session has no kernel.');\n        }\n        const future = kernel.requestExecute(content, false, metadata);\n        output.future = future;\n        return future.done;\n    }\n    OutputArea.execute = execute;\n    function isIsolated(mimeType, metadata) {\n        const mimeMd = metadata[mimeType];\n        // mime-specific higher priority\n        if (mimeMd && mimeMd['isolated'] !== undefined) {\n            return !!mimeMd['isolated'];\n        }\n        else {\n            // fallback on global\n            return !!metadata['isolated'];\n        }\n    }\n    OutputArea.isIsolated = isIsolated;\n    /**\n     * The default implementation of `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create the output prompt for the widget.\n         */\n        createOutputPrompt() {\n            return new OutputPrompt();\n        }\n        /**\n         * Create an stdin widget.\n         */\n        createStdin(options) {\n            return new Stdin(options);\n        }\n    }\n    OutputArea.ContentFactory = ContentFactory;\n    /**\n     * The default `ContentFactory` instance.\n     */\n    OutputArea.defaultContentFactory = new ContentFactory();\n})(OutputArea || (OutputArea = {}));\n/**\n * The default output prompt implementation\n */\nexport class OutputPrompt extends Widget {\n    /*\n     * Create an output prompt widget.\n     */\n    constructor() {\n        super();\n        this._executionCount = null;\n        this.addClass(OUTPUT_PROMPT_CLASS);\n    }\n    /**\n     * The execution count for the prompt.\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    set executionCount(value) {\n        this._executionCount = value;\n        if (value === null) {\n            this.node.textContent = '';\n        }\n        else {\n            this.node.textContent = `[${value}]:`;\n        }\n    }\n}\n/**\n * The default stdin widget.\n */\nexport class Stdin extends Widget {\n    /**\n     * Construct a new input widget.\n     */\n    constructor(options) {\n        super({\n            node: Private.createInputWidgetNode(options.prompt, options.password)\n        });\n        this._promise = new PromiseDelegate();\n        this.addClass(STDIN_CLASS);\n        this._history_ix = 0;\n        this._input = this.node.getElementsByTagName('input')[0];\n        this._input.focus();\n        // make users aware of the line history feature\n        this._input.placeholder = '↑↓ for history';\n        this._future = options.future;\n        this._parentHeader = options.parent_header;\n        this._value = options.prompt + ' ';\n        this._password = options.password;\n    }\n    static _historyAt(ix) {\n        const len = Stdin._history.length;\n        // interpret negative ix exactly like Array.at\n        ix = ix < 0 ? len + ix : ix;\n        if (ix < len) {\n            return Stdin._history[ix];\n        }\n        // return undefined if ix is out of bounds\n    }\n    static _historyPush(line) {\n        Stdin._history.push(line);\n        if (Stdin._history.length > 1000) {\n            // truncate line history if it's too long\n            Stdin._history.shift();\n        }\n    }\n    /**\n     * The value of the widget.\n     */\n    get value() {\n        return this._promise.promise.then(() => this._value);\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the dock panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        const input = this._input;\n        if (event.type === 'keydown') {\n            if (event.key === 'ArrowUp') {\n                const historyLine = Stdin._historyAt(this._history_ix - 1);\n                if (historyLine) {\n                    if (this._history_ix === 0) {\n                        this._value_cache = input.value;\n                    }\n                    input.value = historyLine;\n                    --this._history_ix;\n                }\n            }\n            else if (event.key === 'ArrowDown') {\n                if (this._history_ix === 0) {\n                    // do nothing\n                }\n                else if (this._history_ix === -1) {\n                    input.value = this._value_cache;\n                    ++this._history_ix;\n                }\n                else {\n                    const historyLine = Stdin._historyAt(this._history_ix + 1);\n                    if (historyLine) {\n                        input.value = historyLine;\n                        ++this._history_ix;\n                    }\n                }\n            }\n            else if (event.key === 'Enter') {\n                this._future.sendInputReply({\n                    status: 'ok',\n                    value: input.value\n                }, this._parentHeader);\n                if (this._password) {\n                    this._value += '········';\n                }\n                else {\n                    this._value += input.value;\n                    Stdin._historyPush(input.value);\n                }\n                this._promise.resolve(void 0);\n            }\n        }\n    }\n    /**\n     * Handle `after-attach` messages sent to the widget.\n     */\n    onAfterAttach(msg) {\n        this._input.addEventListener('keydown', this);\n        this.update();\n    }\n    /**\n     * Handle `update-request` messages sent to the widget.\n     */\n    onUpdateRequest(msg) {\n        this._input.focus();\n    }\n    /**\n     * Handle `before-detach` messages sent to the widget.\n     */\n    onBeforeDetach(msg) {\n        this._input.removeEventListener('keydown', this);\n    }\n}\nStdin._history = [];\n/** ****************************************************************************\n * Private namespace\n ******************************************************************************/\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the node for an InputWidget.\n     */\n    function createInputWidgetNode(prompt, password) {\n        const node = document.createElement('div');\n        const promptNode = document.createElement('pre');\n        promptNode.className = STDIN_PROMPT_CLASS;\n        promptNode.textContent = prompt;\n        const input = document.createElement('input');\n        input.className = STDIN_INPUT_CLASS;\n        if (password) {\n            input.type = 'password';\n        }\n        node.appendChild(promptNode);\n        promptNode.appendChild(input);\n        return node;\n    }\n    Private.createInputWidgetNode = createInputWidgetNode;\n    /**\n     * A renderer for IFrame data.\n     */\n    class IsolatedRenderer extends Widget {\n        /**\n         * Create an isolated renderer.\n         */\n        constructor(wrapped) {\n            super({ node: document.createElement('iframe') });\n            this.addClass('jp-mod-isolated');\n            this._wrapped = wrapped;\n            // Once the iframe is loaded, the subarea is dynamically inserted\n            const iframe = this.node;\n            iframe.frameBorder = '0';\n            iframe.scrolling = 'auto';\n            iframe.addEventListener('load', () => {\n                // Workaround needed by Firefox, to properly render svg inside\n                // iframes, see https://stackoverflow.com/questions/10177190/\n                // svg-dynamically-added-to-iframe-does-not-render-correctly\n                iframe.contentDocument.open();\n                // Insert the subarea into the iframe\n                // We must directly write the html. At this point, subarea doesn't\n                // contain any user content.\n                iframe.contentDocument.write(this._wrapped.node.innerHTML);\n                iframe.contentDocument.close();\n                const body = iframe.contentDocument.body;\n                // Adjust the iframe height automatically\n                iframe.style.height = `${body.scrollHeight}px`;\n                iframe.heightChangeObserver = new ResizeObserver(() => {\n                    iframe.style.height = `${body.scrollHeight}px`;\n                });\n                iframe.heightChangeObserver.observe(body);\n            });\n        }\n        /**\n         * Render a mime model.\n         *\n         * @param model - The mime model to render.\n         *\n         * @returns A promise which resolves when rendering is complete.\n         *\n         * #### Notes\n         * This method may be called multiple times during the lifetime\n         * of the widget to update it if and when new data is available.\n         */\n        renderModel(model) {\n            return this._wrapped.renderModel(model);\n        }\n    }\n    Private.IsolatedRenderer = IsolatedRenderer;\n    Private.currentPreferredMimetype = new AttachedProperty({\n        name: 'preferredMimetype',\n        create: owner => ''\n    });\n    /**\n     * A `Panel` that's focused by a `contextmenu` event.\n     */\n    class OutputPanel extends Panel {\n        /**\n         * Construct a new `OutputPanel` widget.\n         */\n        constructor(options) {\n            super(options);\n        }\n        /**\n         * A callback that focuses on the widget.\n         */\n        _onContext(_) {\n            this.node.focus();\n        }\n        /**\n         * Handle `after-attach` messages sent to the widget.\n         */\n        onAfterAttach(msg) {\n            super.onAfterAttach(msg);\n            this.node.addEventListener('contextmenu', this._onContext.bind(this));\n        }\n        /**\n         * Handle `before-detach` messages sent to the widget.\n         */\n        onBeforeDetach(msg) {\n            super.onAfterDetach(msg);\n            this.node.removeEventListener('contextmenu', this._onContext.bind(this));\n        }\n    }\n    Private.OutputPanel = OutputPanel;\n    /**\n     * Trimmed outputs information widget.\n     */\n    class TrimmedOutputs extends Widget {\n        /**\n         * Widget constructor\n         *\n         * ### Notes\n         * The widget will be disposed on click after calling the callback.\n         *\n         * @param maxNumberOutputs Maximal number of outputs to display\n         * @param onClick Callback on click event on the widget\n         */\n        constructor(maxNumberOutputs, onClick) {\n            const node = document.createElement('div');\n            node.insertAdjacentHTML('afterbegin', `<a>\n          <pre>Output of this cell has been trimmed on the initial display.</pre>\n          <pre>Displaying the first ${maxNumberOutputs} top outputs.</pre>\n          <pre>Click on this message to get the complete output.</pre>\n        </a>`);\n            super({\n                node\n            });\n            this._onClick = onClick;\n            this.addClass('jp-TrimmedOutputs');\n            this.addClass('jp-RenderedHTMLCommon');\n        }\n        /**\n         * Handle the DOM events for widget.\n         *\n         * @param event - The DOM event sent to the widget.\n         *\n         * #### Notes\n         * This method implements the DOM `EventListener` interface and is\n         * called in response to events on the widget's DOM node. It should\n         * not be called directly by user code.\n         */\n        handleEvent(event) {\n            if (event.type === 'click') {\n                this._onClick(event);\n            }\n        }\n        /**\n         * Handle `after-attach` messages for the widget.\n         */\n        onAfterAttach(msg) {\n            super.onAfterAttach(msg);\n            this.node.addEventListener('click', this);\n        }\n        /**\n         * A message handler invoked on a `'before-detach'`\n         * message\n         */\n        onBeforeDetach(msg) {\n            super.onBeforeDetach(msg);\n            this.node.removeEventListener('click', this);\n        }\n    }\n    Private.TrimmedOutputs = TrimmedOutputs;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map"],"names":["Private","OutputAreaModel","constructor","options","this","clearNext","_trusted","_isDisposed","_stateChanged","Signal","_changed","trusted","contentFactory","defaultContentFactory","list","ObservableList","values","each","value","_add","changed","connect","_onListChanged","stateChanged","length","i","item","get","toJSON","dispose","_createItem","set","isDisposed","index","JSONExt","normalize","add","output","clear","wait","_lastStream","fromJSON","toArray","map","name","_lastName","shouldCombine","lastModel","text","removeOverwrittenChars","push","createOutputModel","_onGenericChange","sender","args","emit","ContentFactory","OutputModel","Array","isArray","join","txt","replace","search","base","match","insert","slice","fixCarriageReturn","tmp","fixBackspace","MapShim","Map","getIndex","arr","key","result","some","entry","class_1","__entries__","Object","defineProperty","prototype","enumerable","configurable","delete","entries","splice","has","forEach","callback","ctx","_i","_a","call","isBrowser","window","document","global$1","g","Math","self","Function","requestAnimationFrame$1","requestAnimationFrame","bind","setTimeout","Date","now","trailingTimeout","REFRESH_DELAY","transitionKeys","mutationObserverSupported","MutationObserver","ResizeObserverController","connected_","mutationEventsAdded_","mutationsObserver_","observers_","onTransitionEnd_","refresh","delay","leadingCall","trailingCall","lastCallTime","resolvePending","proxy","timeoutCallback","timeStamp","throttle","addObserver","observer","indexOf","connect_","removeObserver","observers","disconnect_","updateObservers_","activeObservers","filter","gatherActive","hasActive","broadcastActive","addEventListener","observe","attributes","childList","characterData","subtree","removeEventListener","disconnect","_b","propertyName","getInstance","instance_","defineConfigurable","target","props","keys","writable","getWindowOf","ownerDocument","defaultView","emptyRect","createRectInit","toFloat","parseFloat","getBordersSize","styles","positions","arguments","reduce","size","position","isSVGGraphicsElement","SVGGraphicsElement","SVGElement","getBBox","getContentRect","bbox","width","height","getSVGContentRect","clientWidth","clientHeight","getComputedStyle","paddings","positions_1","getPaddings","horizPad","left","right","vertPad","top","bottom","boxSizing","round","documentElement","isDocumentElement","vertScrollbar","horizScrollbar","abs","getHTMLElementContentRect","x","y","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","rect","broadcastRect","ResizeObserverEntry","rectInit","Constr","contentRect","DOMRectReadOnly","create","ResizeObserverSPI","controller","callbackCtx","activeObservations_","observations_","TypeError","callback_","controller_","callbackCtx_","Element","observations","unobserve","clearActive","_this","observation","WeakMap","ResizeObserver","method","apply","OUTPUT_AREA_ITEM_CLASS","OUTPUT_AREA_OUTPUT_CLASS","OUTPUT_AREA_PROMPT_CLASS","OutputArea","Widget","super","outputLengthChanged","_onIOPub","msg","model","msgType","header","msg_type","displayId","content","transient","targets","assign","output_type","_displayIdMap","_onExecuteReply","status","payload","pages","source","data","JSON","parse","stringify","metadata","_minHeightTimeout","_outputTracker","WidgetTracker","namespace","UUID","addClass","layout","PanelLayout","rendermime","_maxNumberOutputs","maxNumberOutputs","Infinity","min","_insertOutput","onModelChanged","onStateChanged","widgets","future","_future","Error","_clear","onIOPub","onReply","onStdin","KernelMessage","onInputRequest","limit","console","warn","lastShown","_showTrimmedOutputs","type","newIndex","newValues","startIndex","oldIndex","oldValues","widget","parent","_moveDisplayIdIndices","_preventHeightChangeJitter","_setOutput","count","indices","rangeEnd","outputLength","node","getBoundingClientRect","style","minHeight","clearTimeout","factory","stdinPrompt","prompt","password","panel","Panel","createOutputPrompt","addWidget","input","createStdin","parent_header","then","renderer","mimeType","preferredMimeType","renderModel","currentPreferredMimetype","isIsolated","IsolatedRenderer","warning","TrimmedOutputs","insertWidget","_wrappedOutput","createOutputItem","toggleClass","executionCount","outputTracker","idx","createRenderedMimetype","createRenderer","catch","error","pre","createElement","textContent","message","appendChild","className","setAttribute","OutputPanel","SimplifiedOutputArea","execute","async","code","sessionContext","stopOnError","tags","stop_on_error","kernel","session","requestExecute","done","mimeMd","undefined","OutputPrompt","Stdin","_executionCount","createInputWidgetNode","_promise","PromiseDelegate","_history_ix","_input","getElementsByTagName","focus","placeholder","_parentHeader","_value","_password","static","ix","len","_history","line","shift","promise","handleEvent","event","historyLine","_historyAt","_value_cache","sendInputReply","_historyPush","resolve","onAfterAttach","update","onUpdateRequest","onBeforeDetach","promptNode","wrapped","_wrapped","iframe","frameBorder","scrolling","contentDocument","open","write","innerHTML","close","body","scrollHeight","heightChangeObserver","AttachedProperty","owner","_onContext","_","onAfterDetach","onClick","insertAdjacentHTML","_onClick"],"sourceRoot":""}