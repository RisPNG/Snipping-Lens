{"version":3,"file":"1638.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/connectionlost.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/frontend.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/shell.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/status.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/lab.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/router.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/treepathupdater.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showErrorMessage } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * A default connection lost handler, which brings up an error dialog.\n */\nexport const ConnectionLost = async function (manager, err, translator) {\n    translator = translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const title = trans.__('Server Connection Error');\n    const networkMsg = trans.__('A connection to the Jupyter server could not be established.\\n' +\n        'JupyterLab will continue trying to reconnect.\\n' +\n        'Check your network connection or Jupyter server configuration.\\n');\n    return showErrorMessage(title, { message: networkMsg });\n};\n//# sourceMappingURL=connectionlost.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CommandLinker } from '@jupyterlab/apputils';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { ServiceManager } from '@jupyterlab/services';\nimport { ContextMenuSvg } from '@jupyterlab/ui-components';\nimport { Application } from '@lumino/application';\nimport { Token } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/**\n * The base Jupyter front-end application class.\n *\n * @typeparam `T` - The `shell` type. Defaults to `JupyterFrontEnd.IShell`.\n *\n * @typeparam `U` - The type for supported format names. Defaults to `string`.\n *\n * #### Notes\n * This type is useful as a generic application against which front-end plugins\n * can be authored. It inherits from the Lumino `Application`.\n */\nexport class JupyterFrontEnd extends Application {\n    /**\n     * Construct a new JupyterFrontEnd object.\n     */\n    constructor(options) {\n        super(options);\n        this._formatChanged = new Signal(this);\n        // render context menu/submenus with inline svg icon tweaks\n        this.contextMenu = new ContextMenuSvg({\n            commands: this.commands,\n            renderer: options.contextMenuRenderer,\n            groupByTarget: false,\n            sortBySelector: false\n        });\n        // The default restored promise if one does not exist in the options.\n        const restored = new Promise(resolve => {\n            requestAnimationFrame(() => {\n                resolve();\n            });\n        });\n        this.commandLinker =\n            options.commandLinker || new CommandLinker({ commands: this.commands });\n        this.docRegistry = options.docRegistry || new DocumentRegistry();\n        this.restored =\n            options.restored ||\n                this.started.then(() => restored).catch(() => restored);\n        this.serviceManager = options.serviceManager || new ServiceManager();\n    }\n    /**\n     * The application form factor, e.g., `desktop` or `mobile`.\n     */\n    get format() {\n        return this._format;\n    }\n    set format(format) {\n        if (this._format !== format) {\n            this._format = format;\n            document.body.dataset['format'] = format;\n            this._formatChanged.emit(format);\n        }\n    }\n    /**\n     * A signal that emits when the application form factor changes.\n     */\n    get formatChanged() {\n        return this._formatChanged;\n    }\n    /**\n     * Walks up the DOM hierarchy of the target of the active `contextmenu`\n     * event, testing each HTMLElement ancestor for a user-supplied function. This can\n     * be used to find an HTMLElement on which to operate, given a context menu click.\n     *\n     * @param fn - a function that takes an `HTMLElement` and returns a\n     *   boolean for whether it is the element the requester is seeking.\n     *\n     * @returns an HTMLElement or undefined, if none is found.\n     */\n    contextMenuHitTest(fn) {\n        if (!this._contextMenuEvent ||\n            !(this._contextMenuEvent.target instanceof Node)) {\n            return undefined;\n        }\n        let node = this._contextMenuEvent.target;\n        do {\n            if (node instanceof HTMLElement && fn(node)) {\n                return node;\n            }\n            node = node.parentNode;\n        } while (node && node.parentNode && node !== node.parentNode);\n        return undefined;\n        // TODO: we should be able to use .composedPath() to simplify this function\n        // down to something like the below, but it seems like composedPath is\n        // sometimes returning an empty list.\n        /*\n        if (this._contextMenuEvent) {\n          this._contextMenuEvent\n            .composedPath()\n            .filter(x => x instanceof HTMLElement)\n            .find(test);\n        }\n        return undefined;\n        */\n    }\n    /**\n     * A method invoked on a document `'contextmenu'` event.\n     */\n    evtContextMenu(event) {\n        this._contextMenuEvent = event;\n        if (event.shiftKey ||\n            Private.suppressContextMenu(event.target)) {\n            return;\n        }\n        const opened = this.contextMenu.open(event);\n        if (opened) {\n            const items = this.contextMenu.menu.items;\n            // If only the context menu information will be shown,\n            // with no real commands, close the context menu and\n            // allow the native one to open.\n            if (items.length === 1 &&\n                items[0].command === JupyterFrontEndContextMenu.contextMenu) {\n                this.contextMenu.menu.close();\n                return;\n            }\n            // Stop propagation and allow the application context menu to show.\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n}\n/**\n * The namespace for `JupyterFrontEnd` class statics.\n */\n(function (JupyterFrontEnd) {\n    /**\n     * Is JupyterLab in document mode?\n     *\n     * @param path - Full URL of JupyterLab\n     * @param paths - The current IPaths object hydrated from PageConfig.\n     */\n    function inDocMode(path, paths) {\n        const docPattern = new RegExp(`^${paths.urls.doc}`);\n        const match = path.match(docPattern);\n        if (match) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    JupyterFrontEnd.inDocMode = inDocMode;\n    /**\n     * The application paths dictionary token.\n     */\n    JupyterFrontEnd.IPaths = new Token('@jupyterlab/application:IPaths');\n    /**\n     * The application tree resolver token.\n     *\n     * #### Notes\n     * Not all Jupyter front-end applications will have a tree resolver\n     * implemented on the client-side. This token should not be required as a\n     * dependency if it is possible to make it an optional dependency.\n     */\n    JupyterFrontEnd.ITreeResolver = new Token('@jupyterlab/application:ITreeResolver');\n})(JupyterFrontEnd || (JupyterFrontEnd = {}));\n/**\n * A namespace for module-private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Returns whether the element is itself, or a child of, an element with the `jp-suppress-context-menu` data attribute.\n     */\n    function suppressContextMenu(element) {\n        return element.closest('[data-jp-suppress-context-menu]') !== null;\n    }\n    Private.suppressContextMenu = suppressContextMenu;\n})(Private || (Private = {}));\n/**\n * A namespace for the context menu override.\n */\nexport var JupyterFrontEndContextMenu;\n(function (JupyterFrontEndContextMenu) {\n    /**\n     * An id for a private context-menu-info ersatz command.\n     */\n    JupyterFrontEndContextMenu.contextMenu = '__internal:context-menu-info';\n})(JupyterFrontEndContextMenu || (JupyterFrontEndContextMenu = {}));\n//# sourceMappingURL=frontend.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { classes, DockPanelSvg, LabIcon, TabPanelSvg } from '@jupyterlab/ui-components';\nimport { ArrayExt, find, iter, toArray } from '@lumino/algorithm';\nimport { PromiseDelegate, Token } from '@lumino/coreutils';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Debouncer } from '@lumino/polling';\nimport { Signal } from '@lumino/signaling';\nimport { BoxLayout, BoxPanel, FocusTracker, Panel, SplitPanel, StackedPanel, TabBar, Widget } from '@lumino/widgets';\n/**\n * The class name added to AppShell instances.\n */\nconst APPLICATION_SHELL_CLASS = 'jp-LabShell';\n/**\n * The class name added to side bar instances.\n */\nconst SIDEBAR_CLASS = 'jp-SideBar';\n/**\n * The class name added to the current widget's title.\n */\nconst CURRENT_CLASS = 'jp-mod-current';\n/**\n * The class name added to the active widget's title.\n */\nconst ACTIVE_CLASS = 'jp-mod-active';\n/**\n * The default rank of items added to a sidebar.\n */\nconst DEFAULT_RANK = 900;\nconst ACTIVITY_CLASS = 'jp-Activity';\n/**\n * The JupyterLab application shell token.\n */\nexport const ILabShell = new Token('@jupyterlab/application:ILabShell');\n/**\n * The application shell for JupyterLab.\n */\nexport class LabShell extends Widget {\n    /**\n     * Construct a new application shell.\n     */\n    constructor(options) {\n        super();\n        /**\n         * A message hook for child add/remove messages on the main area dock panel.\n         */\n        this._dockChildHook = (handler, msg) => {\n            switch (msg.type) {\n                case 'child-added':\n                    msg.child.addClass(ACTIVITY_CLASS);\n                    this._tracker.add(msg.child);\n                    break;\n                case 'child-removed':\n                    msg.child.removeClass(ACTIVITY_CLASS);\n                    this._tracker.remove(msg.child);\n                    break;\n                default:\n                    break;\n            }\n            return true;\n        };\n        this._activeChanged = new Signal(this);\n        this._cachedLayout = null;\n        this._currentChanged = new Signal(this);\n        this._currentPath = '';\n        this._currentPathChanged = new Signal(this);\n        this._modeChanged = new Signal(this);\n        this._isRestored = false;\n        this._layoutModified = new Signal(this);\n        this._layoutDebouncer = new Debouncer(() => {\n            this._layoutModified.emit(undefined);\n        }, 0);\n        this._restored = new PromiseDelegate();\n        this._tracker = new FocusTracker();\n        this._mainOptionsCache = new Map();\n        this._sideOptionsCache = new Map();\n        this.addClass(APPLICATION_SHELL_CLASS);\n        this.id = 'main';\n        const trans = ((options && options.translator) || nullTranslator).load('jupyterlab');\n        const headerPanel = (this._headerPanel = new BoxPanel());\n        const menuHandler = (this._menuHandler = new Private.PanelHandler());\n        menuHandler.panel.node.setAttribute('role', 'navigation');\n        menuHandler.panel.node.setAttribute('aria-label', trans.__('main'));\n        const topHandler = (this._topHandler = new Private.PanelHandler());\n        topHandler.panel.node.setAttribute('role', 'banner');\n        const bottomPanel = (this._bottomPanel = new BoxPanel());\n        bottomPanel.node.setAttribute('role', 'contentinfo');\n        const hboxPanel = new BoxPanel();\n        const vsplitPanel = (this._vsplitPanel = new Private.RestorableSplitPanel());\n        const dockPanel = (this._dockPanel = new DockPanelSvg({\n            hiddenMode: Widget.HiddenMode.Display,\n            translator: options === null || options === void 0 ? void 0 : options.translator\n        }));\n        MessageLoop.installMessageHook(dockPanel, this._dockChildHook);\n        const hsplitPanel = (this._hsplitPanel = new Private.RestorableSplitPanel());\n        const downPanel = (this._downPanel = new TabPanelSvg({\n            tabsMovable: true\n        }));\n        const leftHandler = (this._leftHandler = new Private.SideBarHandler());\n        const rightHandler = (this._rightHandler = new Private.SideBarHandler());\n        const rootLayout = new BoxLayout();\n        headerPanel.id = 'jp-header-panel';\n        menuHandler.panel.id = 'jp-menu-panel';\n        topHandler.panel.id = 'jp-top-panel';\n        bottomPanel.id = 'jp-bottom-panel';\n        hboxPanel.id = 'jp-main-content-panel';\n        vsplitPanel.id = 'jp-main-vsplit-panel';\n        dockPanel.id = 'jp-main-dock-panel';\n        hsplitPanel.id = 'jp-main-split-panel';\n        downPanel.id = 'jp-down-stack';\n        leftHandler.sideBar.addClass(SIDEBAR_CLASS);\n        leftHandler.sideBar.addClass('jp-mod-left');\n        leftHandler.sideBar.node.setAttribute('aria-label', trans.__('main sidebar'));\n        leftHandler.sideBar.contentNode.setAttribute('aria-label', trans.__('main sidebar'));\n        leftHandler.sideBar.node.setAttribute('role', 'complementary');\n        leftHandler.stackedPanel.id = 'jp-left-stack';\n        rightHandler.sideBar.addClass(SIDEBAR_CLASS);\n        rightHandler.sideBar.addClass('jp-mod-right');\n        rightHandler.sideBar.node.setAttribute('aria-label', trans.__('alternate sidebar'));\n        rightHandler.sideBar.contentNode.setAttribute('aria-label', trans.__('alternate sidebar'));\n        rightHandler.sideBar.node.setAttribute('role', 'complementary');\n        rightHandler.stackedPanel.id = 'jp-right-stack';\n        dockPanel.node.setAttribute('role', 'main');\n        hboxPanel.spacing = 0;\n        vsplitPanel.spacing = 1;\n        dockPanel.spacing = 5;\n        hsplitPanel.spacing = 1;\n        headerPanel.direction = 'top-to-bottom';\n        vsplitPanel.orientation = 'vertical';\n        hboxPanel.direction = 'left-to-right';\n        hsplitPanel.orientation = 'horizontal';\n        bottomPanel.direction = 'bottom-to-top';\n        SplitPanel.setStretch(leftHandler.stackedPanel, 0);\n        SplitPanel.setStretch(downPanel, 0);\n        SplitPanel.setStretch(dockPanel, 1);\n        SplitPanel.setStretch(rightHandler.stackedPanel, 0);\n        BoxPanel.setStretch(leftHandler.sideBar, 0);\n        BoxPanel.setStretch(hsplitPanel, 1);\n        BoxPanel.setStretch(rightHandler.sideBar, 0);\n        SplitPanel.setStretch(vsplitPanel, 1);\n        hsplitPanel.addWidget(leftHandler.stackedPanel);\n        hsplitPanel.addWidget(dockPanel);\n        hsplitPanel.addWidget(rightHandler.stackedPanel);\n        vsplitPanel.addWidget(hsplitPanel);\n        vsplitPanel.addWidget(downPanel);\n        hboxPanel.addWidget(leftHandler.sideBar);\n        hboxPanel.addWidget(vsplitPanel);\n        hboxPanel.addWidget(rightHandler.sideBar);\n        rootLayout.direction = 'top-to-bottom';\n        rootLayout.spacing = 0; // TODO make this configurable?\n        // Use relative sizing to set the width of the side panels.\n        // This will still respect the min-size of children widget in the stacked\n        // panel. The default sizes will be overwritten during layout restoration.\n        vsplitPanel.setRelativeSizes([3, 1]);\n        hsplitPanel.setRelativeSizes([1, 2.5, 1]);\n        BoxLayout.setStretch(headerPanel, 0);\n        BoxLayout.setStretch(menuHandler.panel, 0);\n        BoxLayout.setStretch(topHandler.panel, 0);\n        BoxLayout.setStretch(hboxPanel, 1);\n        BoxLayout.setStretch(bottomPanel, 0);\n        rootLayout.addWidget(headerPanel);\n        rootLayout.addWidget(topHandler.panel);\n        rootLayout.addWidget(hboxPanel);\n        rootLayout.addWidget(bottomPanel);\n        // initially hiding header and bottom panel when no elements inside,\n        this._headerPanel.hide();\n        this._bottomPanel.hide();\n        this._downPanel.hide();\n        this.layout = rootLayout;\n        // Connect change listeners.\n        this._tracker.currentChanged.connect(this._onCurrentChanged, this);\n        this._tracker.activeChanged.connect(this._onActiveChanged, this);\n        // Connect main layout change listener.\n        this._dockPanel.layoutModified.connect(this._onLayoutModified, this);\n        // Connect vsplit layout change listener\n        this._vsplitPanel.updated.connect(this._onLayoutModified, this);\n        // Connect down panel change listeners\n        this._downPanel.currentChanged.connect(this._onLayoutModified, this);\n        this._downPanel.tabBar.tabMoved.connect(this._onTabPanelChanged, this);\n        this._downPanel.stackedPanel.widgetRemoved.connect(this._onTabPanelChanged, this);\n        // Catch current changed events on the side handlers.\n        this._leftHandler.sideBar.currentChanged.connect(this._onLayoutModified, this);\n        this._rightHandler.sideBar.currentChanged.connect(this._onLayoutModified, this);\n        // Catch update events on the horizontal split panel\n        this._hsplitPanel.updated.connect(this._onLayoutModified, this);\n        // Setup single-document-mode title bar\n        const titleHandler = (this._titleHandler = new Private.TitleHandler(this));\n        this.add(titleHandler, 'top', { rank: 100 });\n        if (this._dockPanel.mode === 'multiple-document') {\n            this._topHandler.addWidget(this._menuHandler.panel, 100);\n            titleHandler.hide();\n        }\n        else {\n            rootLayout.insertWidget(2, this._menuHandler.panel);\n        }\n        // Skip Links\n        const skipLinkWidget = (this._skipLinkWidget = new Private.SkipLinkWidget(this));\n        this.add(skipLinkWidget, 'top', { rank: 0 });\n        this._skipLinkWidget.show();\n        // Wire up signals to update the title panel of the simple interface mode to\n        // follow the title of this.currentWidget\n        this.currentChanged.connect((sender, args) => {\n            let newValue = args.newValue;\n            let oldValue = args.oldValue;\n            // Stop watching the title of the previously current widget\n            if (oldValue) {\n                oldValue.title.changed.disconnect(this._updateTitlePanelTitle, this);\n            }\n            // Start watching the title of the new current widget\n            if (newValue) {\n                newValue.title.changed.connect(this._updateTitlePanelTitle, this);\n                this._updateTitlePanelTitle();\n            }\n            if (newValue && newValue instanceof DocumentWidget) {\n                newValue.context.pathChanged.connect(this._updateCurrentPath, this);\n            }\n            this._updateCurrentPath();\n        });\n    }\n    /**\n     * A signal emitted when main area's active focus changes.\n     */\n    get activeChanged() {\n        return this._activeChanged;\n    }\n    /**\n     * The active widget in the shell's main area.\n     */\n    get activeWidget() {\n        return this._tracker.activeWidget;\n    }\n    /**\n     * A signal emitted when main area's current focus changes.\n     */\n    get currentChanged() {\n        return this._currentChanged;\n    }\n    /**\n     * A signal emitted when the shell/dock panel change modes (single/multiple document).\n     */\n    get modeChanged() {\n        return this._modeChanged;\n    }\n    /**\n     * A signal emitted when the path of the current document changes.\n     *\n     * This also fires when the current document itself changes.\n     */\n    get currentPathChanged() {\n        return this._currentPathChanged;\n    }\n    /**\n     * The current widget in the shell's main area.\n     */\n    get currentWidget() {\n        return this._tracker.currentWidget;\n    }\n    /**\n     * A signal emitted when the main area's layout is modified.\n     */\n    get layoutModified() {\n        return this._layoutModified;\n    }\n    /**\n     * Whether the left area is collapsed.\n     */\n    get leftCollapsed() {\n        return !this._leftHandler.sideBar.currentTitle;\n    }\n    /**\n     * Whether the left area is collapsed.\n     */\n    get rightCollapsed() {\n        return !this._rightHandler.sideBar.currentTitle;\n    }\n    /**\n     * Whether JupyterLab is in presentation mode with the\n     * `jp-mod-presentationMode` CSS class.\n     */\n    get presentationMode() {\n        return this.hasClass('jp-mod-presentationMode');\n    }\n    /**\n     * Enable/disable presentation mode (`jp-mod-presentationMode` CSS class) with\n     * a boolean.\n     */\n    set presentationMode(value) {\n        this.toggleClass('jp-mod-presentationMode', value);\n    }\n    /**\n     * The main dock area's user interface mode.\n     */\n    get mode() {\n        return this._dockPanel.mode;\n    }\n    set mode(mode) {\n        const dock = this._dockPanel;\n        if (mode === dock.mode) {\n            return;\n        }\n        const applicationCurrentWidget = this.currentWidget;\n        if (mode === 'single-document') {\n            // Cache the current multi-document layout before changing the mode.\n            this._cachedLayout = dock.saveLayout();\n            dock.mode = mode;\n            // In case the active widget in the dock panel is *not* the active widget\n            // of the application, defer to the application.\n            if (this.currentWidget) {\n                dock.activateWidget(this.currentWidget);\n            }\n            // Adjust menu and title\n            this.layout.insertWidget(2, this._menuHandler.panel);\n            this._titleHandler.show();\n            this._updateTitlePanelTitle();\n        }\n        else {\n            // Cache a reference to every widget currently in the dock panel before\n            // changing its mode.\n            const widgets = toArray(dock.widgets());\n            dock.mode = mode;\n            // Restore cached layout if possible.\n            if (this._cachedLayout) {\n                // Remove any disposed widgets in the cached layout and restore.\n                Private.normalizeAreaConfig(dock, this._cachedLayout.main);\n                dock.restoreLayout(this._cachedLayout);\n                this._cachedLayout = null;\n            }\n            // If layout restoration has been deferred, restore layout now.\n            if (this._layoutRestorer.isDeferred) {\n                this._layoutRestorer\n                    .restoreDeferred()\n                    .then(mainArea => {\n                    if (mainArea) {\n                        const { currentWidget, dock } = mainArea;\n                        if (dock) {\n                            this._dockPanel.restoreLayout(dock);\n                        }\n                        if (currentWidget) {\n                            this.activateById(currentWidget.id);\n                        }\n                    }\n                })\n                    .catch(reason => {\n                    console.error('Failed to restore the deferred layout.');\n                    console.error(reason);\n                });\n            }\n            // Add any widgets created during single document mode, which have\n            // subsequently been removed from the dock panel after the multiple document\n            // layout has been restored. If the widget has add options cached for\n            // the widget (i.e., if it has been placed with respect to another widget),\n            // then take that into account.\n            widgets.forEach(widget => {\n                if (!widget.parent) {\n                    this._addToMainArea(widget, Object.assign(Object.assign({}, this._mainOptionsCache.get(widget)), { activate: false }));\n                }\n            });\n            this._mainOptionsCache.clear();\n            // In case the active widget in the dock panel is *not* the active widget\n            // of the application, defer to the application.\n            if (applicationCurrentWidget) {\n                dock.activateWidget(applicationCurrentWidget);\n            }\n            // Adjust menu and title\n            this.add(this._menuHandler.panel, 'top', { rank: 100 });\n            // this._topHandler.addWidget(this._menuHandler.panel, 100)\n            this._titleHandler.hide();\n        }\n        // Set the mode data attribute on the applications shell node.\n        this.node.dataset.shellMode = mode;\n        this._downPanel.fit();\n        // Emit the mode changed signal\n        this._modeChanged.emit(mode);\n    }\n    /**\n     * Promise that resolves when state is first restored, returning layout\n     * description.\n     */\n    get restored() {\n        return this._restored.promise;\n    }\n    /**\n     * Activate a widget in its area.\n     */\n    activateById(id) {\n        if (this._leftHandler.has(id)) {\n            this._leftHandler.activate(id);\n            return;\n        }\n        if (this._rightHandler.has(id)) {\n            this._rightHandler.activate(id);\n            return;\n        }\n        const tabIndex = this._downPanel.tabBar.titles.findIndex(title => title.owner.id === id);\n        if (tabIndex >= 0) {\n            this._downPanel.currentIndex = tabIndex;\n            return;\n        }\n        const dock = this._dockPanel;\n        const widget = find(dock.widgets(), value => value.id === id);\n        if (widget) {\n            dock.activateWidget(widget);\n        }\n    }\n    /*\n     * Activate the next Tab in the active TabBar.\n     */\n    activateNextTab() {\n        const current = this._currentTabBar();\n        if (!current) {\n            return;\n        }\n        const ci = current.currentIndex;\n        if (ci === -1) {\n            return;\n        }\n        if (ci < current.titles.length - 1) {\n            current.currentIndex += 1;\n            if (current.currentTitle) {\n                current.currentTitle.owner.activate();\n            }\n            return;\n        }\n        if (ci === current.titles.length - 1) {\n            const nextBar = this._adjacentBar('next');\n            if (nextBar) {\n                nextBar.currentIndex = 0;\n                if (nextBar.currentTitle) {\n                    nextBar.currentTitle.owner.activate();\n                }\n            }\n        }\n    }\n    /*\n     * Whether the add buttons for each main area tab bar are enabled.\n     */\n    get addButtonEnabled() {\n        return this._dockPanel.addButtonEnabled;\n    }\n    set addButtonEnabled(value) {\n        this._dockPanel.addButtonEnabled = value;\n    }\n    /*\n     * A signal emitted when the add button on a main area tab bar is clicked.\n     */\n    get addRequested() {\n        return this._dockPanel.addRequested;\n    }\n    /*\n     * Activate the previous Tab in the active TabBar.\n     */\n    activatePreviousTab() {\n        const current = this._currentTabBar();\n        if (!current) {\n            return;\n        }\n        const ci = current.currentIndex;\n        if (ci === -1) {\n            return;\n        }\n        if (ci > 0) {\n            current.currentIndex -= 1;\n            if (current.currentTitle) {\n                current.currentTitle.owner.activate();\n            }\n            return;\n        }\n        if (ci === 0) {\n            const prevBar = this._adjacentBar('previous');\n            if (prevBar) {\n                const len = prevBar.titles.length;\n                prevBar.currentIndex = len - 1;\n                if (prevBar.currentTitle) {\n                    prevBar.currentTitle.owner.activate();\n                }\n            }\n        }\n    }\n    /*\n     * Activate the next TabBar.\n     */\n    activateNextTabBar() {\n        const nextBar = this._adjacentBar('next');\n        if (nextBar) {\n            if (nextBar.currentTitle) {\n                nextBar.currentTitle.owner.activate();\n            }\n        }\n    }\n    /*\n     * Activate the next TabBar.\n     */\n    activatePreviousTabBar() {\n        const nextBar = this._adjacentBar('previous');\n        if (nextBar) {\n            if (nextBar.currentTitle) {\n                nextBar.currentTitle.owner.activate();\n            }\n        }\n    }\n    add(widget, area = 'main', options) {\n        switch (area || 'main') {\n            case 'bottom':\n                return this._addToBottomArea(widget, options);\n            case 'down':\n                return this._addToDownArea(widget, options);\n            case 'header':\n                return this._addToHeaderArea(widget, options);\n            case 'left':\n                return this._addToLeftArea(widget, options);\n            case 'main':\n                return this._addToMainArea(widget, options);\n            case 'menu':\n                return this._addToMenuArea(widget, options);\n            case 'right':\n                return this._addToRightArea(widget, options);\n            case 'top':\n                return this._addToTopArea(widget, options);\n            default:\n                throw new Error(`Invalid area: ${area}`);\n        }\n    }\n    /**\n     * Collapse the left area.\n     */\n    collapseLeft() {\n        this._leftHandler.collapse();\n        this._onLayoutModified();\n    }\n    /**\n     * Collapse the right area.\n     */\n    collapseRight() {\n        this._rightHandler.collapse();\n        this._onLayoutModified();\n    }\n    /**\n     * Dispose the shell.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._layoutDebouncer.dispose();\n        super.dispose();\n    }\n    /**\n     * Expand the left area.\n     *\n     * #### Notes\n     * This will open the most recently used tab,\n     * or the first tab if there is no most recently used.\n     */\n    expandLeft() {\n        this._leftHandler.expand();\n        this._onLayoutModified();\n    }\n    /**\n     * Expand the right area.\n     *\n     * #### Notes\n     * This will open the most recently used tab,\n     * or the first tab if there is no most recently used.\n     */\n    expandRight() {\n        this._rightHandler.expand();\n        this._onLayoutModified();\n    }\n    /**\n     * Close all widgets in the main and down area.\n     */\n    closeAll() {\n        // Make a copy of all the widget in the dock panel (using `toArray()`)\n        // before removing them because removing them while iterating through them\n        // modifies the underlying data of the iterator.\n        toArray(this._dockPanel.widgets()).forEach(widget => widget.close());\n        this._downPanel.stackedPanel.widgets.forEach(widget => widget.close());\n    }\n    /**\n     * True if the given area is empty.\n     */\n    isEmpty(area) {\n        switch (area) {\n            case 'bottom':\n                return this._bottomPanel.widgets.length === 0;\n            case 'down':\n                return this._downPanel.stackedPanel.widgets.length === 0;\n            case 'header':\n                return this._headerPanel.widgets.length === 0;\n            case 'left':\n                return this._leftHandler.stackedPanel.widgets.length === 0;\n            case 'main':\n                return this._dockPanel.isEmpty;\n            case 'menu':\n                return this._menuHandler.panel.widgets.length === 0;\n            case 'right':\n                return this._rightHandler.stackedPanel.widgets.length === 0;\n            case 'top':\n                return this._topHandler.panel.widgets.length === 0;\n            default:\n                return true;\n        }\n    }\n    /**\n     * Restore the layout state for the application shell.\n     */\n    async restoreLayout(mode, layoutRestorer) {\n        var _a, _b;\n        this._layoutRestorer = layoutRestorer;\n        // Get the layout from the restorer\n        const layout = await layoutRestorer.fetch();\n        // Reset the layout\n        const { mainArea, downArea, leftArea, rightArea, relativeSizes } = layout;\n        // Rehydrate the main area.\n        if (mainArea) {\n            const { currentWidget, dock } = mainArea;\n            if (dock && mode === 'multiple-document') {\n                this._dockPanel.restoreLayout(dock);\n            }\n            if (mode) {\n                this.mode = mode;\n            }\n            if (currentWidget) {\n                this.activateById(currentWidget.id);\n            }\n        }\n        else {\n            // This is needed when loading in an empty workspace in single doc mode\n            if (mode) {\n                this.mode = mode;\n            }\n        }\n        // Rehydrate the down area\n        if (downArea) {\n            const { currentWidget, widgets, size } = downArea;\n            const widgetIds = (_a = widgets === null || widgets === void 0 ? void 0 : widgets.map(widget => widget.id)) !== null && _a !== void 0 ? _a : [];\n            // Remove absent widgets\n            this._downPanel.tabBar.titles\n                .filter(title => !widgetIds.includes(title.owner.id))\n                .map(title => title.owner.close());\n            // Add new widgets\n            const titleIds = this._downPanel.tabBar.titles.map(title => title.owner.id);\n            widgets === null || widgets === void 0 ? void 0 : widgets.filter(widget => !titleIds.includes(widget.id)).map(widget => this._downPanel.addWidget(widget));\n            // Reorder tabs\n            while (!ArrayExt.shallowEqual(widgetIds, this._downPanel.tabBar.titles.map(title => title.owner.id))) {\n                this._downPanel.tabBar.titles.forEach((title, index) => {\n                    const position = widgetIds.findIndex(id => title.owner.id == id);\n                    if (position >= 0 && position != index) {\n                        this._downPanel.tabBar.insertTab(position, title);\n                    }\n                });\n            }\n            if (currentWidget) {\n                const index = this._downPanel.stackedPanel.widgets.findIndex(widget => widget.id === currentWidget.id);\n                if (index) {\n                    this._downPanel.currentIndex = index;\n                    (_b = this._downPanel.currentWidget) === null || _b === void 0 ? void 0 : _b.activate();\n                }\n            }\n            if (size && size > 0.0) {\n                this._vsplitPanel.setRelativeSizes([1.0 - size, size]);\n            }\n            else {\n                // Close all tabs and hide the panel\n                this._downPanel.stackedPanel.widgets.forEach(widget => widget.close());\n                this._downPanel.hide();\n            }\n        }\n        // Rehydrate the left area.\n        if (leftArea) {\n            this._leftHandler.rehydrate(leftArea);\n        }\n        else {\n            if (mode === 'single-document') {\n                this.collapseLeft();\n            }\n        }\n        // Rehydrate the right area.\n        if (rightArea) {\n            this._rightHandler.rehydrate(rightArea);\n        }\n        else {\n            if (mode === 'single-document') {\n                this.collapseRight();\n            }\n        }\n        // Restore the relative sizes.\n        if (relativeSizes) {\n            this._hsplitPanel.setRelativeSizes(relativeSizes);\n        }\n        if (!this._isRestored) {\n            // Make sure all messages in the queue are finished before notifying\n            // any extensions that are waiting for the promise that guarantees the\n            // application state has been restored.\n            MessageLoop.flush();\n            this._restored.resolve(layout);\n        }\n        return layout;\n    }\n    /**\n     * Save the dehydrated state of the application shell.\n     */\n    saveLayout() {\n        // If the application is in single document mode, use the cached layout if\n        // available. Otherwise, default to querying the dock panel for layout.\n        const layout = {\n            mainArea: {\n                currentWidget: this._tracker.currentWidget,\n                dock: this.mode === 'single-document'\n                    ? this._cachedLayout || this._dockPanel.saveLayout()\n                    : this._dockPanel.saveLayout()\n            },\n            downArea: {\n                currentWidget: this._downPanel.currentWidget,\n                widgets: toArray(this._downPanel.stackedPanel.widgets),\n                size: this._vsplitPanel.relativeSizes()[1]\n            },\n            leftArea: this._leftHandler.dehydrate(),\n            rightArea: this._rightHandler.dehydrate(),\n            relativeSizes: this._hsplitPanel.relativeSizes()\n        };\n        return layout;\n    }\n    /**\n     * Update the shell configuration.\n     *\n     * @param config Shell configuration\n     */\n    updateConfig(config) {\n        if (config.hiddenMode) {\n            switch (config.hiddenMode) {\n                case 'display':\n                    this._dockPanel.hiddenMode = Widget.HiddenMode.Display;\n                    break;\n                case 'scale':\n                    this._dockPanel.hiddenMode = Widget.HiddenMode.Scale;\n                    break;\n                case 'contentVisibility':\n                    this._dockPanel.hiddenMode = Widget.HiddenMode.ContentVisibility;\n                    break;\n            }\n        }\n    }\n    /**\n     * Returns the widgets for an application area.\n     */\n    widgets(area) {\n        switch (area !== null && area !== void 0 ? area : 'main') {\n            case 'main':\n                return this._dockPanel.widgets();\n            case 'left':\n                return iter(this._leftHandler.sideBar.titles.map(t => t.owner));\n            case 'right':\n                return iter(this._rightHandler.sideBar.titles.map(t => t.owner));\n            case 'header':\n                return this._headerPanel.children();\n            case 'top':\n                return this._topHandler.panel.children();\n            case 'menu':\n                return this._menuHandler.panel.children();\n            case 'bottom':\n                return this._bottomPanel.children();\n            default:\n                throw new Error(`Invalid area: ${area}`);\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the application shell.\n     */\n    onAfterAttach(msg) {\n        this.node.dataset.shellMode = this.mode;\n    }\n    /**\n     * Update the title panel title based on the title of the current widget.\n     */\n    _updateTitlePanelTitle() {\n        let current = this.currentWidget;\n        const inputElement = this._titleHandler.inputElement;\n        inputElement.value = current ? current.title.label : '';\n        inputElement.title = current ? current.title.caption : '';\n    }\n    /**\n     * The path of the current widget changed, fire the _currentPathChanged signal.\n     */\n    _updateCurrentPath() {\n        let current = this.currentWidget;\n        let newValue = '';\n        if (current && current instanceof DocumentWidget) {\n            newValue = current.context.path;\n        }\n        this._currentPathChanged.emit({\n            newValue: newValue,\n            oldValue: this._currentPath\n        });\n        this._currentPath = newValue;\n    }\n    /**\n     * Add a widget to the left content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToLeftArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || this._sideOptionsCache.get(widget) || {};\n        this._sideOptionsCache.set(widget, options);\n        const rank = 'rank' in options ? options.rank : DEFAULT_RANK;\n        this._leftHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n    }\n    /**\n     * Add a widget to the main content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     * All widgets added to the main area should be disposed after removal\n     * (disposal before removal will remove the widget automatically).\n     *\n     * In the options, `ref` defaults to `null`, `mode` defaults to `'tab-after'`,\n     * and `activate` defaults to `true`.\n     */\n    _addToMainArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const dock = this._dockPanel;\n        const mode = options.mode || 'tab-after';\n        let ref = this.currentWidget;\n        if (options.ref) {\n            ref = find(dock.widgets(), value => value.id === options.ref) || null;\n        }\n        const { title } = widget;\n        // Add widget ID to tab so that we can get a handle on the tab's widget\n        // (for context menu support)\n        title.dataset = Object.assign(Object.assign({}, title.dataset), { id: widget.id });\n        if (title.icon instanceof LabIcon) {\n            // bind an appropriate style to the icon\n            title.icon = title.icon.bindprops({\n                stylesheet: 'mainAreaTab'\n            });\n        }\n        else if (typeof title.icon === 'string' || !title.icon) {\n            // add some classes to help with displaying css background imgs\n            title.iconClass = classes(title.iconClass, 'jp-Icon');\n        }\n        dock.addWidget(widget, { mode, ref });\n        // The dock panel doesn't account for placement information while\n        // in single document mode, so upon rehydrating any widgets that were\n        // added will not be in the correct place. Cache the placement information\n        // here so that we can later rehydrate correctly.\n        if (dock.mode === 'single-document') {\n            this._mainOptionsCache.set(widget, options);\n        }\n        if (options.activate !== false) {\n            dock.activateWidget(widget);\n        }\n    }\n    /**\n     * Add a widget to the right content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToRightArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || this._sideOptionsCache.get(widget) || {};\n        const rank = 'rank' in options ? options.rank : DEFAULT_RANK;\n        this._sideOptionsCache.set(widget, options);\n        this._rightHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n    }\n    /**\n     * Add a widget to the top content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToTopArea(widget, options) {\n        var _a;\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : DEFAULT_RANK;\n        this._topHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n        if (this._topHandler.panel.isHidden) {\n            this._topHandler.panel.show();\n        }\n    }\n    /**\n     * Add a widget to the title content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToMenuArea(widget, options) {\n        var _a;\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : DEFAULT_RANK;\n        this._menuHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n        if (this._menuHandler.panel.isHidden) {\n            this._menuHandler.panel.show();\n        }\n    }\n    /**\n     * Add a widget to the header content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToHeaderArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        // Temporary: widgets are added to the panel in order of insertion.\n        this._headerPanel.addWidget(widget);\n        this._onLayoutModified();\n        if (this._headerPanel.isHidden) {\n            this._headerPanel.show();\n        }\n    }\n    /**\n     * Add a widget to the bottom content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToBottomArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        // Temporary: widgets are added to the panel in order of insertion.\n        this._bottomPanel.addWidget(widget);\n        this._onLayoutModified();\n        if (this._bottomPanel.isHidden) {\n            this._bottomPanel.show();\n        }\n    }\n    _addToDownArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const { title } = widget;\n        // Add widget ID to tab so that we can get a handle on the tab's widget\n        // (for context menu support)\n        title.dataset = Object.assign(Object.assign({}, title.dataset), { id: widget.id });\n        if (title.icon instanceof LabIcon) {\n            // bind an appropriate style to the icon\n            title.icon = title.icon.bindprops({\n                stylesheet: 'mainAreaTab'\n            });\n        }\n        else if (typeof title.icon === 'string' || !title.icon) {\n            // add some classes to help with displaying css background imgs\n            title.iconClass = classes(title.iconClass, 'jp-Icon');\n        }\n        this._downPanel.addWidget(widget);\n        this._onLayoutModified();\n        if (this._downPanel.isHidden) {\n            this._downPanel.show();\n        }\n    }\n    /*\n     * Return the tab bar adjacent to the current TabBar or `null`.\n     */\n    _adjacentBar(direction) {\n        const current = this._currentTabBar();\n        if (!current) {\n            return null;\n        }\n        const bars = toArray(this._dockPanel.tabBars());\n        const len = bars.length;\n        const index = bars.indexOf(current);\n        if (direction === 'previous') {\n            return index > 0 ? bars[index - 1] : index === 0 ? bars[len - 1] : null;\n        }\n        // Otherwise, direction is 'next'.\n        return index < len - 1\n            ? bars[index + 1]\n            : index === len - 1\n                ? bars[0]\n                : null;\n    }\n    /*\n     * Return the TabBar that has the currently active Widget or null.\n     */\n    _currentTabBar() {\n        const current = this._tracker.currentWidget;\n        if (!current) {\n            return null;\n        }\n        const title = current.title;\n        const bars = this._dockPanel.tabBars();\n        return find(bars, bar => bar.titles.indexOf(title) > -1) || null;\n    }\n    /**\n     * Handle a change to the dock area active widget.\n     */\n    _onActiveChanged(sender, args) {\n        if (args.newValue) {\n            args.newValue.title.className += ` ${ACTIVE_CLASS}`;\n        }\n        if (args.oldValue) {\n            args.oldValue.title.className = args.oldValue.title.className.replace(ACTIVE_CLASS, '');\n        }\n        this._activeChanged.emit(args);\n    }\n    /**\n     * Handle a change to the dock area current widget.\n     */\n    _onCurrentChanged(sender, args) {\n        if (args.newValue) {\n            args.newValue.title.className += ` ${CURRENT_CLASS}`;\n        }\n        if (args.oldValue) {\n            args.oldValue.title.className = args.oldValue.title.className.replace(CURRENT_CLASS, '');\n        }\n        this._currentChanged.emit(args);\n        this._onLayoutModified();\n    }\n    /**\n     * Handle a change on the down panel widgets\n     */\n    _onTabPanelChanged() {\n        if (this._downPanel.stackedPanel.widgets.length === 0) {\n            this._downPanel.hide();\n        }\n        this._onLayoutModified();\n    }\n    /**\n     * Handle a change to the layout.\n     */\n    _onLayoutModified() {\n        void this._layoutDebouncer.invoke();\n    }\n}\nvar Private;\n(function (Private) {\n    /**\n     * A less-than comparison function for side bar rank items.\n     */\n    function itemCmp(first, second) {\n        return first.rank - second.rank;\n    }\n    Private.itemCmp = itemCmp;\n    /**\n     * Removes widgets that have been disposed from an area config, mutates area.\n     */\n    function normalizeAreaConfig(parent, area) {\n        if (!area) {\n            return;\n        }\n        if (area.type === 'tab-area') {\n            area.widgets = area.widgets.filter(widget => !widget.isDisposed && widget.parent === parent);\n            return;\n        }\n        area.children.forEach(child => {\n            normalizeAreaConfig(parent, child);\n        });\n    }\n    Private.normalizeAreaConfig = normalizeAreaConfig;\n    /**\n     * A class which manages a panel and sorts its widgets by rank.\n     */\n    class PanelHandler {\n        constructor() {\n            /**\n             * A message hook for child add/remove messages on the main area dock panel.\n             */\n            this._panelChildHook = (handler, msg) => {\n                switch (msg.type) {\n                    case 'child-added':\n                        {\n                            const widget = msg.child;\n                            // If we already know about this widget, we're done\n                            if (this._items.find(v => v.widget === widget)) {\n                                break;\n                            }\n                            // Otherwise, add to the end by default\n                            const rank = this._items[this._items.length - 1].rank;\n                            this._items.push({ widget, rank });\n                        }\n                        break;\n                    case 'child-removed':\n                        {\n                            const widget = msg.child;\n                            ArrayExt.removeFirstWhere(this._items, v => v.widget === widget);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                return true;\n            };\n            this._items = new Array();\n            this._panel = new Panel();\n            MessageLoop.installMessageHook(this._panel, this._panelChildHook);\n        }\n        /**\n         * Get the panel managed by the handler.\n         */\n        get panel() {\n            return this._panel;\n        }\n        /**\n         * Add a widget to the panel.\n         *\n         * If the widget is already added, it will be moved.\n         */\n        addWidget(widget, rank) {\n            widget.parent = null;\n            const item = { widget, rank };\n            const index = ArrayExt.upperBound(this._items, item, Private.itemCmp);\n            ArrayExt.insert(this._items, index, item);\n            this._panel.insertWidget(index, widget);\n        }\n    }\n    Private.PanelHandler = PanelHandler;\n    /**\n     * A class which manages a side bar and related stacked panel.\n     */\n    class SideBarHandler {\n        /**\n         * Construct a new side bar handler.\n         */\n        constructor() {\n            this._items = new Array();\n            this._sideBar = new TabBar({\n                insertBehavior: 'none',\n                removeBehavior: 'none',\n                allowDeselect: true,\n                orientation: 'vertical'\n            });\n            this._stackedPanel = new StackedPanel();\n            this._sideBar.hide();\n            this._stackedPanel.hide();\n            this._lastCurrent = null;\n            this._sideBar.currentChanged.connect(this._onCurrentChanged, this);\n            this._sideBar.tabActivateRequested.connect(this._onTabActivateRequested, this);\n            this._stackedPanel.widgetRemoved.connect(this._onWidgetRemoved, this);\n        }\n        /**\n         * Get the tab bar managed by the handler.\n         */\n        get sideBar() {\n            return this._sideBar;\n        }\n        /**\n         * Get the stacked panel managed by the handler\n         */\n        get stackedPanel() {\n            return this._stackedPanel;\n        }\n        /**\n         * Expand the sidebar.\n         *\n         * #### Notes\n         * This will open the most recently used tab, or the first tab\n         * if there is no most recently used.\n         */\n        expand() {\n            const previous = this._lastCurrent || (this._items.length > 0 && this._items[0].widget);\n            if (previous) {\n                this.activate(previous.id);\n            }\n        }\n        /**\n         * Activate a widget residing in the side bar by ID.\n         *\n         * @param id - The widget's unique ID.\n         */\n        activate(id) {\n            const widget = this._findWidgetByID(id);\n            if (widget) {\n                this._sideBar.currentTitle = widget.title;\n                widget.activate();\n            }\n        }\n        /**\n         * Test whether the sidebar has the given widget by id.\n         */\n        has(id) {\n            return this._findWidgetByID(id) !== null;\n        }\n        /**\n         * Collapse the sidebar so no items are expanded.\n         */\n        collapse() {\n            this._sideBar.currentTitle = null;\n        }\n        /**\n         * Add a widget and its title to the stacked panel and side bar.\n         *\n         * If the widget is already added, it will be moved.\n         */\n        addWidget(widget, rank) {\n            widget.parent = null;\n            widget.hide();\n            const item = { widget, rank };\n            const index = this._findInsertIndex(item);\n            ArrayExt.insert(this._items, index, item);\n            this._stackedPanel.insertWidget(index, widget);\n            const title = this._sideBar.insertTab(index, widget.title);\n            // Store the parent id in the title dataset\n            // in order to dispatch click events to the right widget.\n            title.dataset = { id: widget.id };\n            if (title.icon instanceof LabIcon) {\n                // bind an appropriate style to the icon\n                title.icon = title.icon.bindprops({\n                    stylesheet: 'sideBar'\n                });\n            }\n            else if (typeof title.icon === 'string' || !title.icon) {\n                // add some classes to help with displaying css background imgs\n                title.iconClass = classes(title.iconClass, 'jp-Icon', 'jp-Icon-20');\n            }\n            this._refreshVisibility();\n        }\n        /**\n         * Dehydrate the side bar data.\n         */\n        dehydrate() {\n            const collapsed = this._sideBar.currentTitle === null;\n            const widgets = toArray(this._stackedPanel.widgets);\n            const currentWidget = widgets[this._sideBar.currentIndex];\n            return { collapsed, currentWidget, widgets };\n        }\n        /**\n         * Rehydrate the side bar.\n         */\n        rehydrate(data) {\n            if (data.currentWidget) {\n                this.activate(data.currentWidget.id);\n            }\n            if (data.collapsed) {\n                this.collapse();\n            }\n        }\n        /**\n         * Find the insertion index for a rank item.\n         */\n        _findInsertIndex(item) {\n            return ArrayExt.upperBound(this._items, item, Private.itemCmp);\n        }\n        /**\n         * Find the index of the item with the given widget, or `-1`.\n         */\n        _findWidgetIndex(widget) {\n            return ArrayExt.findFirstIndex(this._items, i => i.widget === widget);\n        }\n        /**\n         * Find the widget which owns the given title, or `null`.\n         */\n        _findWidgetByTitle(title) {\n            const item = find(this._items, value => value.widget.title === title);\n            return item ? item.widget : null;\n        }\n        /**\n         * Find the widget with the given id, or `null`.\n         */\n        _findWidgetByID(id) {\n            const item = find(this._items, value => value.widget.id === id);\n            return item ? item.widget : null;\n        }\n        /**\n         * Refresh the visibility of the side bar and stacked panel.\n         */\n        _refreshVisibility() {\n            this._sideBar.setHidden(this._sideBar.titles.length === 0);\n            this._stackedPanel.setHidden(this._sideBar.currentTitle === null);\n        }\n        /**\n         * Handle the `currentChanged` signal from the sidebar.\n         */\n        _onCurrentChanged(sender, args) {\n            const oldWidget = args.previousTitle\n                ? this._findWidgetByTitle(args.previousTitle)\n                : null;\n            const newWidget = args.currentTitle\n                ? this._findWidgetByTitle(args.currentTitle)\n                : null;\n            if (oldWidget) {\n                oldWidget.hide();\n            }\n            if (newWidget) {\n                newWidget.show();\n            }\n            this._lastCurrent = newWidget || oldWidget;\n            this._refreshVisibility();\n        }\n        /**\n         * Handle a `tabActivateRequest` signal from the sidebar.\n         */\n        _onTabActivateRequested(sender, args) {\n            args.title.owner.activate();\n        }\n        /*\n         * Handle the `widgetRemoved` signal from the stacked panel.\n         */\n        _onWidgetRemoved(sender, widget) {\n            if (widget === this._lastCurrent) {\n                this._lastCurrent = null;\n            }\n            ArrayExt.removeAt(this._items, this._findWidgetIndex(widget));\n            this._sideBar.removeTab(widget.title);\n            this._refreshVisibility();\n        }\n    }\n    Private.SideBarHandler = SideBarHandler;\n    class SkipLinkWidget extends Widget {\n        /**\n         * Construct a new skipLink widget.\n         */\n        constructor(shell) {\n            super();\n            this.addClass('jp-skiplink');\n            this.id = 'jp-skiplink';\n            this._shell = shell;\n            this._createSkipLink('Skip to left side bar');\n        }\n        handleEvent(event) {\n            switch (event.type) {\n                case 'click':\n                    this._focusLeftSideBar();\n                    break;\n            }\n        }\n        /**\n         * Handle `after-attach` messages for the widget.\n         */\n        onAfterAttach(msg) {\n            super.onAfterAttach(msg);\n            this.node.addEventListener('click', this);\n        }\n        /**\n         * A message handler invoked on a `'before-detach'`\n         * message\n         */\n        onBeforeDetach(msg) {\n            this.node.removeEventListener('click', this);\n            super.onBeforeDetach(msg);\n        }\n        _focusLeftSideBar() {\n            this._shell.expandLeft();\n        }\n        _createSkipLink(skipLinkText) {\n            const skipLink = document.createElement('a');\n            skipLink.href = '#';\n            skipLink.tabIndex = 1;\n            skipLink.text = skipLinkText;\n            skipLink.className = 'skip-link';\n            this.node.appendChild(skipLink);\n        }\n    }\n    Private.SkipLinkWidget = SkipLinkWidget;\n    class TitleHandler extends Widget {\n        /**\n         * Construct a new title handler.\n         */\n        constructor(shell) {\n            super();\n            this._selected = false;\n            const inputElement = document.createElement('input');\n            inputElement.type = 'text';\n            this.node.appendChild(inputElement);\n            this._shell = shell;\n            this.id = 'jp-title-panel-title';\n        }\n        /**\n         * Handle `after-attach` messages for the widget.\n         */\n        onAfterAttach(msg) {\n            super.onAfterAttach(msg);\n            this.inputElement.addEventListener('keyup', this);\n            this.inputElement.addEventListener('click', this);\n            this.inputElement.addEventListener('blur', this);\n        }\n        /**\n         * Handle `before-detach` messages for the widget.\n         */\n        onBeforeDetach(msg) {\n            super.onBeforeDetach(msg);\n            this.inputElement.removeEventListener('keyup', this);\n            this.inputElement.removeEventListener('click', this);\n            this.inputElement.removeEventListener('blur', this);\n        }\n        handleEvent(event) {\n            switch (event.type) {\n                case 'keyup':\n                    void this._evtKeyUp(event);\n                    break;\n                case 'click':\n                    this._evtClick(event);\n                    break;\n                case 'blur':\n                    this._selected = false;\n                    break;\n            }\n        }\n        /**\n         * Handle `keyup` events on the handler.\n         */\n        async _evtKeyUp(event) {\n            if (event.key == 'Enter') {\n                const widget = this._shell.currentWidget;\n                if (widget == null) {\n                    return;\n                }\n                const oldName = widget.title.label;\n                const inputElement = this.inputElement;\n                const newName = inputElement.value;\n                inputElement.blur();\n                if (newName !== oldName) {\n                    widget.title.label = newName;\n                }\n                else {\n                    inputElement.value = oldName;\n                }\n            }\n        }\n        /**\n         * Handle `click` events on the handler.\n         */\n        _evtClick(event) {\n            // only handle primary button clicks\n            if (event.button !== 0 || this._selected) {\n                return;\n            }\n            const inputElement = this.inputElement;\n            event.preventDefault();\n            event.stopPropagation();\n            this._selected = true;\n            const selectEnd = inputElement.value.indexOf('.');\n            if (selectEnd === -1) {\n                inputElement.select();\n            }\n            else {\n                inputElement.setSelectionRange(0, selectEnd);\n            }\n        }\n        /**\n         * The input element containing the parent widget's title.\n         */\n        get inputElement() {\n            return this.node.children[0];\n        }\n    }\n    Private.TitleHandler = TitleHandler;\n    class RestorableSplitPanel extends SplitPanel {\n        constructor(options = {}) {\n            super(options);\n            this.updated = new Signal(this);\n        }\n        /**\n         * Emit 'updated' signal on 'update' requests.\n         */\n        onUpdateRequest(msg) {\n            super.onUpdateRequest(msg);\n            this.updated.emit();\n        }\n    }\n    Private.RestorableSplitPanel = RestorableSplitPanel;\n})(Private || (Private = {}));\n//# sourceMappingURL=shell.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\n/* tslint:disable */\n/**\n * The application status token.\n */\nexport const ILabStatus = new Token('@jupyterlab/application:ILabStatus');\n/**\n * The application status signals and flags class.\n */\nexport class LabStatus {\n    /**\n     * Construct a new  status object.\n     */\n    constructor(app) {\n        this._busyCount = 0;\n        this._dirtyCount = 0;\n        this._busySignal = new Signal(app);\n        this._dirtySignal = new Signal(app);\n    }\n    /**\n     * Returns a signal for when application changes its busy status.\n     */\n    get busySignal() {\n        return this._busySignal;\n    }\n    /**\n     * Returns a signal for when application changes its dirty status.\n     */\n    get dirtySignal() {\n        return this._dirtySignal;\n    }\n    /**\n     * Whether the application is busy.\n     */\n    get isBusy() {\n        return this._busyCount > 0;\n    }\n    /**\n     * Whether the application is dirty.\n     */\n    get isDirty() {\n        return this._dirtyCount > 0;\n    }\n    /**\n     * Set the application state to dirty.\n     *\n     * @returns A disposable used to clear the dirty state for the caller.\n     */\n    setDirty() {\n        const oldDirty = this.isDirty;\n        this._dirtyCount++;\n        if (this.isDirty !== oldDirty) {\n            this._dirtySignal.emit(this.isDirty);\n        }\n        return new DisposableDelegate(() => {\n            const oldDirty = this.isDirty;\n            this._dirtyCount = Math.max(0, this._dirtyCount - 1);\n            if (this.isDirty !== oldDirty) {\n                this._dirtySignal.emit(this.isDirty);\n            }\n        });\n    }\n    /**\n     * Set the application state to busy.\n     *\n     * @returns A disposable used to clear the busy state for the caller.\n     */\n    setBusy() {\n        const oldBusy = this.isBusy;\n        this._busyCount++;\n        if (this.isBusy !== oldBusy) {\n            this._busySignal.emit(this.isBusy);\n        }\n        return new DisposableDelegate(() => {\n            const oldBusy = this.isBusy;\n            this._busyCount--;\n            if (this.isBusy !== oldBusy) {\n                this._busySignal.emit(this.isBusy);\n            }\n        });\n    }\n}\n//# sourceMappingURL=status.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Notification } from '@jupyterlab/apputils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { Base64ModelFactory } from '@jupyterlab/docregistry';\nimport { Token } from '@lumino/coreutils';\nimport { JupyterFrontEnd } from './frontend';\nimport { createRendermimePlugins } from './mimerenderers';\nimport { LabShell } from './shell';\nimport { LabStatus } from './status';\n/**\n * JupyterLab is the main application class. It is instantiated once and shared.\n */\nexport class JupyterLab extends JupyterFrontEnd {\n    /**\n     * Construct a new JupyterLab object.\n     */\n    constructor(options = { shell: new LabShell() }) {\n        super(Object.assign(Object.assign({}, options), { shell: options.shell || new LabShell() }));\n        /**\n         * The name of the JupyterLab application.\n         */\n        this.name = PageConfig.getOption('appName') || 'JupyterLab';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = PageConfig.getOption('appNamespace') || this.name;\n        /**\n         * A list of all errors encountered when registering plugins.\n         */\n        this.registerPluginErrors = [];\n        /**\n         * The application busy and dirty status signals and flags.\n         */\n        this.status = new LabStatus(this);\n        /**\n         * The version of the JupyterLab application.\n         */\n        this.version = PageConfig.getOption('appVersion') || 'unknown';\n        this.restored = this.shell.restored\n            .then(() => undefined)\n            .catch(() => undefined);\n        // Create an IInfo dictionary from the options to override the defaults.\n        const info = Object.keys(JupyterLab.defaultInfo).reduce((acc, val) => {\n            if (val in options) {\n                acc[val] = JSON.parse(JSON.stringify(options[val]));\n            }\n            return acc;\n        }, {});\n        // Populate application info.\n        this._info = Object.assign(Object.assign({}, JupyterLab.defaultInfo), info);\n        // Populate application paths override the defaults if necessary.\n        const defaultURLs = JupyterLab.defaultPaths.urls;\n        const defaultDirs = JupyterLab.defaultPaths.directories;\n        const optionURLs = (options.paths && options.paths.urls) || {};\n        const optionDirs = (options.paths && options.paths.directories) || {};\n        this._paths = {\n            urls: Object.keys(defaultURLs).reduce((acc, key) => {\n                if (key in optionURLs) {\n                    const value = optionURLs[key];\n                    acc[key] = value;\n                }\n                else {\n                    acc[key] = defaultURLs[key];\n                }\n                return acc;\n            }, {}),\n            directories: Object.keys(JupyterLab.defaultPaths.directories).reduce((acc, key) => {\n                if (key in optionDirs) {\n                    const value = optionDirs[key];\n                    acc[key] = value;\n                }\n                else {\n                    acc[key] = defaultDirs[key];\n                }\n                return acc;\n            }, {})\n        };\n        if (this._info.devMode) {\n            this.shell.addClass('jp-mod-devMode');\n        }\n        // Add initial model factory.\n        this.docRegistry.addModelFactory(new Base64ModelFactory());\n        if (options.mimeExtensions) {\n            for (const plugin of createRendermimePlugins(options.mimeExtensions)) {\n                this.registerPlugin(plugin);\n            }\n        }\n    }\n    /**\n     * The JupyterLab application information dictionary.\n     */\n    get info() {\n        return this._info;\n    }\n    /**\n     * Get a handle on the notification manager.\n     *\n     * ### Notes\n     * You should use stable API `Notification.manager` from `@jupyterlab/apputils`.\n     *\n     * @deprecated This is an experimental feature used for integration testing.\n     * @private\n     */\n    get notificationManager() {\n        return Notification.manager;\n    }\n    /**\n     * The JupyterLab application paths dictionary.\n     */\n    get paths() {\n        return this._paths;\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!mod.hasOwnProperty('__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach(item => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                this.registerPluginErrors.push(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach(mod => {\n            this.registerPluginModule(mod);\n        });\n    }\n}\n/**\n * The namespace for `JupyterLab` class statics.\n */\n(function (JupyterLab) {\n    /**\n     * The layout restorer token.\n     */\n    JupyterLab.IInfo = new Token('@jupyterlab/application:IInfo');\n    /**\n     * The default JupyterLab application info.\n     */\n    JupyterLab.defaultInfo = {\n        devMode: PageConfig.getOption('devMode').toLowerCase() === 'true',\n        deferred: { patterns: [], matches: [] },\n        disabled: { patterns: [], matches: [] },\n        mimeExtensions: [],\n        filesCached: PageConfig.getOption('cacheFiles').toLowerCase() === 'true'\n    };\n    /**\n     * The default JupyterLab application paths.\n     */\n    JupyterLab.defaultPaths = {\n        urls: {\n            base: PageConfig.getOption('baseUrl'),\n            notFound: PageConfig.getOption('notFoundUrl'),\n            app: PageConfig.getOption('appUrl'),\n            doc: PageConfig.getOption('docUrl'),\n            static: PageConfig.getOption('staticUrl'),\n            settings: PageConfig.getOption('settingsUrl'),\n            themes: PageConfig.getOption('themesUrl'),\n            translations: PageConfig.getOption('translationsApiUrl'),\n            hubHost: PageConfig.getOption('hubHost') || undefined,\n            hubPrefix: PageConfig.getOption('hubPrefix') || undefined,\n            hubUser: PageConfig.getOption('hubUser') || undefined,\n            hubServerName: PageConfig.getOption('hubServerName') || undefined\n        },\n        directories: {\n            appSettings: PageConfig.getOption('appSettingsDir'),\n            schemas: PageConfig.getOption('schemasDir'),\n            static: PageConfig.getOption('staticDir'),\n            templates: PageConfig.getOption('templatesDir'),\n            themes: PageConfig.getOption('themesDir'),\n            userSettings: PageConfig.getOption('userSettingsDir'),\n            serverRoot: PageConfig.getOption('serverRoot'),\n            workspaces: PageConfig.getOption('workspacesDir')\n        }\n    };\n})(JupyterLab || (JupyterLab = {}));\n//# sourceMappingURL=lab.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { PromiseDelegate, Token } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\n/**\n * A static class that routes URLs within the application.\n */\nexport class Router {\n    /**\n     * Create a URL router.\n     */\n    constructor(options) {\n        /**\n         * If a matching rule's command resolves with the `stop` token during routing,\n         * no further matches will execute.\n         */\n        this.stop = new Token('@jupyterlab/application:Router#stop');\n        this._routed = new Signal(this);\n        this._rules = new Map();\n        this.base = options.base;\n        this.commands = options.commands;\n    }\n    /**\n     * Returns the parsed current URL of the application.\n     */\n    get current() {\n        var _a, _b;\n        const { base } = this;\n        const parsed = URLExt.parse(window.location.href);\n        const { search, hash } = parsed;\n        const path = (_b = (_a = parsed.pathname) === null || _a === void 0 ? void 0 : _a.replace(base, '/')) !== null && _b !== void 0 ? _b : '';\n        const request = path + search + hash;\n        return { hash, path, request, search };\n    }\n    /**\n     * A signal emitted when the router routes a route.\n     */\n    get routed() {\n        return this._routed;\n    }\n    /**\n     * Navigate to a new path within the application.\n     *\n     * @param path - The new path or empty string if redirecting to root.\n     *\n     * @param options - The navigation options.\n     */\n    navigate(path, options = {}) {\n        const { base } = this;\n        const { history } = window;\n        const { hard } = options;\n        const old = document.location.href;\n        const url = path && path.indexOf(base) === 0 ? path : URLExt.join(base, path);\n        if (url === old) {\n            return hard ? this.reload() : undefined;\n        }\n        history.pushState({}, '', url);\n        if (hard) {\n            return this.reload();\n        }\n        if (!options.skipRouting) {\n            // Because a `route()` call may still be in the stack after having received\n            // a `stop` token, wait for the next stack frame before calling `route()`.\n            requestAnimationFrame(() => {\n                void this.route();\n            });\n        }\n    }\n    /**\n     * Register to route a path pattern to a command.\n     *\n     * @param options - The route registration options.\n     *\n     * @returns A disposable that removes the registered rule from the router.\n     */\n    register(options) {\n        var _a;\n        const { command, pattern } = options;\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : 100;\n        const rules = this._rules;\n        rules.set(pattern, { command, rank });\n        return new DisposableDelegate(() => {\n            rules.delete(pattern);\n        });\n    }\n    /**\n     * Cause a hard reload of the document.\n     */\n    reload() {\n        window.location.reload();\n    }\n    /**\n     * Route a specific path to an action.\n     *\n     * #### Notes\n     * If a pattern is matched, its command will be invoked with arguments that\n     * match the `IRouter.ILocation` interface.\n     */\n    route() {\n        const { commands, current, stop } = this;\n        const { request } = current;\n        const routed = this._routed;\n        const rules = this._rules;\n        const matches = [];\n        // Collect all rules that match the URL.\n        rules.forEach((rule, pattern) => {\n            if (request === null || request === void 0 ? void 0 : request.match(pattern)) {\n                matches.push(rule);\n            }\n        });\n        // Order the matching rules by rank and enqueue them.\n        const queue = matches.sort((a, b) => b.rank - a.rank);\n        const done = new PromiseDelegate();\n        // Process each enqueued command sequentially and short-circuit if a promise\n        // resolves with the `stop` token.\n        const next = async () => {\n            if (!queue.length) {\n                routed.emit(current);\n                done.resolve(undefined);\n                return;\n            }\n            const { command } = queue.pop();\n            try {\n                const request = this.current.request;\n                const result = await commands.execute(command, current);\n                if (result === stop) {\n                    queue.length = 0;\n                    console.debug(`Routing ${request} was short-circuited by ${command}`);\n                }\n            }\n            catch (reason) {\n                console.warn(`Routing ${request} to ${command} failed`, reason);\n            }\n            void next();\n        };\n        void next();\n        return done.promise;\n    }\n}\n//# sourceMappingURL=router.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * A token for which a plugin can provide to respond to connection failures\n * to the application server.\n */\nexport const IConnectionLost = new Token('@jupyterlab/apputils:IConnectionLost');\n/**\n * The URL Router token.\n */\nexport const IRouter = new Token('@jupyterlab/application:IRouter');\n//# sourceMappingURL=tokens.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Token } from '@lumino/coreutils';\n/**\n * The tree path updater token.\n */\nexport const ITreePathUpdater = new Token('@jupyterlab/application:ITreePathUpdater');\n//# sourceMappingURL=treepathupdater.js.map"],"names":["ConnectionLost","async","manager","err","translator","trans","nullTranslator","load","title","__","networkMsg","showErrorMessage","message","Private","JupyterFrontEndContextMenu","JupyterFrontEnd","Application","constructor","options","super","this","_formatChanged","Signal","contextMenu","ContextMenuSvg","commands","renderer","contextMenuRenderer","groupByTarget","sortBySelector","restored","Promise","resolve","requestAnimationFrame","commandLinker","CommandLinker","docRegistry","DocumentRegistry","started","then","catch","serviceManager","ServiceManager","format","_format","document","body","dataset","emit","formatChanged","contextMenuHitTest","fn","_contextMenuEvent","target","Node","node","HTMLElement","parentNode","evtContextMenu","event","shiftKey","suppressContextMenu","open","items","menu","length","command","close","preventDefault","stopPropagation","inDocMode","path","paths","docPattern","RegExp","urls","doc","match","IPaths","Token","ITreeResolver","element","closest","SIDEBAR_CLASS","CURRENT_CLASS","ACTIVE_CLASS","DEFAULT_RANK","ACTIVITY_CLASS","ILabShell","LabShell","Widget","_dockChildHook","handler","msg","type","child","addClass","_tracker","add","removeClass","remove","_activeChanged","_cachedLayout","_currentChanged","_currentPath","_currentPathChanged","_modeChanged","_isRestored","_layoutModified","_layoutDebouncer","Debouncer","undefined","_restored","PromiseDelegate","FocusTracker","_mainOptionsCache","Map","_sideOptionsCache","id","headerPanel","_headerPanel","BoxPanel","menuHandler","_menuHandler","PanelHandler","panel","setAttribute","topHandler","_topHandler","bottomPanel","_bottomPanel","hboxPanel","vsplitPanel","_vsplitPanel","RestorableSplitPanel","dockPanel","_dockPanel","DockPanelSvg","hiddenMode","MessageLoop","hsplitPanel","_hsplitPanel","downPanel","_downPanel","TabPanelSvg","tabsMovable","leftHandler","_leftHandler","SideBarHandler","rightHandler","_rightHandler","rootLayout","BoxLayout","sideBar","contentNode","stackedPanel","spacing","direction","orientation","SplitPanel","addWidget","setRelativeSizes","hide","layout","currentChanged","connect","_onCurrentChanged","activeChanged","_onActiveChanged","layoutModified","_onLayoutModified","updated","tabBar","tabMoved","_onTabPanelChanged","widgetRemoved","titleHandler","_titleHandler","TitleHandler","rank","mode","insertWidget","skipLinkWidget","_skipLinkWidget","SkipLinkWidget","show","sender","args","newValue","oldValue","changed","disconnect","_updateTitlePanelTitle","DocumentWidget","context","pathChanged","_updateCurrentPath","activeWidget","modeChanged","currentPathChanged","currentWidget","leftCollapsed","currentTitle","rightCollapsed","presentationMode","hasClass","value","toggleClass","dock","applicationCurrentWidget","saveLayout","activateWidget","widgets","toArray","normalizeAreaConfig","main","restoreLayout","_layoutRestorer","isDeferred","restoreDeferred","mainArea","activateById","reason","console","error","forEach","widget","parent","_addToMainArea","Object","assign","get","activate","clear","shellMode","fit","promise","has","tabIndex","titles","findIndex","owner","currentIndex","find","activateNextTab","current","_currentTabBar","ci","nextBar","_adjacentBar","addButtonEnabled","addRequested","activatePreviousTab","prevBar","len","activateNextTabBar","activatePreviousTabBar","area","_addToBottomArea","_addToDownArea","_addToHeaderArea","_addToLeftArea","_addToMenuArea","_addToRightArea","_addToTopArea","Error","collapseLeft","collapse","collapseRight","dispose","isDisposed","expandLeft","expand","expandRight","closeAll","isEmpty","layoutRestorer","_a","_b","fetch","downArea","leftArea","rightArea","relativeSizes","size","widgetIds","map","filter","includes","titleIds","ArrayExt","index","position","insertTab","rehydrate","dehydrate","updateConfig","config","iter","t","children","onAfterAttach","inputElement","label","caption","set","ref","icon","LabIcon","bindprops","stylesheet","iconClass","classes","isHidden","bars","tabBars","indexOf","bar","className","replace","invoke","itemCmp","first","second","_panelChildHook","_items","v","push","Array","_panel","Panel","item","_sideBar","TabBar","insertBehavior","removeBehavior","allowDeselect","_stackedPanel","StackedPanel","_lastCurrent","tabActivateRequested","_onTabActivateRequested","_onWidgetRemoved","previous","_findWidgetByID","_findInsertIndex","_refreshVisibility","collapsed","data","_findWidgetIndex","i","_findWidgetByTitle","setHidden","oldWidget","previousTitle","newWidget","removeTab","shell","_shell","_createSkipLink","handleEvent","_focusLeftSideBar","addEventListener","onBeforeDetach","removeEventListener","skipLinkText","skipLink","createElement","href","text","appendChild","_selected","_evtKeyUp","_evtClick","key","oldName","newName","blur","button","selectEnd","select","setSelectionRange","onUpdateRequest","ILabStatus","LabStatus","app","_busyCount","_dirtyCount","_busySignal","_dirtySignal","busySignal","dirtySignal","isBusy","isDirty","setDirty","oldDirty","DisposableDelegate","Math","max","setBusy","oldBusy","JupyterLab","name","PageConfig","namespace","registerPluginErrors","status","version","info","keys","defaultInfo","reduce","acc","val","JSON","parse","stringify","_info","defaultURLs","defaultPaths","defaultDirs","directories","optionURLs","optionDirs","_paths","devMode","addModelFactory","Base64ModelFactory","mimeExtensions","plugin","registerPlugin","notificationManager","Notification","registerPluginModule","mod","default","hasOwnProperty","isArray","registerPluginModules","mods","IInfo","toLowerCase","deferred","patterns","matches","disabled","filesCached","base","notFound","static","settings","themes","translations","hubHost","hubPrefix","hubUser","hubServerName","appSettings","schemas","templates","userSettings","serverRoot","workspaces","Router","stop","_routed","_rules","parsed","URLExt","window","location","search","hash","pathname","request","routed","navigate","history","hard","old","url","reload","pushState","skipRouting","route","register","pattern","rules","delete","rule","queue","sort","a","b","done","next","pop","execute","debug","warn","IConnectionLost","IRouter","ITreePathUpdater"],"sourceRoot":""}