{"version":3,"file":"7135.bundle.js","mappings":"8oEAC6C,oBAAXA,aAA+D,IAAvBA,OAAOC,aAA+BD,OAAOC,YAAhH,MAEDC,EAA8B,oBAAXC,OAAyB,KAAOA,OAK5C,EAAmC,OAAdD,EAC9BE,IAEA,MAAMC,EAAM,IAAIC,YAAYF,GACtBG,EAAM,IAAIC,WAAWH,GAE3B,OADAH,EAAUO,gBAAgBF,GACnBF,GAEPD,IAEA,MAAMC,EAAM,IAAIC,YAAYF,GACtBG,EAAM,IAAIC,WAAWH,GAC3B,IAAK,IAAIK,EAAI,EAAGA,EAAIN,EAAKM,IACvBH,EAAIG,GAAKC,KAAKC,KAAsB,WAAhBD,KAAKE,WAA2B,GAEtD,OAAOR,GCRES,GAFOH,KAAKE,OAEH,IAAM,IAAIE,YAAY,EAAmB,IAAI,IAe7DC,EAAiB,CAAC,MAAQ,KAAO,KAAO,KAAO,KACxCC,EAAS,IAAMD,EAAeE,QAAQ,UAAmCC,IACnFA,EAAIL,IAAW,IAAMK,EAAI,GAAGC,SAAS,MCb3BC,EAASC,GAA+B,IAAKC,QAAQD,G,qECR3D,MAAM,EAASE,OCFf,MAAMC,EAKXC,YAAaC,EAAMC,GACjBC,KAAKF,KAAOA,EACZE,KAAKD,MAAQA,CACf,EASK,MAAM,EAAS,CAACD,EAAMC,IAAU,IAAIH,EAAKE,EAAMC,GCXzCE,EAAmD,oBAAbC,SAA2BA,SAAW,CAAC,EAuBlB,oBAAdC,WAA4B,IAAIA,UAoO9DF,EAAIG,aACPH,EAAII,UACKJ,EAAIK,mBACVL,EAAIM,aACHN,EAAIO,cACCP,EAAIQ,mBACAR,EAAIS,uB,cC9PnC,MAAMC,EAAO,IACPC,EAAS,IACTC,EAAO,IACPC,EAAO,IACPC,EAAQ,IACRC,EAAM,IACNC,EAAS,IACTC,EAAS,IACTC,EAAU,IAKjBC,EAAmB,CACvB,CAACT,GAAO,EAAY,cAAe,QACnC,CAACC,GAAS,EAAY,cAAe,UACrC,CAACC,GAAO,EAAY,QAAS,QAC7B,CAACE,GAAQ,EAAY,QAAS,SAC9B,CAACD,GAAO,EAAY,QAAS,QAC7B,CAACE,GAAM,EAAY,QAAS,OAC5B,CAACC,GAAS,EAAY,QAAS,UAC/B,CAACC,GAAS,EAAY,QAAS,UAC/B,CAACC,GAAU,EAAY,QAAS,UAG5BE,EAAgB,CACpB,CAACV,GAAO,OACR,CAACC,GAAS,OACV,CAACC,GAAO,QACR,CAACE,GAAQ,QACT,CAACD,GAAO,QACR,CAACE,GAAM,QACP,CAACC,GAAS,QACV,CAACC,GAAS,cACV,CAACC,GAAU,QA4IPG,EAAqB,KACtB,KAvC2BC,IAC9B,MAAMC,EAAa,GACbC,EAAU,GAGhB,IAAI5C,EAAI,EAER,KAAOA,EAAI0C,EAAKG,OAAQ7C,IAAK,CAC3B,MAAM8C,EAAMJ,EAAK1C,GAEX+C,EAAQP,EAAcM,GAC5B,QAAcE,IAAVD,EACFJ,EAAWM,KAAKF,OACX,CACL,GAAID,EAAI9B,cAAgBkC,QAAUJ,EAAI9B,cAAgBmC,OAGpD,MAFAR,EAAWM,KAAKH,EAIpB,CACF,CAOA,IANI9C,EAAI,IAEN2C,EAAWM,KAAK,QAChBL,EAAQK,KAAKN,EAAWS,KAAK,MAGxBpD,EAAI0C,EAAKG,OAAQ7C,IAAK,CAC3B,MAAM8C,EAAMJ,EAAK1C,GAEX8C,aAAehC,QACnB8B,EAAQK,KAAKH,EAEjB,CACA,OAAOF,GAhI0BF,IACjC,MAAMC,EAAa,GACbU,EAAS,GACTC,EAAeC,EAAA,KAIrB,IAAIX,EAAU,GAEV5C,EAAI,EAER,KAAOA,EAAI0C,EAAKG,OAAQ7C,IAAK,CAC3B,MAAM8C,EAAMJ,EAAK1C,GAEX+C,EAAQR,EAAiBO,GAC/B,QAAcE,IAAVD,EACFO,EAAaE,IAAIT,EAAM9B,KAAM8B,EAAM7B,WAC9B,CACL,GAAI4B,EAAI9B,cAAgBkC,QAAUJ,EAAI9B,cAAgBmC,OASpD,MAT4D,CAC5D,MAAMJ,GDmHkBU,ECnHWH,EDmHNC,EAAA,GAAQE,GAAG,CAACC,EAAOC,IAAQ,GAAGA,KAAOD,OAAUN,KAAK,KClH7EpD,EAAI,GAAK+C,EAAMF,OAAS,GAC1BF,EAAWM,KAAK,KAAOH,GACvBO,EAAOJ,KAAKF,IAEZJ,EAAWM,KAAKH,EAEpB,CAGF,CACF,CDwG8BW,MChG9B,IANIzD,EAAI,IAEN4C,EAAUS,EACVT,EAAQgB,QAAQjB,EAAWS,KAAK,MAG3BpD,EAAI0C,EAAKG,OAAQ7C,IAAK,CAC3B,MAAM8C,EAAMJ,EAAK1C,GACX8C,aAAehC,QACnB8B,EAAQK,KAAKH,EAEjB,CACA,OAAOF,GAQyBF,IAChC,MAAMC,EAAa,GACbC,EAAU,GAGhB,IAAI5C,EAAI,EAER,KAAOA,EAAI0C,EAAKG,OAAQ7C,IAAK,CAC3B,MAAM8C,EAAMJ,EAAK1C,GAGjB,QAAcgD,IADAR,EAAcM,GACH,CACvB,GAAIA,EAAI9B,cAAgBkC,QAAUJ,EAAI9B,cAAgBmC,OAGpD,MAFAR,EAAWM,KAAKH,EAIpB,CACF,CAKA,IAJI9C,EAAI,GACN4C,EAAQK,KAAKN,EAAWS,KAAK,KAGxBpD,EAAI0C,EAAKG,OAAQ7C,IAAK,CAC3B,MAAM8C,EAAMJ,EAAK1C,GAEX8C,aAAehC,SACfgC,EAAI9B,cAAgB6C,OACtBjB,EAAQK,KAAKa,KAAKC,UAAUjB,IAE5BF,EAAQK,KAAKH,GAGnB,CACA,OAAOF,GAqDIoB,EAAQ,IAAItB,KACvBuB,QAAQC,OAAOzB,EAAmBC,IAElCyB,EAAUC,SAASC,GAAOA,EAAGL,MAAMtB,IAAK,EAqF7ByB,EAAYX,EAAA,KAyLH,OAMf,MClcMc,EAAiBC,IAAQ,CAIpC,CAACzD,OAAO0D,YACN,OAAOrD,IACT,EAEAoD,SAqBWE,EAAc,CAACD,EAAUE,IAASJ,GAAe,KAC5D,MAAM,KAAEK,EAAI,MAAEjB,GAAUc,EAASD,OACjC,MAAO,CAAEI,OAAMjB,MAAOiB,OAAO3B,EAAY0B,EAAKhB,GAAO,I,eChCvD,MAAMkB,UAA0B,IAK9B5D,YAAa6D,EAAMC,GACjBC,QACA5D,KAAKC,IAAMyD,EACX1D,KAAK2D,UAAYA,CACnB,EAGF,MAAME,EAKJhE,YAAaiE,EAAOvF,GAIlByB,KAAK8D,MAAQA,EAIb9D,KAAKzB,IAAMA,CACb,EAUF,MAAMwF,EACJlE,cAIEG,KAAKgE,QAAU,IAAIC,GACrB,EAYF,MAAMC,EAAwB,CAACC,EAAaC,EAAI3E,IAC9C2E,EAAGJ,QAAQf,SAAQ,CAACoB,EAASC,KAC3B,MAAMC,EAAyCJ,EAAYlE,IAAIuE,MAAMR,QAAQS,IAAIH,GACjF,IAAK,IAAIzF,EAAI,EAAGA,EAAIwF,EAAQ3C,OAAQ7C,IAAK,CACvC,MAAM6F,EAAML,EAAQxF,GACpB8F,GAAeR,EAAaI,EAASG,EAAIZ,MAAOY,EAAInG,IAAKkB,EAC3D,KAsCEmF,EAAY,CAACR,EAAIS,KACrB,MAAMC,EAAMV,EAAGJ,QAAQS,IAAII,EAAGE,QAC9B,YAAelD,IAARiD,GAAoD,OA7BzC,EAACA,EAAKhB,KACxB,IAAIhE,EAAO,EACPC,EAAQ+E,EAAIpD,OAAS,EACzB,KAAO5B,GAAQC,GAAO,CACpB,MAAMiF,EAAW,MAAYlF,EAAOC,GAAS,GACvCkF,EAAMH,EAAIE,GACVE,EAAWD,EAAInB,MACrB,GAAIoB,GAAYpB,EAAO,CACrB,GAAIA,EAAQoB,EAAWD,EAAI1G,IACzB,OAAOyG,EAETlF,EAAOkF,EAAW,CACpB,MACEjF,EAAQiF,EAAW,CAEvB,CACA,OAAO,MAaqBG,CAAYL,EAAKD,EAAGf,MAAW,EASvDsB,EAAwBhB,IAC5BA,EAAGJ,QAAQf,SAAQoC,IAMjB,IAAIxG,EAAGyG,EACP,IANAD,EAAKE,MAAK,CAACC,EAAGC,IAAMD,EAAE1B,MAAQ2B,EAAE3B,QAM3BjF,EAAI,EAAGyG,EAAI,EAAGzG,EAAIwG,EAAK3D,OAAQ7C,IAAK,CACvC,MAAMiB,EAAOuF,EAAKC,EAAI,GAChBvF,EAAQsF,EAAKxG,GACfiB,EAAKgE,MAAQhE,EAAKvB,KAAOwB,EAAM+D,MACjChE,EAAKvB,IAAM,KAASuB,EAAKvB,IAAKwB,EAAM+D,MAAQ/D,EAAMxB,IAAMuB,EAAKgE,QAEzDwB,EAAIzG,IACNwG,EAAKC,GAAKvF,GAEZuF,IAEJ,CACAD,EAAK3D,OAAS4D,CAAC,GACf,EAOEI,EAAkBC,IACtB,MAAMC,EAAS,IAAI7B,EACnB,IAAK,IAAI8B,EAAO,EAAGA,EAAOF,EAAIjE,OAAQmE,IACpCF,EAAIE,GAAM7B,QAAQf,SAAQ,CAAC6C,EAAUf,KACnC,IAAKa,EAAO5B,QAAQ+B,IAAIhB,GAAS,CAM/B,MAAMM,EAAOS,EAASE,QACtB,IAAK,IAAInH,EAAIgH,EAAO,EAAGhH,EAAI8G,EAAIjE,OAAQ7C,IACrCoH,EAAA,GAAeZ,EAAMM,EAAI9G,GAAGmF,QAAQS,IAAIM,IAAW,IAErDa,EAAO5B,QAAQ3B,IAAI0C,EAAQM,EAC7B,KAIJ,OADAD,EAAsBQ,GACfA,GAYHM,EAAiB,CAAC9B,EAAIW,EAAQjB,EAAOpC,KACzCU,EAAA,GAAmBgC,EAAGJ,QAASe,GAAQ,IAAM,KAAIjD,KAAK,IAAI+B,EAAWC,EAAOpC,GAAQ,EAGhFyE,EAAkB,IAAM,IAAIpC,EAS5BqC,EAAiCC,IACrC,MAAMjC,EAAK+B,IAuBX,OAtBAE,EAAGrC,QAAQf,SAAQ,CAACsB,EAASQ,KAI3B,MAAMuB,EAAU,GAChB,IAAK,IAAIzH,EAAI,EAAGA,EAAI0F,EAAQ7C,OAAQ7C,IAAK,CACvC,MAAM0H,EAAShC,EAAQ1F,GACvB,GAAI0H,EAAOC,QAAS,CAClB,MAAM1C,EAAQyC,EAAO1B,GAAGf,MACxB,IAAIvF,EAAMgI,EAAO7E,OACjB,GAAI7C,EAAI,EAAI0F,EAAQ7C,OAClB,IAAK,IAAI0B,EAAOmB,EAAQ1F,EAAI,GAAIA,EAAI,EAAI0F,EAAQ7C,QAAU0B,EAAKoD,QAASpD,EAAOmB,EAAc,KAAJ1F,GACvFN,GAAO6E,EAAK1B,OAGhB4E,EAAQxE,KAAK,IAAI+B,EAAWC,EAAOvF,GACrC,CACF,CACI+H,EAAQ5E,OAAS,GACnB0C,EAAGJ,QAAQ3B,IAAI0C,EAAQuB,EACzB,IAEKlC,GAUHqC,EAAiB,CAACC,EAAStC,KAC/BuC,EAAA,GAAsBD,EAAQE,YAAaxC,EAAGJ,QAAQ6C,MACtDzC,EAAGJ,QAAQf,SAAQ,CAACqD,EAASvB,KAC3B2B,EAAQI,gBACRH,EAAA,GAAsBD,EAAQE,YAAa7B,GAC3C,MAAMxG,EAAM+H,EAAQ5E,OACpBiF,EAAA,GAAsBD,EAAQE,YAAarI,GAC3C,IAAK,IAAIM,EAAI,EAAGA,EAAIN,EAAKM,IAAK,CAC5B,MAAMkI,EAAOT,EAAQzH,GACrB6H,EAAQM,aAAaD,EAAKjD,OAC1B4C,EAAQO,WAAWF,EAAKxI,IAC1B,IACA,EAUE2I,GAAgBC,IACpB,MAAM/C,EAAK,IAAIL,EACTqD,EAAaC,EAAA,GAAqBF,EAAQG,aAChD,IAAK,IAAIzI,EAAI,EAAGA,EAAIuI,EAAYvI,IAAK,CACnCsI,EAAQL,gBACR,MAAM/B,EAASsC,EAAA,GAAqBF,EAAQG,aACtCC,EAAkBF,EAAA,GAAqBF,EAAQG,aACrD,GAAIC,EAAkB,EAAG,CACvB,MAAMC,EAAUpF,EAAA,GAAmBgC,EAAGJ,QAASe,GAAQ,IAAM,KAC7D,IAAK,IAAIlG,EAAI,EAAGA,EAAI0I,EAAiB1I,IACnC2I,EAAQ1F,KAAK,IAAI+B,EAAWsD,EAAQM,cAAeN,EAAQO,aAE/D,CACF,CACA,OAAOtD,GAgBHuD,GAAwB,CAACR,EAAShD,EAAaK,KACnD,MAAMoD,EAAc,IAAI7D,EAClBqD,EAAaC,EAAA,GAAqBF,EAAQG,aAChD,IAAK,IAAIzI,EAAI,EAAGA,EAAIuI,EAAYvI,IAAK,CACnCsI,EAAQL,gBACR,MAAM/B,EAASsC,EAAA,GAAqBF,EAAQG,aACtCC,EAAkBF,EAAA,GAAqBF,EAAQG,aAC/C/C,EAAUC,EAAMR,QAAQS,IAAIM,IAAW,GACvC8C,EAAQC,GAAStD,EAAOO,GAC9B,IAAK,IAAIlG,EAAI,EAAGA,EAAI0I,EAAiB1I,IAAK,CACxC,MAAMiF,EAAQqD,EAAQM,cAChBM,EAAWjE,EAAQqD,EAAQO,YACjC,GAAI5D,EAAQ+D,EAAO,CACbA,EAAQE,GACV7B,EAAe0B,EAAa7C,EAAQ8C,EAAOE,EAAWF,GAExD,IAAIG,EAAQC,GAAY1D,EAAST,GAM7ByC,EAAShC,EAAQyD,GAMrB,KAJKzB,EAAOC,SAAWD,EAAO1B,GAAGf,MAAQA,IACvCS,EAAQ2D,OAAOF,EAAQ,EAAG,EAAGG,GAAUhE,EAAaoC,EAAQzC,EAAQyC,EAAO1B,GAAGf,QAC9EkE,KAEKA,EAAQzD,EAAQ7C,SAErB6E,EAAShC,EAAQyD,KACbzB,EAAO1B,GAAGf,MAAQiE,IACfxB,EAAOC,UACNuB,EAAWxB,EAAO1B,GAAGf,MAAQyC,EAAO7E,QACtC6C,EAAQ2D,OAAOF,EAAO,EAAGG,GAAUhE,EAAaoC,EAAQwB,EAAWxB,EAAO1B,GAAGf,QAE/EyC,EAAO6B,OAAOjE,GAMtB,MACE+B,EAAe0B,EAAa7C,EAAQjB,EAAOiE,EAAWjE,EAE1D,CACF,CACA,GAAI8D,EAAY5D,QAAQ6C,KAAO,EAAG,CAChC,MAAMzC,EAAK,IAAIiE,GAGf,OAFA1B,EAAA,GAAsBvC,EAAGwC,YAAa,GACtCH,EAAerC,EAAIwD,GACZxD,EAAGkE,cACZ,CACA,OAAO,MAOHC,GAAsB,EAiB5B,MAAMC,WAAY,IAIhB3I,aAAa,KAAE4I,EAAO,IAAe,aAAEC,EAAe,KAAI,GAAEC,GAAK,EAAI,SAAEC,EAAW,MAAM,GAAI,KAAEC,EAAO,KAAI,SAAEC,GAAW,EAAK,WAAEC,GAAa,GAAS,CAAC,GAClJnF,QACA5D,KAAK2I,GAAKA,EACV3I,KAAK4I,SAAWA,EAChB5I,KAAKgJ,SAAWT,KAChBvI,KAAKyI,KAAOA,EACZzI,KAAK0I,aAAeA,EAIpB1I,KAAKiJ,MAAQ,IAAIhF,IACjBjE,KAAKwE,MAAQ,IAAI0E,GAIjBlJ,KAAKmJ,aAAe,KAIpBnJ,KAAKoJ,qBAAuB,GAI5BpJ,KAAKqJ,QAAU,IAAIC,IAKnBtJ,KAAKuJ,MAAQ,KACbvJ,KAAK+I,WAAaA,EAClB/I,KAAK8I,SAAWA,EAChB9I,KAAK6I,KAAOA,EAOZ7I,KAAKwJ,UAAW,EAQhBxJ,KAAKyJ,UAAW,EAIhBzJ,KAAK0J,WAAa,GAAeC,IAC/B3J,KAAK4J,GAAG,QAAQ,KACd5J,KAAKwJ,UAAW,EAChBG,EAAQ3J,KAAK,GACb,IAEJ,MAAM6J,EAAuB,IAAM,GAAeF,IAIhD,MAAMG,EAAgBL,SACH5H,IAAb4H,IAAuC,IAAbA,IAC5BzJ,KAAK+J,IAAI,OAAQD,GACjBH,IACF,EAEF3J,KAAK4J,GAAG,OAAQE,EAAa,IAE/B9J,KAAK4J,GAAG,QAAQH,KACG,IAAbA,GAAsBzJ,KAAKyJ,WAC7BzJ,KAAKgK,WAAaH,KAEpB7J,KAAKyJ,cAAwB5H,IAAb4H,IAAuC,IAAbA,EACrCzJ,KAAKwJ,UACRxJ,KAAKiK,KAAK,OAAQ,GACpB,IAOFjK,KAAKgK,WAAaH,GACpB,CASAK,OACE,MAAMnD,EAAO/G,KAAKuJ,MACL,OAATxC,GAAkB/G,KAAK+I,YACzBoB,GAA6BpD,EAAW,OAAE9G,KAAKkE,IAC7CA,EAAYiG,cAAcC,IAAIrK,KAAK,GAClC,MAAM,GAEXA,KAAK+I,YAAa,CACpB,CAEAuB,aACE,OAAOtK,KAAKqJ,OACd,CAEAkB,iBACE,OAAO,IAAIjB,IAAIkB,MAAMC,KAAKzK,KAAKqJ,SAASjH,KAAInC,GAAOA,EAAIwI,OACzD,CAaA0B,SAAU1K,EAAGiL,EAAS,MACpBP,GAASnK,KAAMP,EAAGiL,EACpB,CA4BAjG,IAAKkG,EAAMC,EAAkBC,IAC3B,MAAMC,EAAO1I,EAAA,GAAmBpC,KAAKiJ,MAAO0B,GAAM,KAEhD,MAAMI,EAAI,IAAIH,EAEd,OADAG,EAAEC,WAAWhL,KAAM,MACZ+K,KAEHE,EAASH,EAAKjL,YACpB,GAAI+K,IAAoBC,IAAgBI,IAAWL,EAAiB,CAClE,GAAIK,IAAWJ,GAAc,CAE3B,MAAME,EAAI,IAAIH,EACdG,EAAEG,KAAOJ,EAAKI,KACdJ,EAAKI,KAAKjI,SAAgCkI,IACxC,KAAa,OAANA,EAAYA,EAAIA,EAAErL,KAEvBqL,EAAEC,OAASL,CACb,IAEFA,EAAEM,OAASP,EAAKO,OAChB,IAAK,IAAIF,EAAIJ,EAAEM,OAAc,OAANF,EAAYA,EAAIA,EAAEpL,MACvCoL,EAAEC,OAASL,EAKb,OAHAA,EAAEO,QAAUR,EAAKQ,QACjBtL,KAAKiJ,MAAM5G,IAAIsI,EAAMI,GACrBA,EAAEC,WAAWhL,KAAM,MACZ+K,CACT,CACE,MAAM,IAAIQ,MAAM,sBAAsBZ,0DAE1C,CACA,OAAOG,CACT,CASAU,SAAUb,EAAO,IAEf,OAAO3K,KAAKyE,IAAIkG,EAAMc,GACxB,CAQAC,QAASf,EAAO,IAEd,OAAO3K,KAAKyE,IAAIkG,EAAMgB,GACxB,CASAC,OAAQjB,EAAO,IAEb,OAAO3K,KAAKyE,IAAIkG,EAAMkB,GACxB,CAQAC,eAAgBnB,EAAO,IAErB,OAAO3K,KAAKyE,IAAIkG,EAAMoB,GACxB,CAUAC,SAIE,MAAM/L,EAAM,CAAC,EAMb,OAJAD,KAAKiJ,MAAMhG,SAAQ,CAACV,EAAOC,KACzBvC,EAAIuC,GAAOD,EAAMyJ,QAAQ,IAGpB/L,CACT,CAKAgM,UACEhG,EAAA,GAAWjG,KAAKqJ,SAASpG,SAAQiJ,GAAUA,EAAOD,YAClD,MAAMlF,EAAO/G,KAAKuJ,MAClB,GAAa,OAATxC,EAAe,CACjB/G,KAAKuJ,MAAQ,KACb,MAAM4C,EAAqCpF,EAAY,QACvDoF,EAAQlM,IAAM,IAAIuI,GAAI,CAAEC,KAAMzI,KAAKyI,QAAS0D,EAAQC,KAAMrD,YAAY,IACtEoD,EAAQlM,IAAIsJ,MAAQxC,EACpBoD,GAA4B,EAAOiB,OAAOnL,KAAKkE,IAC7C,MAAMlE,EAAMkM,EAAQlM,IACf8G,EAAKP,SACRrC,EAAYkI,aAAahC,IAAIpK,GAE/BkE,EAAYmI,eAAejC,IAAIrK,KAAK,GACnC,MAAM,EACX,CACAA,KAAKiK,KAAK,YAAa,EAAC,IACxBjK,KAAKiK,KAAK,UAAW,CAACjK,OACtB4D,MAAMqI,SACR,CAMArC,GAAI2C,EAAW9M,GACbmE,MAAMgG,GAAG2C,EAAW9M,EACtB,CAMAsK,IAAKwC,EAAW9M,GACdmE,MAAMmG,IAAIwC,EAAW9M,EACvB,EAGF,MAAM+M,GAIJ3M,YAAasH,GACXnH,KAAKsH,YAAcH,CACrB,CAEAL,gBAEA,CAKAW,cACE,OAAOJ,EAAA,GAAqBrH,KAAKsH,YACnC,CAKAI,YACE,OAAOL,EAAA,GAAqBrH,KAAKsH,YACnC,EAGF,MAAMmF,WAAwBD,GAI5BE,aACE,OAAOC,GAAStF,EAAA,GAAqBrH,KAAKsH,aAAcD,EAAA,GAAqBrH,KAAKsH,aACpF,CAKAsF,cACE,OAAOD,GAAStF,EAAA,GAAqBrH,KAAKsH,aAAcD,EAAA,GAAqBrH,KAAKsH,aACpF,CAMAuF,aACE,OAAOxF,EAAA,GAAqBrH,KAAKsH,YACnC,CAKAwF,WACE,OAAOzF,EAAA,GAAmBrH,KAAKsH,YACjC,CAKAyF,aACE,OAAO1F,EAAA,GAAuBrH,KAAKsH,YACrC,CAKA0F,iBACE,OAAkD,IAA3C3F,EAAA,GAAqBrH,KAAKsH,YACnC,CAKA2F,cACE,OAAO5F,EAAA,GAAqBrH,KAAKsH,YACnC,CAOA4F,UACE,OAAO7F,EAAA,GAAqBrH,KAAKsH,YACnC,CAKA6F,UACE,OAAO9F,EAAA,GAAiBrH,KAAKsH,YAC/B,CAKA8F,UACE,OAAOC,EAAA,GAAsBhG,EAAA,GAA2BrH,KAAKsH,aAC/D,CAOAgG,WACE,OAAO3K,KAAK4K,MAAMlG,EAAA,GAAuBrH,KAAKsH,aAChD,CAKAkG,UACE,OAAOnG,EAAA,GAAuBrH,KAAKsH,YACrC,EAGF,MAAMmG,GAIJ5N,YAAasH,GAIXnH,KAAK0N,UAAY,EACjB1N,KAAKsH,YAAcH,CACrB,CAEAL,gBACE9G,KAAK0N,UAAY,CACnB,CAKAjG,cAEE,OADAzH,KAAK0N,WAAarG,EAAA,GAAqBrH,KAAKsH,aACrCtH,KAAK0N,SACd,CAKAhG,YACE,MAAMiG,EAAOtG,EAAA,GAAqBrH,KAAKsH,aAAe,EAEtD,OADAtH,KAAK0N,WAAaC,EACXA,CACT,EAGF,MAAMC,WAAwBH,GAI5B5N,YAAasH,GACXvD,MAAMuD,GAONnH,KAAK6N,KAAO,GACZxG,EAAA,GAAqBF,GACrBnH,KAAK8N,gBAAkB,IAAIzG,EAAA,GAA8BA,EAAA,GAA2BF,IACpFnH,KAAK+N,cAAgB,IAAI1G,EAAA,GAA2BA,EAAA,GAA2BF,IAC/EnH,KAAKgO,iBAAmB,IAAI3G,EAAA,GAA8BA,EAAA,GAA2BF,IACrFnH,KAAKiO,kBAAoB,IAAI5G,EAAA,GAA8BA,EAAA,GAA2BF,IACtFnH,KAAKkO,YAAc,IAAI7G,EAAA,GAAoBA,EAAA,GAA2BF,GAAUE,EAAA,IAChFrH,KAAKmO,cAAgB,IAAI9G,EAAA,GAAuBA,EAAA,GAA2BF,IAC3EnH,KAAKoO,kBAAoB,IAAI/G,EAAA,GAAoBA,EAAA,GAA2BF,GAAUE,EAAA,IACtFrH,KAAKqO,eAAiB,IAAIhH,EAAA,GAA2BA,EAAA,GAA2BF,IAChFnH,KAAKsO,WAAa,IAAIjH,EAAA,GAA2BA,EAAA,GAA2BF,GAC9E,CAKAuF,aACE,OAAO,IAAI6B,GAAGvO,KAAK+N,cAAcS,OAAQxO,KAAKgO,iBAAiBQ,OACjE,CAKA5B,cACE,OAAO,IAAI2B,GAAGvO,KAAK+N,cAAcS,OAAQxO,KAAKiO,kBAAkBO,OAClE,CAMA3B,aACE,OAAO7M,KAAK+N,cAAcS,MAC5B,CAKA1B,WACE,OAA8B9M,KAAKkO,YAAYM,MACjD,CAKAzB,aACE,OAAO/M,KAAKmO,cAAcK,MAC5B,CAKAxB,iBACE,OAAyC,IAAlChN,KAAKoO,kBAAkBI,MAChC,CAKAvB,cACE,OAAOjN,KAAKqO,eAAeG,MAC7B,CAOAtB,UACE,OAAOlN,KAAKsO,WAAWE,MACzB,CAKArB,UACE,OAAO9F,EAAA,GAAiBrH,KAAKsH,YAC/B,CAKA8F,UACE,OAAO/F,EAAA,GAA2BrH,KAAKsH,YACzC,CASAgG,WACE,OAAOjG,EAAA,GAAiBrH,KAAKsH,YAC/B,CAKAkG,UACE,MAAMiB,EAAWzO,KAAK8N,gBAAgBU,OACtC,GAAIC,EAAWzO,KAAK6N,KAAKnM,OACvB,OAAO1B,KAAK6N,KAAKY,GACZ,CACL,MAAMjM,EAAMxC,KAAKmO,cAAcK,OAE/B,OADAxO,KAAK6N,KAAK/L,KAAKU,GACRA,CACT,CACF,EAGF,MAAMkM,GACJ7O,cACEG,KAAK4G,YAAcD,EAAA,IACrB,CAEA2B,eACE,OAAO3B,EAAA,GAAsB3G,KAAK4G,YACpC,CAEAE,gBAEA,CAKAE,aAAclD,GACZ6C,EAAA,GAAsB3G,KAAK4G,YAAa9C,EAC1C,CAKAmD,WAAY1I,GACVoI,EAAA,GAAsB3G,KAAK4G,YAAarI,EAC1C,EAGF,MAAMoQ,WAAwBD,GAI5BE,YAAa/J,GACX8B,EAAA,GAAsB3G,KAAK4G,YAAa/B,EAAGE,QAC3C4B,EAAA,GAAsB3G,KAAK4G,YAAa/B,EAAGf,MAC7C,CAKA+K,aAAchK,GACZ8B,EAAA,GAAsB3G,KAAK4G,YAAa/B,EAAGE,QAC3C4B,EAAA,GAAsB3G,KAAK4G,YAAa/B,EAAGf,MAC7C,CAMAgL,YAAa/J,GACX4B,EAAA,GAAsB3G,KAAK4G,YAAa7B,EAC1C,CAKAgK,UAAWC,GACTrI,EAAA,GAAoB3G,KAAK4G,YAAaoI,EACxC,CAKAC,YAAaC,GACXvI,EAAA,GAAwB3G,KAAK4G,YAAasI,EAC5C,CAKAC,gBAAiBC,GACfzI,EAAA,GAAsB3G,KAAK4G,YAAawI,EAAS,EAAI,EACvD,CAKAC,aAAcL,GACZrI,EAAA,GAAsB3G,KAAK4G,YAAaoI,EAC1C,CAOAM,SAAU/Q,GACRoI,EAAA,GAAsB3G,KAAK4G,YAAarI,EAC1C,CAKAgR,SAAUC,GACR7I,EAAA,GAAkB3G,KAAK4G,YAAa4I,EACtC,CAKAC,SAAUjR,GACRmI,EAAA,GAA4B3G,KAAK4G,YAAapI,EAChD,CAKAkR,UAAWC,GACThJ,EAAA,GAAwB3G,KAAK4G,YAAajE,KAAKC,UAAU+M,GAC3D,CAKAC,SAAUpN,GACRmE,EAAA,GAAwB3G,KAAK4G,YAAapE,EAC5C,EAGF,MAAMqN,GACJhQ,cACEG,KAAK4G,YAAcD,EAAA,KACnB3G,KAAK0N,UAAY,CACnB,CAEApF,eACE,OAAO3B,EAAA,GAAsB3G,KAAK4G,YACpC,CAEAE,gBACE9G,KAAK0N,UAAY,CACnB,CAKA1G,aAAclD,GACZ,MAAM6J,EAAO7J,EAAQ9D,KAAK0N,UAC1B1N,KAAK0N,UAAY5J,EACjB6C,EAAA,GAAsB3G,KAAK4G,YAAa+G,EAC1C,CAKA1G,WAAY1I,GACE,IAARA,GACFuR,EAAA,KAEFnJ,EAAA,GAAsB3G,KAAK4G,YAAarI,EAAM,GAC9CyB,KAAK0N,WAAanP,CACpB,EAGF,MAAM8J,WAAwBwH,GAC5BhQ,cACE+D,QAIA5D,KAAK+P,OAAS,IAAI9L,IAOlBjE,KAAKyO,SAAW,EAChBzO,KAAKgQ,gBAAkB,IAAIrJ,EAAA,GAC3B3G,KAAKiQ,cAAgB,IAAItJ,EAAA,GACzB3G,KAAKkQ,iBAAmB,IAAIvJ,EAAA,GAC5B3G,KAAKmQ,kBAAoB,IAAIxJ,EAAA,GAC7B3G,KAAKoQ,YAAc,IAAIzJ,EAAA,GAAoBA,EAAA,IAC3C3G,KAAKqQ,cAAgB,IAAI1J,EAAA,GACzB3G,KAAKsQ,kBAAoB,IAAI3J,EAAA,GAAoBA,EAAA,IACjD3G,KAAKuQ,eAAiB,IAAI5J,EAAA,GAC1B3G,KAAKwQ,WAAa,IAAI7J,EAAA,EACxB,CAEA2B,eACE,MAAM5B,EAAUC,EAAA,KAahB,OAZAA,EAAA,GAAsBD,EAAS,GAC/BC,EAAA,GAA4BD,EAAS1G,KAAKgQ,gBAAgB1H,gBAC1D3B,EAAA,GAA4BD,EAAS1G,KAAKiQ,cAAc3H,gBACxD3B,EAAA,GAA4BD,EAAS1G,KAAKkQ,iBAAiB5H,gBAC3D3B,EAAA,GAA4BD,EAAS1G,KAAKmQ,kBAAkB7H,gBAC5D3B,EAAA,GAA4BD,EAASC,EAAA,GAAsB3G,KAAKoQ,cAChEzJ,EAAA,GAA4BD,EAAS1G,KAAKqQ,cAAc/H,gBACxD3B,EAAA,GAA4BD,EAASC,EAAA,GAAsB3G,KAAKsQ,oBAChE3J,EAAA,GAA4BD,EAAS1G,KAAKuQ,eAAejI,gBACzD3B,EAAA,GAA4BD,EAAS1G,KAAKwQ,WAAWlI,gBAErD3B,EAAA,GAAyBD,EAASC,EAAA,GAAsB3G,KAAK4G,cACtDD,EAAA,GAAsBD,EAC/B,CAKAkI,YAAa/J,GACX7E,KAAKiQ,cAAcQ,MAAM5L,EAAGE,QAC5B/E,KAAKkQ,iBAAiBO,MAAM5L,EAAGf,MACjC,CAKA+K,aAAchK,GACZ7E,KAAKiQ,cAAcQ,MAAM5L,EAAGE,QAC5B/E,KAAKmQ,kBAAkBM,MAAM5L,EAAGf,MAClC,CAKAgL,YAAa/J,GACX/E,KAAKiQ,cAAcQ,MAAM1L,EAC3B,CAKAgK,UAAWC,GACThP,KAAKoQ,YAAYK,MAAMzB,EACzB,CAKAC,YAAaC,GACXlP,KAAKqQ,cAAcI,MAAMvB,EAC3B,CAKAC,gBAAiBC,GACfpP,KAAKsQ,kBAAkBG,MAAMrB,EAAS,EAAI,EAC5C,CAKAC,aAAcL,GACZhP,KAAKuQ,eAAeE,MAAMzB,EAC5B,CAOAM,SAAU/Q,GACRyB,KAAKwQ,WAAWC,MAAMlS,EACxB,CAKAgR,SAAUC,GACR7I,EAAA,GAAkB3G,KAAK4G,YAAa4I,EACtC,CAKAC,SAAUjR,GACRmI,EAAA,GAA4B3G,KAAK4G,YAAapI,EAChD,CASAkR,UAAWC,GACThJ,EAAA,GAAkB3G,KAAK4G,YAAa+I,EACtC,CAUAC,SAAUpN,GACR,MAAMsB,EAAQ9D,KAAK+P,OAAOtL,IAAIjC,QAChBX,IAAViC,GAeF9D,KAAKgQ,gBAAgBS,MAAMzQ,KAAKyO,YAChCzO,KAAKqQ,cAAcI,MAAMjO,IAEzBxC,KAAKgQ,gBAAgBS,MAAM3M,EAE/B,EAWF,MAwBM4M,GAAsB,CAAChK,EAASlC,EAAOmM,KAE3C,MAAMC,EAAK,IAAI3M,IACf0M,EAAI1N,SAAQ,CAACa,EAAOiB,KAEd+C,GAAStD,EAAOO,GAAUjB,GAC5B8M,EAAGvO,IAAI0C,EAAQjB,EACjB,IAEF+M,GAAerM,GAAOvB,SAAQ,CAACa,EAAOiB,KAC/B4L,EAAI5K,IAAIhB,IACX6L,EAAGvO,IAAI0C,EAAQ,EACjB,IAGF4B,EAAA,GAAsBD,EAAQE,YAAagK,EAAG/J,MAG9C2D,MAAMC,KAAKmG,EAAGE,WAAWvL,MAAK,CAACC,EAAGC,IAAMA,EAAE,GAAKD,EAAE,KAAIvC,SAAQ,EAAE8B,EAAQjB,MA1CpD,EAAC4C,EAASnC,EAASQ,EAAQjB,KAE9CA,EAAQ,KAASA,EAAOS,EAAQ,GAAGM,GAAGf,OACtC,MAAMiN,EAAkB9I,GAAY1D,EAAST,GAE7C6C,EAAA,GAAsBD,EAAQE,YAAarC,EAAQ7C,OAASqP,GAC5DrK,EAAQoI,YAAY/J,GACpB4B,EAAA,GAAsBD,EAAQE,YAAa9C,GAC3C,MAAMkN,EAAczM,EAAQwM,GAE5BC,EAAYP,MAAM/J,EAAS5C,EAAQkN,EAAYnM,GAAGf,OAClD,IAAK,IAAIjF,EAAIkS,EAAkB,EAAGlS,EAAI0F,EAAQ7C,OAAQ7C,IACpD0F,EAAQ1F,GAAG4R,MAAM/J,EAAS,EAC5B,EA+BEuK,CAAavK,EAASlC,EAAMR,QAAQS,IAAIM,GAASA,EAAQjB,EAAM,GAC/D,EAyREoN,GAAe,CAAC/J,EAASzD,EAAMyN,EAAmBC,EAAgB,IAAIxD,GAAgBzG,KAC1FgD,GAASzG,GAAMS,IAEbA,EAAYkN,OAAQ,EACpB,IAAIC,GAAQ,EACZ,MAAMrR,EAAMkE,EAAYlE,IAClBuE,EAAQvE,EAAIuE,MAEZ6B,EAtRoB,EAACc,EAASlH,KAItC,MAAMsR,EAAanP,EAAA,KACboP,EAAoBnK,EAAA,GAAqBF,EAAQG,aACvD,IAAK,IAAIzI,EAAI,EAAGA,EAAI2S,EAAmB3S,IAAK,CAC1C,MAAM4S,EAAkBpK,EAAA,GAAqBF,EAAQG,aAI/CoK,EAAO,IAAIlH,MAAMiH,GACjB1M,EAASoC,EAAQ0F,aACvB,IAAI/I,EAAQuD,EAAA,GAAqBF,EAAQG,aAEzCiK,EAAWlP,IAAI0C,EAAQ,CAAElG,EAAG,EAAG6S,SAC/B,IAAK,IAAI7S,EAAI,EAAGA,EAAI4S,EAAiB5S,IAAK,CACxC,MAAMmQ,EAAO7H,EAAQ2F,WACrB,OAAQ,KAAekC,GACrB,KAAK,EAAG,CACN,MAAMzQ,EAAM4I,EAAQ+F,UACpBwE,EAAK7S,GAAK,IAAI8S,GAAGhF,GAAS5H,EAAQjB,GAAQvF,GAC1CuF,GAASvF,EACT,KACF,CACA,KAAK,GAAI,CAEP,MAAMA,EAAM8I,EAAA,GAAqBF,EAAQG,aACzCoK,EAAK7S,GAAK,IAAI+S,GAAKjF,GAAS5H,EAAQjB,GAAQvF,GAC5CuF,GAASvF,EACT,KACF,CACA,QAAS,CAMP,MAAMsT,EAA8D,IAAxC7C,GAAQ,KAAc,OAK5CzI,EAAS,IAAIuL,GACjBnF,GAAS5H,EAAQjB,GACjB,MACCkL,EAAO,QAAiB,KAAc7H,EAAQuF,aAAe,KAC9D,MACCsC,EAAO,QAAiB,KAAc7H,EAAQyF,cAAgB,KAC/DiF,EAAsB1K,EAAQ6F,iBAAmB/M,EAAIwE,IAAI0C,EAAQ4F,cAAgB5F,EAAQuF,aAAgB,KACzGmF,IAAuB7C,EAAO,QAAiB,KAAc7H,EAAQ4F,aAAe,KACpFgF,GAAgB5K,EAAS6H,IA2B3B0C,EAAK7S,GAAK0H,EACVzC,GAASyC,EAAO7E,MAClB,EAEJ,CAEF,CACA,OAAO6P,GAiMMS,CAAsBZ,EAAenR,GAK1CgS,EAxKe,EAAC9N,EAAaK,EAAO0N,KAI5C,MAAMC,EAAQ,GAEd,IAAIC,EAAuB5H,MAAMC,KAAKyH,EAAkBrE,QAAQtI,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IACnF,GAAoC,IAAhC2M,EAAqB1Q,OACvB,OAAO,KAET,MAAM2Q,EAAsB,KAC1B,GAAoC,IAAhCD,EAAqB1Q,OACvB,OAAO,KAET,IAAI4Q,EAAmEJ,EAAkBzN,IAAI2N,EAAqBA,EAAqB1Q,OAAS,IAChJ,KAAO4Q,EAAkBZ,KAAKhQ,SAAW4Q,EAAkBzT,GAAG,CAE5D,GADAuT,EAAqBG,QACjBH,EAAqB1Q,OAAS,GAGhC,OAAO,KAFP4Q,EAAmEJ,EAAkBzN,IAAI2N,EAAqBA,EAAqB1Q,OAAS,GAIhJ,CACA,OAAO4Q,GAET,IAAIE,EAAmBH,IACvB,GAAyB,OAArBG,GAA8C,IAAjBL,EAAMzQ,OACrC,OAAO,KAMT,MAAMuQ,EAAc,IAAI/I,GAClBuJ,EAAY,IAAIxO,IAKhByO,EAAkB,CAAC3N,EAAQjB,KAC/B,MAAM6O,EAASF,EAAUhO,IAAIM,IACf,MAAV4N,GAAkBA,EAAS7O,IAC7B2O,EAAUpQ,IAAI0C,EAAQjB,EACxB,EAKF,IAAI8O,EAA+B,EAAmBlB,KAAwB,EAAmB7S,KAEjG,MAAMgJ,EAAQ,IAAI5D,IAEZ4O,EAAmB,KACvB,IAAK,MAAM9L,KAAQoL,EAAO,CACxB,MAAMpN,EAASgC,EAAKlC,GAAGE,OACjB+N,EAAoBZ,EAAkBzN,IAAIM,GAC5C+N,GAEFA,EAAkBjU,IAClBoT,EAAYjO,QAAQ3B,IAAI0C,EAAQ+N,EAAkBpB,KAAK1L,MAAM8M,EAAkBjU,IAC/EqT,EAAkB9J,OAAOrD,GACzB+N,EAAkBjU,EAAI,EACtBiU,EAAkBpB,KAAO,IAGzBO,EAAYjO,QAAQ3B,IAAI0C,EAAQ,CAACgC,IAGnCqL,EAAuBA,EAAqBW,QAAOzT,GAAKA,IAAMyF,GAChE,CACAoN,EAAMzQ,OAAS,CAAC,EAIlB,OAAa,CACX,GAAIkR,EAAU/S,cAAgB+R,GAAM,CAClC,MACMoB,EADa5Q,EAAA,GAAmByF,EAAO+K,EAAU/N,GAAGE,QAAQ,IAAM+C,GAAStD,EAAOoO,EAAU/N,GAAGE,UACzE6N,EAAU/N,GAAGf,MACzC,GAAIkP,EAAS,EAEXb,EAAMrQ,KAAK8Q,GACXF,EAAgBE,EAAU/N,GAAGE,OAAQ6N,EAAU/N,GAAGf,MAAQ,GAE1D+O,QACK,CACL,MAAMI,EAAUL,EAAUM,WAAW/O,EAAaK,GAClD,GAAgB,OAAZyO,EAAkB,CACpBd,EAAMrQ,KAAK8Q,GAKX,MAAMO,EAAajB,EAAkBzN,IAA0B,IAAc,CAAEiN,KAAM,GAAI7S,EAAG,GAC5F,GAAIsU,EAAWzB,KAAKhQ,SAAWyR,EAAWtU,EAInC,CACL+T,EAAYO,EAAWzB,KAAKyB,EAAWtU,KACvC,QACF,CALE6T,EAAsC,EAAW5K,GAAStD,EAAOyO,IACjEJ,GAKJ,MAAsB,IAAXG,GAAgBA,EAASJ,EAAUlR,UAE5CkR,EAAUQ,UAAUjP,EAAa6O,GACjCnL,EAAMxF,IAAIuQ,EAAU/N,GAAGE,OAAQ6N,EAAU/N,GAAGf,MAAQ8O,EAAUlR,QAElE,CACF,CAEA,GAAIyQ,EAAMzQ,OAAS,EACjBkR,EAAoCT,EAAMI,WACrC,GAAyB,OAArBC,GAA6BA,EAAiB3T,EAAI2T,EAAiBd,KAAKhQ,OACjFkR,EAAoCJ,EAAiBd,KAAKc,EAAiB3T,SACtE,CAEL,GADA2T,EAAmBH,IACM,OAArBG,EAEF,MAEAI,EAAoCJ,EAAiBd,KAAKc,EAAiB3T,IAE/E,CACF,CACA,GAAIoT,EAAYjO,QAAQ6C,KAAO,EAAG,CAChC,MAAMH,EAAU,IAAI2B,GAKpB,OAJAqI,GAAoBhK,EAASuL,EAAa,IAAIhO,KAG9C0C,EAAA,GAAsBD,EAAQE,YAAa,GACpC,CAAEqM,QAASR,EAAWY,OAAQ3M,EAAQ4B,eAC/C,CACA,OAAO,MAqCegL,CAAiBnP,EAAaK,EAAO6B,GACnDkN,EAAU/O,EAAMgP,eACtB,GAAID,EAAS,CAEX,IAAK,MAAOxO,EAAQjB,KAAUyP,EAAQN,QACpC,GAAInP,EAAQgE,GAAStD,EAAOO,GAAS,CACnCuM,GAAQ,EACR,KACF,CAEF,GAAIW,EAAa,CAEf,IAAK,MAAOlN,EAAQjB,KAAUmO,EAAYgB,QAAS,CACjD,MAAMN,EAASY,EAAQN,QAAQxO,IAAIM,IACrB,MAAV4N,GAAkBA,EAAS7O,IAC7ByP,EAAQN,QAAQ5Q,IAAI0C,EAAQjB,EAEhC,CACAyP,EAAQF,OAASI,GAAe,CAACF,EAAQF,OAAQpB,EAAYoB,QAC/D,CACF,MACE7O,EAAMgP,eAAiBvB,EAIzB,MAAMyB,EAAS/L,GAAsByJ,EAAejN,EAAaK,GACjE,GAAIA,EAAMmP,UAAW,CAEnB,MAAMC,EAAkB,IAAIhG,GAAgBvG,EAAA,GAAuB7C,EAAMmP,YACzEtM,EAAA,GAAqBuM,EAAgBtM,aACrC,MAAMuM,EAAUlM,GAAsBiM,EAAiBzP,EAAaK,GAGlEA,EAAMmP,UAFJD,GAAUG,EAEMJ,GAAe,CAACC,EAAQG,IAKxBH,GAAUG,CAEhC,MAEErP,EAAMmP,UAAYD,EAOpB,GAAIpC,EAAO,CACT,MAAM+B,EAA8C7O,EAAoB,eAAE6O,OAC1E7O,EAAMgP,eAAiB,KACvBM,GAAc3P,EAAYlE,IAAKoT,EACjC,IACClC,GAAmB,GAalB4C,GAAa,CAAC5M,EAASzD,EAAMyN,IAAsBD,GAAa/J,EAASzD,EAAMyN,EAAmB,IAAI1E,GAAgBtF,IActH2M,GAAgB,CAACpQ,EAAM2P,EAAQlC,EAAmB6C,EAAWpG,MACjE,MAAMzG,EAAUE,EAAA,GAAuBgM,GACvCnC,GAAa/J,EAASzD,EAAMyN,EAAmB,IAAI6C,EAAS7M,GAAS,EAcjE8M,GAAc,CAACvQ,EAAM2P,EAAQlC,IAAsB2C,GAAcpQ,EAAM2P,EAAQlC,EAAmB1E,IA8BlGyH,GAAwB,CAACjU,EAAKkU,EAA2B,IAAIxV,WAAW,CAAC,IAAK+H,EAAU,IAAI2B,MAlBvE,EAAC3B,EAASzG,EAAKmU,EAAoB,IAAInQ,OAChEyM,GAAoBhK,EAASzG,EAAIuE,MAAO4P,GACxC3N,EAAeC,EAASN,EAA+BnG,EAAIuE,OAAO,EAkBlE6P,CAAmB3N,EAASzG,EADFqU,GAAkBH,IAE5C,MAAMI,EAAU,CAAC7N,EAAQ4B,gBAQzB,GANIrI,EAAIuE,MAAMmP,WACZY,EAAQzS,KAAK7B,EAAIuE,MAAMmP,WAErB1T,EAAIuE,MAAMgP,gBACZe,EAAQzS,KAAK0S,GAAavU,EAAIuE,MAAMgP,eAAeH,OAAQc,IAEzDI,EAAQ7S,OAAS,EAAG,CACtB,GAAIgF,EAAQ7G,cAAgB8O,GAC1B,OAAO8F,GAAaF,EAAQnS,KAAI,CAACiR,EAAQxU,IAAY,IAANA,EAAUwU,EAASqB,GAA0BrB,MACvF,GAAI3M,EAAQ7G,cAAgBwI,GACjC,OAAOoL,GAAec,EAE1B,CACA,OAAOA,EAAQ,EAAC,EAeZI,GAAsB,CAAC1U,EAAKkU,IAA6BD,GAAsBjU,EAAKkU,EAA0B,IAAIxF,IAUlHiG,GAAkBzN,IACtB,MAAMd,EAAK,IAAIpC,IACT4Q,EAAWxN,EAAA,GAAqBF,EAAQG,aAC9C,IAAK,IAAIzI,EAAI,EAAGA,EAAIgW,EAAUhW,IAAK,CACjC,MAAMkG,EAASsC,EAAA,GAAqBF,EAAQG,aACtCxD,EAAQuD,EAAA,GAAqBF,EAAQG,aAC3CjB,EAAGhE,IAAI0C,EAAQjB,EACjB,CACA,OAAOuC,GAqBHiO,GAAoBQ,GAAgBF,GAAgB,IAAIpI,GAAYnF,EAAA,GAAuByN,KAO3FC,GAAmB,CAACrO,EAASsO,KACjCrO,EAAA,GAAsBD,EAAQE,YAAaoO,EAAGnO,MAC9C2D,MAAMC,KAAKuK,EAAGlE,WAAWvL,MAAK,CAACC,EAAGC,IAAMA,EAAE,GAAKD,EAAE,KAAIvC,SAAQ,EAAE8B,EAAQjB,MACrE6C,EAAA,GAAsBD,EAAQE,YAAa7B,GAC3C4B,EAAA,GAAsBD,EAAQE,YAAa9C,EAAM,IAE5C4C,GAqCHuO,GAAoBhV,GAjBE,EAACA,EAAKyG,EAAU,IAAImJ,MAC1C5P,aAAegE,IACjB8Q,GAAiBrO,EAASzG,GAbG,EAACyG,EAASzG,KAAQ8U,GAAiBrO,EAASmK,GAAe5Q,EAAIuE,OAAO,EAenG0Q,CAAyBxO,EAASzG,GAE7ByG,EAAQ4B,gBAWgB6M,CAAoBlV,EAAK,IAAIyO,IAS9D,MAAM0G,GACJvV,cAIEG,KAAKqV,EAAI,EACX,EAUF,MAAMC,GAAqB,IAAM,IAAIF,GAa/BG,GAA0B,CAACzL,EAAcrK,IAC7CqK,EAAauL,EAAEvT,KAAKrC,GAahB+V,GAA6B,CAAC1L,EAAcrK,KAChD,MAAM4V,EAAIvL,EAAauL,EACjB9W,EAAM8W,EAAE3T,OACdoI,EAAauL,EAAIA,EAAEtC,QAAO0C,GAAKhW,IAAMgW,IACjClX,IAAQuL,EAAauL,EAAE3T,QACzBoB,QAAQgN,MAAM,0DAChB,EAeI4F,GAA4B,CAAC5L,EAAc6L,EAAMC,IACrD,KAAU9L,EAAauL,EAAG,CAACM,EAAMC,IAEnC,MAAMrH,GAKJ1O,YAAakF,EAAQjB,GAKnB9D,KAAK+E,OAASA,EAKd/E,KAAK8D,MAAQA,CACf,EAUF,MAAM+R,GAAa,CAACrQ,EAAGC,IAAMD,IAAMC,GAAY,OAAND,GAAoB,OAANC,GAAcD,EAAET,SAAWU,EAAEV,QAAUS,EAAE1B,QAAU2B,EAAE3B,MAStG6I,GAAW,CAAC5H,EAAQjB,IAAU,IAAIyK,GAAGxJ,EAAQjB,GAS7CgS,GAAU,CAACpP,EAAS7B,KACxB8B,EAAA,GAAsBD,EAAS7B,EAAGE,QAClC4B,EAAA,GAAsBD,EAAS7B,EAAGf,MAAM,EAcpCiS,GAAS5O,GACbwF,GAAStF,EAAA,GAAqBF,GAAUE,EAAA,GAAqBF,IAazD6O,GAAkBlL,IAEtB,IAAK,MAAOtI,EAAKD,KAAUuI,EAAK7K,IAAIgJ,MAAM6H,UACxC,GAAIvO,IAAUuI,EACZ,OAAOtI,EAGX,MAAMsN,EAAA,IAAqB,EAavB,GAAa,CAAC1E,EAAQ6K,KAC1B,KAAiB,OAAVA,GAAgB,CACrB,GAAIA,EAAM7K,SAAWA,EACnB,OAAO,EAET6K,EAA0CA,EAAY,OAAE1M,KAC1D,CACA,OAAO,GAUH2M,GAAUpL,IACd,MAAMqL,EAAM,GACZ,IAAIhL,EAAIL,EAAKO,OACb,KAAOF,GACLgL,EAAIrU,KAAKqJ,GACTA,EAAIA,EAAEpL,MAER+C,QAAQC,IAAI,aAAcoT,GAC1BrT,QAAQC,IAAI,qBAAsBoT,EAAIpD,QAAOzQ,IAAMA,EAAEkE,UAASpE,KAAIE,GAAKA,EAAE6J,UAAS,EAGpF,MAAMiK,GAKJvW,YAAaI,EAAKoW,EAAYpW,EAAI2L,OAAO,UAIvC,MAAMjG,EAAM,IAAI1B,IAChBjE,KAAKsW,OAASD,EACdrW,KAAKC,IAAMA,EAMXD,KAAKgE,QAAU,IAAIC,IACnBjE,KAAK2F,IAAMA,EAKX,MAAM4Q,EAAW,CAACC,EAAMC,KAItB,MAAMrS,EAAKoS,EAAK/R,IAAI,MACdiS,EAAMF,EAAK/R,IAAI,OACfkS,EAA8CrS,GAAYtE,KAAKgE,QAAQ3B,IAAIiC,EAAUmS,GAC3FrS,EAAGwS,SAA+CC,IAChDA,EAAMC,QAAQC,MAAM9T,SAAQ8D,IAC1BA,EAAKoF,QAAQ6K,aAAa/T,SAAQgU,IAC5BA,aAAqBtY,YACvBqB,KAAK2F,IAAItD,IAAIoU,EAAiB/Q,EAAgB,CAAC1F,KAAK2F,IAAIlB,IAAIgS,IAAoBtQ,IAAmBe,GAAc,IAAIsF,GAAYnF,EAAA,GAAuB4P,OAC1J,GACA,GACF,IAEJjX,KAAK2F,IAAItD,IAAIoU,EAAiB/Q,EAAgBtB,EAAGhC,KAAI6U,GAAa/P,GAAc,IAAIsF,GAAYnF,EAAA,GAAuB4P,SACvHP,EAAIE,SAA+CC,GACjDA,EAAMC,QAAQC,MAAM9T,SAAQ8D,GAAQA,EAAKoF,QAAQ6K,aAAa/T,QAAQ0T,OAExED,EAAIzT,QAAQ0T,EAAY,EAG1BN,EAAUO,SAAQC,IAChBA,EAAMK,YAAYjU,SAAQwT,GACxBF,EAASF,EAAU5R,IAAIgS,GAAkBA,IAC1C,IAGHJ,EAAUpT,QAAQsT,EACpB,CASAY,eAAgBlX,EAAKqE,EAAUmS,GAAiB,OAAE1D,EAAS,MAAM,IAAS,CAAC,GACzE,MAAMqE,EAAQpX,KAAKsW,OACnB,IAAIE,EAAOY,EAAM3S,IAAIgS,GAChBD,IACHA,EAAO,IAAI3K,GACX2K,EAAKnU,IAAI,MAAO,IAAIoJ,IACpB+K,EAAKnU,IAAI,KAAM,IAAIoJ,IACnB2L,EAAM/U,IAAIoU,EAAiBD,IAE7BA,EAAK/R,IAAI,OAAO3C,KAAK,CAACwC,IACtB8S,EAAMR,SAAQS,IACZC,YAAW,KACT,MAAMC,EAAgBH,EAAM3S,IAAIgS,GAChC,GAAIc,IAAkBf,EAAM,CAG1BA,EAAOe,EAEPvX,KAAKgE,QAAQf,SAAQ,CAACuU,EAAkBlT,KAClCmS,IAAoBe,GACtBhB,EAAK/R,IAAI,OAAO3C,KAAK,CAACwC,GACxB,IAEF,MAAMoC,EAAU,IAAIgI,GACdtK,EAAKpE,KAAK2F,IAAIlB,IAAIgS,GACpBrS,IACFqC,EAAeC,EAAStC,GACxBoS,EAAK/R,IAAI,MAAM3C,KAAK,CAAC4E,EAAQ4B,iBAEjC,IACC,EAAE,IAEPrI,EAAI2J,GAAG,oBAA4DzF,IACjEmT,YAAW,KACT,MAAMG,EAAMjB,EAAK/R,IAAI,MACfL,EAAKD,EAAYuT,UACvB,GAAIvT,EAAYkN,OAASjN,EAAGJ,QAAQ6C,KAAO,GAAKkM,EAAO5O,EAAaC,GAAK,CACvE,MAAMsC,EAAU,IAAIgI,GACpBjI,EAAeC,EAAStC,GACxBqT,EAAI3V,KAAK,CAAC4E,EAAQ4B,gBACpB,IACA,GAEN,CAMAqP,kBAAmBrT,GACjB,OAAOtE,KAAKgE,QAAQS,IAAIH,IAAa,IACvC,CAMAsT,mBAAoB/S,GAClB,IAAK,MAAO4R,EAAiBrS,KAAOpE,KAAK2F,IAAImL,UAC3C,GAAIlM,EAAUR,EAAIS,GAChB,OAAO4R,EAGX,OAAO,IACT,EA2BF,MAAMoB,GAOJhY,YAAaiL,EAAMgN,EAAO/Q,EAAMgR,EAAQ,GAItC/X,KAAK8K,KAAOA,EAIZ9K,KAAK8X,MAAQA,EAIb9X,KAAK+G,KAAOA,EAYZ/G,KAAK+X,MAAQA,CACf,EAOF,MAAMC,GAAyBC,IAC7B,MAAMC,EAAO,CAAC,EAad,OAZID,EAAKnN,OACPoN,EAAKpN,KAAOmN,EAAKnN,MAEfmN,EAAKH,QACPI,EAAKJ,MAAQG,EAAKH,OAEhBG,EAAKlR,OACPmR,EAAKnR,KAAOkR,EAAKlR,MAED,MAAdkR,EAAKF,QACPG,EAAKH,MAAQE,EAAKF,OAEbG,GASHC,GAAiCD,GAAQ,IAAIL,GAA8B,MAAbK,EAAKpN,KAAe,KAAO6B,GAASuL,EAAKpN,KAAK/F,OAAQmT,EAAKpN,KAAKhH,OAAQoU,EAAKJ,OAAS,KAAmB,MAAbI,EAAKnR,KAAe,KAAO4F,GAASuL,EAAKnR,KAAKhC,OAAQmT,EAAKnR,KAAKjD,OAAsB,MAAdoU,EAAKH,MAAgB,EAAIG,EAAKH,OAEtQ,MAAMK,GAMJvY,YAAaiL,EAAM9C,EAAO+P,EAAQ,GAIhC/X,KAAK8K,KAAOA,EAIZ9K,KAAKgI,MAAQA,EACbhI,KAAK+X,MAAQA,CACf,EAUF,MASMM,GAAyB,CAACvN,EAAM/D,EAAMgR,KAC1C,IAAIO,EAAS,KACTR,EAAQ,KAMZ,OALmB,OAAfhN,EAAKvB,MACPuO,EAAQ9B,GAAgBlL,GAExBwN,EAAS3L,GAAS7B,EAAKvB,MAAM1E,GAAGE,OAAQ+F,EAAKvB,MAAM1E,GAAGf,OAEjD,IAAI+T,GAAiBS,EAAQR,EAAO/Q,EAAMgR,EAAK,EAalDQ,GAAsC,CAACzN,EAAM9C,EAAO+P,EAAQ,KAChE,IAAIhN,EAAID,EAAKO,OACb,GAAI0M,EAAQ,EAAG,CAEb,GAAc,IAAV/P,EACF,OAAOqQ,GAAuBvN,EAAM,KAAMiN,GAE5C/P,GACF,CACA,KAAa,OAAN+C,GAAY,CACjB,IAAKA,EAAEvE,SAAWuE,EAAEyN,UAAW,CAC7B,GAAIzN,EAAErJ,OAASsG,EAEb,OAAOqQ,GAAuBvN,EAAM6B,GAAS5B,EAAElG,GAAGE,OAAQgG,EAAElG,GAAGf,MAAQkE,GAAQ+P,GAEjF/P,GAAS+C,EAAErJ,MACb,CACA,GAAgB,OAAZqJ,EAAEhL,OAAkBgY,EAAQ,EAE9B,OAAOM,GAAuBvN,EAAMC,EAAE0N,OAAQV,GAEhDhN,EAAIA,EAAEhL,KACR,CACA,OAAOsY,GAAuBvN,EAAM,KAAMiN,EAAK,EAiC3CW,GAAyBT,IAC7B,MAAMvR,EAAUC,EAAA,KAEhB,MA3B4B,EAACD,EAASuR,KACtC,MAAM,KAAEnN,EAAI,MAAEgN,EAAK,KAAE/Q,EAAI,MAAEgR,GAAUE,EACrC,GAAa,OAATlR,EACFJ,EAAA,GAAsBD,EAAS,GAC/BoP,GAAQpP,EAASK,QACZ,GAAc,OAAV+Q,EAETnR,EAAA,GAAoBD,EAAS,GAC7BC,EAAA,GAAwBD,EAASoR,OAC5B,IAAa,OAAThN,EAKT,MAAMgF,EAAA,KAHNnJ,EAAA,GAAoBD,EAAS,GAC7BoP,GAAQpP,EAASoE,EAGnB,CACAnE,EAAA,GAAqBD,EAASqR,EACvBrR,EASPiS,CAAsBjS,EAASuR,GACxBtR,EAAA,GAAsBD,EAAO,EAmChCkS,GAAyBC,GA1BF1R,KAC3B,IAAI2D,EAAO,KACPgN,EAAQ,KACRgB,EAAS,KACb,OAAQzR,EAAA,GAAqBF,IAC3B,KAAK,EAEH2R,EAAS/C,GAAO5O,GAChB,MACF,KAAK,EAEH2Q,EAAQzQ,EAAA,GAAuBF,GAC/B,MACF,KAAK,EAEH2D,EAAOiL,GAAO5O,GAGlB,MAAM4Q,EAAQ1Q,EAAA,GAAoBF,GAAWE,EAAA,GAAoBF,GAAW,EAC5E,OAAO,IAAI0Q,GAAiB/M,EAAMgN,EAAOgB,EAAQf,EAAK,EAOXgB,CAAqB1R,EAAA,GAAuBwR,IASnFG,GAA6C,CAACf,EAAMhY,KACxD,MAAMuE,EAAQvE,EAAIuE,MACZyU,EAAUhB,EAAKlR,KACfmS,EAASjB,EAAKnN,KACdgN,EAAQG,EAAKH,MACbC,EAAQE,EAAKF,MACnB,IAAIjN,EAAO,KACP9C,EAAQ,EACZ,GAAgB,OAAZiR,EAAkB,CACpB,GAAInR,GAAStD,EAAOyU,EAAQlU,SAAWkU,EAAQnV,MAC7C,OAAO,KAET,MAAMqS,EAAMgD,GAAa3U,EAAOyU,GAC1BlZ,EAAQoW,EAAIpP,KAClB,KAAMhH,aAAiB+R,IACrB,OAAO,KAGT,GADAhH,EAAyC/K,EAAY,OAClC,OAAf+K,EAAKvB,QAAmBuB,EAAKvB,MAAM/C,QAAS,CAC9CwB,EAASjI,EAAMyG,UAAYzG,EAAMyY,UAAa,EAAKrC,EAAIxI,MAAQoK,GAAS,EAAI,EAAI,GAChF,IAAI5M,EAAIpL,EAAMD,KACd,KAAa,OAANqL,IACAA,EAAE3E,SAAW2E,EAAEqN,YAClBxQ,GAASmD,EAAEzJ,QAEbyJ,EAAIA,EAAErL,IAEV,CACF,KAAO,CACL,GAAc,OAAVgY,EACFhN,EAAO7K,EAAIwE,IAAIqT,OACV,IAAe,OAAXoB,EAaT,MAAMpJ,EAAA,KAboB,CAC1B,GAAIhI,GAAStD,EAAO0U,EAAOnU,SAAWmU,EAAOpV,MAE3C,OAAO,KAET,MAAM,KAAEiD,GAASoS,GAAa3U,EAAO0U,GACrC,KAAInS,aAAgB+K,IAAQ/K,EAAKoF,mBAAmBiN,IAIlD,OAAO,KAHPtO,EAAO/D,EAAKoF,QAAQrB,IAKxB,CAEA,CAEE9C,EADE+P,GAAS,EACHjN,EAAKQ,QAEL,CAEZ,CACA,MAzL6B,EAACR,EAAM9C,EAAO+P,EAAQ,IAAM,IAAIK,GAAiBtN,EAAM9C,EAAO+P,GAyLpFsB,CAAuBvO,EAAM9C,EAAOiQ,EAAKF,MAAK,EAUjDuB,GAA2B,CAAC9T,EAAGC,IAAMD,IAAMC,GACzC,OAAND,GAAoB,OAANC,GAAcD,EAAEsS,QAAUrS,EAAEqS,OAASjC,GAAWrQ,EAAEuB,KAAMtB,EAAEsB,OAAS8O,GAAWrQ,EAAEsF,KAAMrF,EAAEqF,OAAStF,EAAEuS,QAAUtS,EAAEsS,MAG/H,MAAMwB,GAKJ1Z,YAAauE,EAAI4Q,GAIfhV,KAAKoE,GAAKA,EAKVpE,KAAKgV,GAAKA,CACZ,EAQF,MAAMwE,GAAiB,CAACC,EAAOC,KAC7B,MAAMC,EAAMF,EAAMrV,GAAGJ,QACf4V,EAAMF,EAAMtV,GAAGJ,QACf6V,EAAMJ,EAAMzE,GACZ8E,EAAMJ,EAAM1E,GAClB,GAAI6E,EAAIhT,OAASiT,EAAIjT,MAAQ8S,EAAI9S,OAAS+S,EAAI/S,KAC5C,OAAO,EAET,IAAK,MAAOrE,EAAKD,KAAUsX,EAAI/I,UAC7B,GAAIgJ,EAAIrV,IAAIjC,KAASD,EACnB,OAAO,EAGX,IAAK,MAAOwC,EAAQgV,KAAaJ,EAAI7I,UAAW,CAC9C,MAAMkJ,EAAWJ,EAAInV,IAAIM,IAAW,GACpC,GAAIgV,EAASrY,SAAWsY,EAAStY,OAC/B,OAAO,EAET,IAAK,IAAI7C,EAAI,EAAGA,EAAIkb,EAASrY,OAAQ7C,IAAK,CACxC,MAAMob,EAAUF,EAASlb,GACnBqb,EAAUF,EAASnb,GACzB,GAAIob,EAAQnW,QAAUoW,EAAQpW,OAASmW,EAAQ1b,MAAQ2b,EAAQ3b,IAC7D,OAAO,CAEX,CACF,CACA,OAAO,GAQH4b,GAAmB,CAACC,EAAU1T,EAAU,IAAImJ,MAChDpJ,EAAeC,EAAS0T,EAAShW,IACjC2Q,GAAiBrO,EAAS0T,EAASpF,IAC5BtO,EAAQ4B,gBAOX+R,GAAiBD,GAAYD,GAAiBC,EAAU,IAAI1L,IAO5D4L,GAAmB,CAAC9b,EAAK2I,EAAU,IAAIsG,GAAYpG,EAAA,GAAuB7I,MACvE,IAAI+a,GAASrS,GAAcC,GAAUyN,GAAgBzN,IAOxDoT,GAAiB/b,GAAO8b,GAAiB9b,EAAK,IAAIgO,GAAYnF,EAAA,GAAuB7I,KAOrFgc,GAAiB,CAACpW,EAAIwM,IAAO,IAAI2I,GAASnV,EAAIwM,GAE9C6J,GAAgBD,GAAerU,IAAmB,IAAIlC,KAMtDmW,GAAWna,GAAOua,GAAepU,EAA+BnG,EAAIuE,OAAQqM,GAAe5Q,EAAIuE,QAS/FkW,GAAY,CAAC3T,EAAMqT,SAA0BvY,IAAbuY,GACjCrT,EAAKP,QACN4T,EAASpF,GAAGjP,IAAIgB,EAAKlC,GAAGE,UAAYqV,EAASpF,GAAGvQ,IAAIsC,EAAKlC,GAAGE,SAAW,GAAKgC,EAAKlC,GAAGf,QAAUc,EAAUwV,EAAShW,GAAI2C,EAAKlC,IAMxH8V,GAA+B,CAACxW,EAAaiW,KACjD,MAAMvR,EAAOzG,EAAA,GAAmB+B,EAAY0E,KAAM8R,GAA8BtY,EAAA,IAC1EmC,EAAQL,EAAYlE,IAAIuE,MAEzBqE,EAAK9C,IAAIqU,KACZA,EAASpF,GAAG/R,SAAQ,CAACa,EAAOiB,KACtBjB,EAAQgE,GAAStD,EAAOO,IAC1B6V,GAAkBzW,EAAawI,GAAS5H,EAAQjB,GAClD,IAEFI,EAAsBC,EAAaiW,EAAShW,IAAI2C,QAChD8B,EAAKwB,IAAI+P,GACX,EASIS,GAAwB,CAACC,EAAWV,EAAUW,EAAS,IAAIvS,MAC/D,GAAIsS,EAAUnS,GAEZ,MAAM,IAAI4C,MAAM,2CAElB,MAAM,GAAEyJ,EAAE,GAAE5Q,GAAOgW,EAEb1T,EAAU,IAAI2B,GAgCpB,OA/BAyS,EAAU3Q,UAAShG,IACjB,IAAI0C,EAAO,EACXmO,EAAG/R,SAAQa,IACLA,EAAQ,GACV+C,GACF,IAEFF,EAAA,GAAsBD,EAAQE,YAAaC,GAE3C,IAAK,MAAO9B,EAAQjB,KAAUkR,EAAI,CAChC,GAAc,IAAVlR,EACF,SAEEA,EAAQgE,GAASgT,EAAUtW,MAAOO,IACpC6V,GAAkBzW,EAAawI,GAAS5H,EAAQjB,IAElD,MAAMS,EAAUuW,EAAUtW,MAAMR,QAAQS,IAAIM,IAAW,GACjDiW,EAAkB/S,GAAY1D,EAAST,EAAQ,GAErD6C,EAAA,GAAsBD,EAAQE,YAAaoU,EAAkB,GAC7DtU,EAAQoI,YAAY/J,GAEpB4B,EAAA,GAAsBD,EAAQE,YAAa,GAC3C,IAAK,IAAI/H,EAAI,EAAGA,GAAKmc,EAAiBnc,IACpC0F,EAAQ1F,GAAG4R,MAAM/J,EAAS,EAE9B,CACAD,EAAeC,EAAStC,EAAG,IAG7B0P,GAAciH,EAAQrU,EAAQ4B,eAAgB,YACvCyS,GAGT,MAAM7R,GACJrJ,cAIEG,KAAKgE,QAAU,IAAIC,IAInBjE,KAAKwT,eAAiB,KAItBxT,KAAK2T,UAAY,IACnB,EAaF,MAAM9C,GAAiBrM,IACrB,MAAMoM,EAAK,IAAI3M,IAKf,OAJAO,EAAMR,QAAQf,SAAQ,CAACsB,EAASQ,KAC9B,MAAMwB,EAAShC,EAAQA,EAAQ7C,OAAS,GACxCkP,EAAGvO,IAAI0C,EAAQwB,EAAO1B,GAAGf,MAAQyC,EAAO7E,OAAO,IAE1CkP,GAWH9I,GAAW,CAACtD,EAAOO,KACvB,MAAMR,EAAUC,EAAMR,QAAQS,IAAIM,GAClC,QAAgBlD,IAAZ0C,EACF,OAAO,EAET,MAAM0W,EAAa1W,EAAQA,EAAQ7C,OAAS,GAC5C,OAAOuZ,EAAWpW,GAAGf,MAAQmX,EAAWvZ,QAUpCwZ,GAAY,CAAC1W,EAAO+B,KACxB,IAAIhC,EAAUC,EAAMR,QAAQS,IAAI8B,EAAO1B,GAAGE,QAC1C,QAAgBlD,IAAZ0C,EACFA,EAAU,GACVC,EAAMR,QAAQ3B,IAAIkE,EAAO1B,GAAGE,OAAQR,OAC/B,CACL,MAAM0W,EAAa1W,EAAQA,EAAQ7C,OAAS,GAC5C,GAAIuZ,EAAWpW,GAAGf,MAAQmX,EAAWvZ,SAAW6E,EAAO1B,GAAGf,MACxD,MAAMgM,EAAA,IAEV,CACAvL,EAAQzC,KAAKyE,EAAO,EAYhB0B,GAAc,CAAC1D,EAAST,KAC5B,IAAIhE,EAAO,EACPC,EAAQwE,EAAQ7C,OAAS,EACzBuD,EAAMV,EAAQxE,GACdmF,EAAWD,EAAIJ,GAAGf,MACtB,GAAIoB,IAAapB,EACf,OAAO/D,EAKT,IAAIiF,EAAW,KAAYlB,GAASoB,EAAWD,EAAIvD,OAAS,GAAM3B,GAClE,KAAOD,GAAQC,GAAO,CAGpB,GAFAkF,EAAMV,EAAQS,GACdE,EAAWD,EAAIJ,GAAGf,MACdoB,GAAYpB,EAAO,CACrB,GAAIA,EAAQoB,EAAWD,EAAIvD,OACzB,OAAOsD,EAETlF,EAAOkF,EAAW,CACpB,MACEjF,EAAQiF,EAAW,EAErBA,EAAW,MAAYlF,EAAOC,GAAS,EACzC,CAGA,MAAM+P,EAAA,IAAqB,EA2BvBqL,GAdO,CAAC3W,EAAOK,KAKnB,MAAMN,EAAUC,EAAMR,QAAQS,IAAII,EAAGE,QACrC,OAAOR,EAAQ0D,GAAY1D,EAASM,EAAGf,OAAM,EAezCsX,GAAsB,CAACjX,EAAaI,EAAST,KACjD,MAAMkE,EAAQC,GAAY1D,EAAST,GAC7ByC,EAAShC,EAAQyD,GACvB,OAAIzB,EAAO1B,GAAGf,MAAQA,GAASyC,aAAkBuL,IAC/CvN,EAAQ2D,OAAOF,EAAQ,EAAG,EAAGG,GAAUhE,EAAaoC,EAAQzC,EAAQyC,EAAO1B,GAAGf,QACvEkE,EAAQ,GAEVA,GAaH4S,GAAoB,CAACzW,EAAaU,KACtC,MAAMN,EAAsCJ,EAAYlE,IAAIuE,MAAMR,QAAQS,IAAII,EAAGE,QACjF,OAAOR,EAAQ6W,GAAoBjX,EAAaI,EAASM,EAAGf,OAAM,EAc9DuX,GAAkB,CAAClX,EAAaK,EAAOK,KAK3C,MAAMN,EAAUC,EAAMR,QAAQS,IAAII,EAAGE,QAC/BiD,EAAQC,GAAY1D,EAASM,EAAGf,OAChCyC,EAAShC,EAAQyD,GAIvB,OAHInD,EAAGf,QAAUyC,EAAO1B,GAAGf,MAAQyC,EAAO7E,OAAS,GAAK6E,EAAO1G,cAAgB8R,IAC7EpN,EAAQ2D,OAAOF,EAAQ,EAAG,EAAGG,GAAUhE,EAAaoC,EAAQ1B,EAAGf,MAAQyC,EAAO1B,GAAGf,MAAQ,IAEpFyC,GA4BH5B,GAAiB,CAACR,EAAaI,EAAS+W,EAAY/c,EAAKkB,KAC7D,GAAY,IAARlB,EACF,OAEF,MAAMwJ,EAAWuT,EAAa/c,EAC9B,IACIgI,EADAyB,EAAQoT,GAAoBjX,EAAaI,EAAS+W,GAEtD,GACE/U,EAAShC,EAAQyD,KACbD,EAAWxB,EAAO1B,GAAGf,MAAQyC,EAAO7E,QACtC0Z,GAAoBjX,EAAaI,EAASwD,GAE5CtI,EAAE8G,SACKyB,EAAQzD,EAAQ7C,QAAU6C,EAAQyD,GAAOnD,GAAGf,MAAQiE,EAAQ,EA2BvE,MAAMwT,GAMJ1b,YAAaI,EAAKyK,EAAQ2G,GAKxBrR,KAAKC,IAAMA,EAKXD,KAAK0X,UAAY,IAAI3T,EAKrB/D,KAAKwb,YAAc3K,GAAe5Q,EAAIuE,OAKtCxE,KAAKyb,WAAa,IAAIxX,IAOtBjE,KAAK0b,QAAU,IAAIzX,IAMnBjE,KAAK2b,mBAAqB,IAAI1X,IAI9BjE,KAAK4b,cAAgB,GAIrB5b,KAAK0K,OAASA,EAKd1K,KAAK6I,KAAO,IAAI5E,IAKhBjE,KAAKqR,MAAQA,EAIbrR,KAAKqM,aAAe,IAAI/C,IAIxBtJ,KAAKsM,eAAiB,IAAIhD,IAI1BtJ,KAAKoK,cAAgB,IAAId,GAC3B,EAQF,MAAMuS,GAAoC,CAACnV,EAASvC,MACP,IAAvCA,EAAYuT,UAAU1T,QAAQ6C,OAAezE,EAAA,GAAQ+B,EAAYsX,YAAY,CAAC3X,EAAOiB,IAAWZ,EAAYqX,YAAY/W,IAAIM,KAAYjB,MAG5IsB,EAAsBjB,EAAYuT,WA15CA,EAAChR,EAASvC,KAAgBuM,GAAoBhK,EAASvC,EAAYlE,IAAIuE,MAAOL,EAAYqX,YAAY,EA25CxIM,CAA4BpV,EAASvC,GACrCsC,EAAeC,EAASvC,EAAYuT,WAC7B,IAWHqE,GAA8B,CAAC5X,EAAa2G,EAAMkR,KACtD,MAAMjV,EAAO+D,EAAKvB,OACL,OAATxC,GAAkBA,EAAKlC,GAAGf,OAASK,EAAYqX,YAAY/W,IAAIsC,EAAKlC,GAAGE,SAAW,KAAOgC,EAAKP,UAChGpE,EAAA,GAAmB+B,EAAYuX,QAAS5Q,EAAMzI,EAAA,IAAYgI,IAAI2R,EAChE,EAOIC,GAAqB,CAAC1X,EAAS2X,KACnC,MAAMpc,EAAOyE,EAAQ2X,EAAM,GACrBnc,EAAQwE,EAAQ2X,GAClBpc,EAAK0G,UAAYzG,EAAMyG,SAAW1G,EAAKD,cAAgBE,EAAMF,aAC3DC,EAAKqc,UAAUpc,KACjBwE,EAAQ2D,OAAOgU,EAAK,GAChBnc,aAAiB+R,IAA4B,OAApB/R,EAAMic,WAAwDjc,EAAY,OAAEmL,KAAKzG,IAAI1E,EAAMic,aAAejc,GACnGA,EAAY,OAAEmL,KAAK7I,IAAItC,EAAMic,UAA+B,GAGpG,EAQII,GAAiB,CAAChY,EAAII,EAAOoE,KACjC,IAAK,MAAO7D,EAAQsX,KAAgBjY,EAAGJ,QAAQ8M,UAAW,CACxD,MAAMvM,EAAyCC,EAAMR,QAAQS,IAAIM,GACjE,IAAK,IAAIuX,EAAKD,EAAY3a,OAAS,EAAG4a,GAAM,EAAGA,IAAM,CACnD,MAAMC,EAAaF,EAAYC,GACzBE,EAAqBD,EAAWzY,MAAQyY,EAAWhe,IACzD,IACE,IAAIke,EAAKxU,GAAY1D,EAASgY,EAAWzY,OAAQyC,EAAShC,EAAQkY,GAClEA,EAAKlY,EAAQ7C,QAAU6E,EAAO1B,GAAGf,MAAQ0Y,EACzCjW,EAAShC,IAAUkY,GACnB,CACA,MAAMlW,EAAShC,EAAQkY,GACvB,GAAIF,EAAWzY,MAAQyY,EAAWhe,KAAOgI,EAAO1B,GAAGf,MACjD,MAEEyC,aAAkBuL,IAAQvL,EAAOC,UAAYD,EAAOmW,MAAQ9T,EAASrC,IACvEA,EAAOoC,GAAGnE,GAAO,EAErB,CACF,CACF,GAOImY,GAAoB,CAACvY,EAAII,KAG7BJ,EAAGJ,QAAQf,SAAQ,CAACoZ,EAAatX,KAC/B,MAAMR,EAAyCC,EAAMR,QAAQS,IAAIM,GACjE,IAAK,IAAIuX,EAAKD,EAAY3a,OAAS,EAAG4a,GAAM,EAAGA,IAAM,CACnD,MAAMC,EAAaF,EAAYC,GAG/B,IACE,IAAIG,EAFwB,KAASlY,EAAQ7C,OAAS,EAAG,EAAIuG,GAAY1D,EAASgY,EAAWzY,MAAQyY,EAAWhe,IAAM,IAEtFgI,EAAShC,EAAQkY,GACjDA,EAAK,GAAKlW,EAAO1B,GAAGf,OAASyY,EAAWzY,MACxCyC,EAAShC,IAAUkY,GAEnBR,GAAmB1X,EAASkY,EAEhC,IACA,EAQEG,GAAQ,CAACxY,EAAII,EAAOoE,KACxBwT,GAAehY,EAAII,EAAOoE,GAC1B+T,GAAkBvY,EAAII,EAAM,EAOxBqY,GAAsB,CAACC,EAAqBje,KAChD,GAAIA,EAAIie,EAAoBpb,OAAQ,CAClC,MAAMyC,EAAc2Y,EAAoBje,GAClCoB,EAAMkE,EAAYlE,IAClBuE,EAAQvE,EAAIuE,MACZJ,EAAKD,EAAYuT,UACjBqF,EAAe5Y,EAAYyX,cACjC,IACExW,EAAsBhB,GACtBD,EAAYsX,WAAa5K,GAAe1M,EAAYlE,IAAIuE,OACxDvE,EAAIgK,KAAK,sBAAuB,CAAC9F,EAAalE,IAQ9C,MAAM+c,EAAK,GAEX7Y,EAAYuX,QAAQzY,SAAQ,CAACga,EAAMC,IACjCF,EAAGlb,MAAK,KACiB,OAAnBob,EAAS3T,OAAmB2T,EAAS3T,MAAM/C,SAC7C0W,EAASC,cAAchZ,EAAa8Y,EACtC,MAGJD,EAAGlb,MAAK,KAENqC,EAAYwX,mBAAmB1Y,SAAQ,CAACma,EAAQtS,IAC9CkS,EAAGlb,MAAK,KAGa,OAAfgJ,EAAKvB,OAAmBuB,EAAKvB,MAAM/C,WACrC4W,EAASA,EACNrK,QAAO8D,GACiB,OAAvBA,EAAMwG,OAAO9T,QAAmBsN,EAAMwG,OAAO9T,MAAM/C,WAGpDvD,SAAQ4T,IACPA,EAAMyG,cAAgBxS,CAAI,IAG9BsS,EACG7X,MAAK,CAACgY,EAAQC,IAAWD,EAAOE,KAAK/b,OAAS8b,EAAOC,KAAK/b,SAG7DgU,GAA0B5K,EAAK4S,KAAMN,EAAQjZ,GAC/C,MAGJ6Y,EAAGlb,MAAK,IAAM7B,EAAIgK,KAAK,mBAAoB,CAAC9F,EAAalE,KAAM,KAEjE,QAAQ+c,EAAI,GACd,CAAE,QAGI/c,EAAI0I,IACNyT,GAAehY,EAAII,EAAOvE,EAAI2I,UAEhC+T,GAAkBvY,EAAII,GAGtBL,EAAYsX,WAAWxY,SAAQ,CAACa,EAAOiB,KACrC,MAAM4Y,EAAcxZ,EAAYqX,YAAY/W,IAAIM,IAAW,EAC3D,GAAI4Y,IAAgB7Z,EAAO,CACzB,MAAMS,EAAyCC,EAAMR,QAAQS,IAAIM,GAE3D6Y,EAAiB,KAAS3V,GAAY1D,EAASoZ,GAAc,GACnE,IAAK,IAAI9e,EAAI0F,EAAQ7C,OAAS,EAAG7C,GAAK+e,EAAgB/e,IACpDod,GAAmB1X,EAAS1F,EAEhC,KAKF,IAAK,IAAIA,EAAI,EAAGA,EAAIke,EAAarb,OAAQ7C,IAAK,CAC5C,MAAM,OAAEkG,EAAM,MAAEjB,GAAUiZ,EAAale,GAAGgG,GACpCN,EAAyCC,EAAMR,QAAQS,IAAIM,GAC3D8Y,EAAoB5V,GAAY1D,EAAST,GAC3C+Z,EAAoB,EAAItZ,EAAQ7C,QAClCua,GAAmB1X,EAASsZ,EAAoB,GAE9CA,EAAoB,GACtB5B,GAAmB1X,EAASsZ,EAEhC,CAOA,GANK1Z,EAAYkN,OAASlN,EAAYsX,WAAWhX,IAAIxE,EAAI+I,YAAc7E,EAAYqX,YAAY/W,IAAIxE,EAAI+I,YACrG,EAAc,EAAgB,EAAc,SAAU,EAAgB,EAAa,sEACnF/I,EAAI+I,SAAWT,MAGjBtI,EAAIgK,KAAK,0BAA2B,CAAC9F,EAAalE,IAC9CA,EAAI6d,WAAW/X,IAAI,UAAW,CAChC,MAAMW,EAAU,IAAIiI,GACDkN,GAAkCnV,EAASvC,IAE5DlE,EAAIgK,KAAK,SAAU,CAACvD,EAAQ4B,eAAgBnE,EAAYuG,OAAQzK,EAAKkE,GAEzE,CACA,GAAIlE,EAAI6d,WAAW/X,IAAI,YAAa,CAClC,MAAMW,EAAU,IAAI2B,GACDwT,GAAkCnV,EAASvC,IAE5DlE,EAAIgK,KAAK,WAAY,CAACvD,EAAQ4B,eAAgBnE,EAAYuG,OAAQzK,EAAKkE,GAE3E,CACA,MAAM,aAAEkI,EAAY,cAAEjC,EAAa,eAAEkC,GAAmBnI,GACpDkI,EAAaxF,KAAO,GAAKyF,EAAezF,KAAO,GAAKuD,EAAcvD,KAAO,KAC3EwF,EAAapJ,SAAQiJ,IACnBA,EAAOlD,SAAW/I,EAAI+I,SACK,MAAvBkD,EAAOxD,eACTwD,EAAOxD,aAAezI,EAAIyI,cAE5BzI,EAAIoJ,QAAQgB,IAAI6B,EAAO,IAEzBI,EAAerJ,SAAQiJ,GAAUjM,EAAIoJ,QAAQjB,OAAO8D,KACpDjM,EAAIgK,KAAK,UAAW,CAAC,CAAE8T,OAAQ3T,EAAe2M,MAAO1K,EAAc2R,QAAS1R,GAAkBrM,EAAKkE,IACnGmI,EAAerJ,SAAQiJ,GAAUA,EAAOD,aAGtC6Q,EAAoBpb,QAAU7C,EAAI,GACpCoB,EAAImJ,qBAAuB,GAC3BnJ,EAAIgK,KAAK,uBAAwB,CAAChK,EAAK6c,KAEvCD,GAAoBC,EAAqBje,EAAI,EAEjD,CACF,GAYIsL,GAAW,CAAClK,EAAKR,EAAGiL,EAAS,KAAM2G,GAAQ,KAC/C,MAAMyL,EAAsB7c,EAAImJ,qBAChC,IAAI6U,GAAc,EACO,OAArBhe,EAAIkJ,eACN8U,GAAc,EACdhe,EAAIkJ,aAAe,IAAIoS,GAAYtb,EAAKyK,EAAQ2G,GAChDyL,EAAoBhb,KAAK7B,EAAIkJ,cACM,IAA/B2T,EAAoBpb,QACtBzB,EAAIgK,KAAK,wBAAyB,CAAChK,IAErCA,EAAIgK,KAAK,oBAAqB,CAAChK,EAAIkJ,aAAclJ,KAEnD,IACER,EAAEQ,EAAIkJ,aACR,CAAE,QACA,GAAI8U,EAAa,CACf,MAAMC,EAAgBje,EAAIkJ,eAAiB2T,EAAoB,GAC/D7c,EAAIkJ,aAAe,KACf+U,GASFrB,GAAoBC,EAAqB,EAE7C,CACF,GAGF,MAAMqB,GAKJte,YAAaue,EAAWC,GACtBre,KAAKqe,WAAaA,EAClBre,KAAKoe,UAAYA,EAIjBpe,KAAK6I,KAAO,IAAI5E,GAClB,EAOF,MAAMqa,GAA4B,CAACC,EAAIC,EAAIC,KACzCva,EAAsBqa,EAAIE,EAAUL,WAAWrX,IACzCA,aAAgB+K,IAAQ0M,EAAGE,MAAMC,MAAK7T,GAAQ,GAAWA,EAAM/D,MACjE6X,GAAS7X,GAAM,EACjB,GACA,EASE8X,GAAe,CAACC,EAAa3M,EAAO4M,KAKxC,IAAIC,EAAS,KAKTC,EAAM,KACV,MAAMhf,EAAM6e,EAAY7e,IAClBye,EAAQI,EAAYJ,MA4D1B,GA3DAvU,GAASlK,GAAKkE,IACZ,KAAOgO,EAAMzQ,OAAS,GAAgB,OAAXsd,GAAiB,CAC1C,MAAMxa,EAAQvE,EAAIuE,MACZia,EAAsCtM,EAAMI,MAI5C2M,EAAc,IAAI5V,IAIlB6V,EAAgB,GACtB,IAAIC,GAAkB,EACtBlb,EAAsBC,EAAasa,EAAUJ,YAAY9X,IACvD,GAAIA,aAAkBuL,GAAM,CAC1B,GAAsB,OAAlBvL,EAAO8Y,OAAiB,CAC1B,IAAI,KAAEtY,EAAI,KAAE4G,GAASwL,GAAa3U,EAAO+B,EAAO1B,IAC5C8I,EAAO,IACT5G,EAAO6T,GAAkBzW,EAAawI,GAAS5F,EAAKlC,GAAGE,OAAQgC,EAAKlC,GAAGf,MAAQ6J,KAEjFpH,EAASQ,CACX,EACKR,EAAOC,SAAWkY,EAAMC,MAAK7T,GAAQ,GAAWA,EAA0B,MAC7EqU,EAAcrd,KAAKyE,EAEvB,KAEFrC,EAAsBC,EAAasa,EAAUL,WAAW7X,IAEpDA,aAAkBuL,IAClB4M,EAAMC,MAAK7T,GAAQ,GAAWA,EAAMvE,OAEnC3B,EAAU6Z,EAAUJ,WAAY9X,EAAO1B,KAExCqa,EAAY7U,IAAI9D,EAClB,IAEF2Y,EAAYjc,SAAQsD,IAClB6Y,EAA2H,OAAzGE,GAASnb,EAAaoC,EAAQ2Y,EAAaT,EAAUJ,WAAYS,EAAYS,yBAAoCH,CAAe,IAIpJ,IAAK,IAAIvgB,EAAIsgB,EAAczd,OAAS,EAAG7C,GAAK,EAAGA,IAAK,CAClD,MAAMkI,EAAOoY,EAActgB,GACvBigB,EAAYU,aAAazY,KAC3BA,EAAKqB,OAAOjE,GACZib,GAAkB,EAEtB,CACAJ,EAASI,EAAkBX,EAAY,IACzC,CACAta,EAAYuX,QAAQzY,SAAQ,CAACwc,EAAU3U,KAEjC2U,EAAS1Z,IAAI,OAAS+E,EAAK4U,gBAC7B5U,EAAK4U,cAAche,OAAS,EAC9B,IAEFud,EAAM9a,CAAW,GAChB2a,GACW,MAAVE,EAAgB,CAClB,MAAMrD,EAAqBsD,EAAItD,mBAC/BmD,EAAY7U,KAAK,oBAAqB,CAAC,CAAEwU,UAAWO,EAAQlU,KAAMiU,EAAWpD,sBAAsBmD,GACrG,CACA,OAAOE,GAyBT,MAAMW,WAAoB,IAKxB9f,YAAa+f,GAAW,eACtBC,EAAiB,IAAG,mBACpBC,EAAqBvB,KAAM,GAAI,aAC/BiB,EAAe,MAAM,GAAI,eACzBO,EAAiB,IAAIzW,IAAI,CAAC,OAAM,uBAChCiW,GAAyB,EAAK,IAC9Btf,GAA0BgG,EAAA,GAAc2Z,GAAaA,EAAU,GAAG3f,IAAM2f,EAAU3f,MAChF,CAAC,GACH2D,QAIA5D,KAAK0e,MAAQ,GACb1e,KAAKggB,WAAWJ,GAChB5f,KAAKwf,aAAeA,EACpBO,EAAe1V,IAAIrK,MACnBA,KAAK+f,eAAiBA,EACtB/f,KAAK8f,mBAAqBA,EAI1B9f,KAAKigB,UAAY,GAIjBjgB,KAAKkgB,UAAY,GAMjBlgB,KAAKmgB,SAAU,EACfngB,KAAKogB,SAAU,EACfpgB,KAAKC,IAAMA,EACXD,KAAKqgB,WAAa,EAClBrgB,KAAKuf,uBAAyBA,EAC9Bvf,KAAK6f,eAAiBA,EAItB7f,KAAKsgB,wBAA0Bnc,IAE7B,KACGnE,KAAK8f,mBAAmB3b,IACxBnE,KAAK0e,MAAMC,MAAK7T,GAAQ3G,EAAYwX,mBAAmB5V,IAAI+E,OAC1D9K,KAAK+f,eAAeha,IAAI5B,EAAYuG,SAAavG,EAAYuG,QAAW1K,KAAK+f,eAAeha,IAAI5B,EAAYuG,OAAO7K,eAErH,OAEF,MAAMsgB,EAAUngB,KAAKmgB,QACfC,EAAUpgB,KAAKogB,QACfjO,EAAQgO,EAAUngB,KAAKkgB,UAAYlgB,KAAKigB,UAC1CE,EACFngB,KAAKugB,gBACKH,GAEVpgB,KAAKwgB,OAAM,GAAO,GAEpB,MAAMnC,EAAa,IAAIta,EACvBI,EAAYsX,WAAWxY,SAAQ,CAACwd,EAAU1b,KACxC,MAAM2b,EAAavc,EAAYqX,YAAY/W,IAAIM,IAAW,EACpDxG,EAAMkiB,EAAWC,EACnBniB,EAAM,GACR2H,EAAemY,EAAYtZ,EAAQ2b,EAAYniB,EACjD,IAEF,MAAMoiB,EAAM,OACZ,IAAIC,GAAS,EACb,GAAI5gB,KAAKqgB,WAAa,GAAKM,EAAM3gB,KAAKqgB,WAAargB,KAAK6f,gBAAkB1N,EAAMzQ,OAAS,IAAMye,IAAYC,EAAS,CAElH,MAAMS,EAAS1O,EAAMA,EAAMzQ,OAAS,GACpCmf,EAAOzC,UAAY1Y,EAAgB,CAACmb,EAAOzC,UAAWja,EAAYuT,YAClEmJ,EAAOxC,WAAa3Y,EAAgB,CAACmb,EAAOxC,WAAYA,GAC1D,MAEElM,EAAMrQ,KAAK,IAAIqc,GAAUha,EAAYuT,UAAW2G,IAChDuC,GAAS,EAENT,GAAYC,IACfpgB,KAAKqgB,WAAaM,GAGpBzc,EAAsBC,EAAaA,EAAYuT,WAAwC3Q,IACjFA,aAAgB+K,IAAQ9R,KAAK0e,MAAMC,MAAK7T,GAAQ,GAAWA,EAAM/D,MACnE6X,GAAS7X,GAAM,EACjB,IAEF,MAAM+Z,EAAc,CAAC,CAAErC,UAAWtM,EAAMA,EAAMzQ,OAAS,GAAIgJ,OAAQvG,EAAYuG,OAAQI,KAAMqV,EAAU,OAAS,OAAQxE,mBAAoBxX,EAAYwX,oBAAsB3b,MAC1K4gB,EACF5gB,KAAKiK,KAAK,mBAAoB6W,GAE9B9gB,KAAKiK,KAAK,qBAAsB6W,EAClC,EAEF9gB,KAAKC,IAAI2J,GAAG,mBAAoB5J,KAAKsgB,yBACrCtgB,KAAKC,IAAI2J,GAAG,WAAW,KACrB5J,KAAKiM,SAAS,GAElB,CAKA+T,WAAYe,IACVA,EAAS9a,EAAA,GAAc8a,GAAUA,EAAS,CAACA,IACpC9d,SAAQ+d,IACThhB,KAAK0e,MAAMuC,OAAMC,GAAMA,IAAOF,KAChChhB,KAAK0e,MAAM5c,KAAKkf,EAClB,GAEJ,CAKAG,iBAAkBzW,GAChB1K,KAAK+f,eAAe1V,IAAIK,EAC1B,CAKA0W,oBAAqB1W,GACnB1K,KAAK+f,eAAe3X,OAAOsC,EAC7B,CAEA8V,MAAOa,GAAiB,EAAMC,GAAiB,IACxCD,GAAkBrhB,KAAKuhB,WAAeD,GAAkBthB,KAAKwhB,YAChExhB,KAAKC,IAAIkK,UAASoU,IACZ8C,IACFrhB,KAAKigB,UAAUhd,SAAQ8D,GAAQuX,GAA0BC,EAAIve,KAAM+G,KACnE/G,KAAKigB,UAAY,IAEfqB,IACFthB,KAAKkgB,UAAUjd,SAAQ8D,GAAQuX,GAA0BC,EAAIve,KAAM+G,KACnE/G,KAAKkgB,UAAY,IAEnBlgB,KAAKiK,KAAK,gBAAiB,CAAC,CAAEwX,iBAAkBJ,EAAgBK,iBAAkBJ,IAAkB,GAG1G,CAsBAf,gBACEvgB,KAAKqgB,WAAa,CACpB,CAOAsB,OAEE,IAAIxL,EADJnW,KAAKmgB,SAAU,EAEf,IACEhK,EAAM0I,GAAa7e,KAAMA,KAAKigB,UAAW,OAC3C,CAAE,QACAjgB,KAAKmgB,SAAU,CACjB,CACA,OAAOhK,CACT,CAOAyL,OAEE,IAAIzL,EADJnW,KAAKogB,SAAU,EAEf,IACEjK,EAAM0I,GAAa7e,KAAMA,KAAKkgB,UAAW,OAC3C,CAAE,QACAlgB,KAAKogB,SAAU,CACjB,CACA,OAAOjK,CACT,CAOAoL,UACE,OAAOvhB,KAAKigB,UAAUve,OAAS,CACjC,CAOA8f,UACE,OAAOxhB,KAAKkgB,UAAUxe,OAAS,CACjC,CAEAuK,UACEjM,KAAK+f,eAAe3X,OAAOpI,MAC3BA,KAAKC,IAAI8J,IAAI,mBAAoB/J,KAAKsgB,yBACtC1c,MAAMqI,SACR,EA+CF,MAAM4V,GAKJhiB,YAAasH,EAAS2a,GACpB9hB,KAAK+hB,IA/CT,UAAsC5a,GACpC,MAAMqK,EAAoBnK,EAAA,GAAqBF,EAAQG,aACvD,IAAK,IAAIzI,EAAI,EAAGA,EAAI2S,EAAmB3S,IAAK,CAC1C,MAAM4S,EAAkBpK,EAAA,GAAqBF,EAAQG,aAC/CvC,EAASoC,EAAQ0F,aACvB,IAAI/I,EAAQuD,EAAA,GAAqBF,EAAQG,aACzC,IAAK,IAAIzI,EAAI,EAAGA,EAAI4S,EAAiB5S,IAAK,CACxC,MAAMmQ,EAAO7H,EAAQ2F,WAErB,GAAa,KAATkC,EAAa,CACf,MAAMzQ,EAAM8I,EAAA,GAAqBF,EAAQG,mBACnC,IAAIsK,GAAKjF,GAAS5H,EAAQjB,GAAQvF,GACxCuF,GAASvF,CACX,MAAO,GAA8B,IAAzB,KAAeyQ,GAAa,CACtC,MAAM6C,EAA8D,IAAxC7C,GAAQ,KAAc,OAK5CzI,EAAS,IAAIuL,GACjBnF,GAAS5H,EAAQjB,GACjB,MACCkL,EAAO,QAAiB,KAAc7H,EAAQuF,aAAe,KAC9D,MACCsC,EAAO,QAAiB,KAAc7H,EAAQyF,cAAgB,KAE/DiF,EAAsB1K,EAAQ6F,iBAAmB7F,EAAQ4F,aAAe5F,EAAQuF,aAAgB,KAChGmF,IAAuB7C,EAAO,QAAiB,KAAc7H,EAAQ4F,aAAe,KACpFgF,GAAgB5K,EAAS6H,UAErBzI,EACNzC,GAASyC,EAAO7E,MAClB,KAAO,CACL,MAAMnD,EAAM4I,EAAQ+F,gBACd,IAAIyE,GAAGhF,GAAS5H,EAAQjB,GAAQvF,GACtCuF,GAASvF,CACX,CACF,CACF,CACF,CAQeyjB,CAA0B7a,GAIrCnH,KAAKiiB,KAAO,KACZjiB,KAAKwD,MAAO,EACZxD,KAAK8hB,YAAcA,EACnB9hB,KAAKoD,MACP,CAKAA,OAEE,GACEpD,KAAKiiB,KAAOjiB,KAAK+hB,IAAI3e,OAAOb,OAAS,WAC9BvC,KAAK8hB,aAA6B,OAAd9hB,KAAKiiB,MAAiBjiB,KAAKiiB,KAAKpiB,cAAgB+R,IAC7E,OAAO5R,KAAKiiB,IACd,EAOF,MAAMC,GAAY7O,GAAU8O,GAAY9O,EAAQ5G,IAO1C0V,GAAc,CAAC9O,EAAQW,EAAWpG,MACtC,MAAMrJ,EAAU,GACV6d,EAAgB,IAAIpO,EAAS3M,EAAA,GAAuBgM,IACpDgP,EAAc,IAAIR,GAAiBO,GAAe,GACxD,IAAK,IAAIH,EAAOI,EAAYJ,KAAe,OAATA,EAAeA,EAAOI,EAAYjf,OAClEmB,EAAQzC,KAAKmgB,GAEf,EAAc,YAAa1d,GAC3B,MAAMH,EAAK8C,GAAckb,GACzB,EAAc,cAAehe,EAAG,EAO5Bke,GAAgBjP,GAAWkP,GAAelP,EAAQ5G,IAOlD8V,GAAiB,CAAClP,EAAQW,EAAWpG,MACzC,MAAMrJ,EAAU,GACV6d,EAAgB,IAAIpO,EAAS3M,EAAA,GAAuBgM,IACpDgP,EAAc,IAAIR,GAAiBO,GAAe,GACxD,IAAK,IAAIH,EAAOI,EAAYJ,KAAe,OAATA,EAAeA,EAAOI,EAAYjf,OAClEmB,EAAQzC,KAAKmgB,GAEf,MAAO,CACL1d,UACAH,GAAI8C,GAAckb,GACpB,EAGF,MAAMI,GAIJ3iB,YAAa6G,GACX1G,KAAKyiB,WAAa,EAClBziB,KAAK0gB,WAAa,EAClB1gB,KAAK0iB,QAAU,EACf1iB,KAAK0G,QAAUA,EAWf1G,KAAK2iB,cAAgB,EACvB,EAOF,MAAMlO,GAAeF,GAAWd,GAAec,EAAS9H,GAAiBkC,IAQnEiU,GAAgC,CAACvP,EAAQwP,EAAWhT,GAAamE,EAAWpG,MAChF,MAAMlH,EAAU,IAAImc,EACdT,EAAgB,IAAIP,GAAiB,IAAI7N,EAAS3M,EAAA,GAAuBgM,KAAU,GACzF,IAAI4O,EAAOG,EAAcH,KACzB,GAAa,OAATA,EAAe,CACjB,IAAIpb,EAAO,EACP4b,EAAaR,EAAKpd,GAAGE,OACrB+d,EAAiC,IAAlBb,EAAKpd,GAAGf,MACvBif,EAAYD,EAAe,EAAIb,EAAKpd,GAAGf,MAAQme,EAAKvgB,OACxD,KAAgB,OAATugB,EAAeA,EAAOG,EAAchf,OACrCqf,IAAeR,EAAKpd,GAAGE,SACP,IAAdge,IACFlc,IAGAF,EAAA,GAAsBD,EAAQE,YAAa6b,GAC3C9b,EAAA,GAAsBD,EAAQE,YAAamc,IAE7CN,EAAaR,EAAKpd,GAAGE,OACrBge,EAAY,EACZD,EAAiC,IAAlBb,EAAKpd,GAAGf,OAGrBme,EAAKpiB,cAAgB+R,KACvBkR,GAAe,GAEZA,IACHC,EAAYd,EAAKpd,GAAGf,MAAQme,EAAKvgB,QAInB,IAAdqhB,IACFlc,IACAF,EAAA,GAAsBD,EAAQE,YAAa6b,GAC3C9b,EAAA,GAAsBD,EAAQE,YAAamc,IAG7C,MAAMC,EAAMrc,EAAA,KAIZ,OAHAA,EAAA,GAAsBqc,EAAKnc,GAC3BF,EAAA,GAA4Bqc,EAAKtc,EAAQE,aACzCF,EAAQE,YAAcoc,EACftc,EAAQ4B,cACjB,CAEE,OADA3B,EAAA,GAAsBD,EAAQE,YAAa,GACpCF,EAAQ4B,cACjB,EAOI2a,GAA8B5P,GAAUuP,GAA8BvP,EAAQ3E,GAAajC,IAO3FyW,GAAoB,CAAC7P,EAAQW,EAAWpG,MAI5C,MAAMnD,EAAO,IAAIxG,IAIXkf,EAAK,IAAIlf,IACTme,EAAgB,IAAIP,GAAiB,IAAI7N,EAAS3M,EAAA,GAAuBgM,KAAU,GACzF,IAAI4O,EAAOG,EAAcH,KACzB,GAAa,OAATA,EAAe,CACjB,IAAIQ,EAAaR,EAAKpd,GAAGE,OACrBge,EAAYd,EAAKpd,GAAGf,MAGxB,IADA2G,EAAKpI,IAAIogB,EAAYM,GACL,OAATd,EAAeA,EAAOG,EAAchf,OACrCqf,IAAeR,EAAKpd,GAAGE,SAGzBoe,EAAG9gB,IAAIogB,EAAYM,GAEnBtY,EAAKpI,IAAI4f,EAAKpd,GAAGE,OAAQkd,EAAKpd,GAAGf,OAEjC2e,EAAaR,EAAKpd,GAAGE,QAEvBge,EAAYd,EAAKpd,GAAGf,MAAQme,EAAKvgB,OAGnCyhB,EAAG9gB,IAAIogB,EAAYM,EACrB,CACA,MAAO,CAAEtY,OAAM0Y,KAAG,EAOdC,GAAkB/P,GAAU6P,GAAkB7P,EAAQ5G,IAUtD4W,GAAc,CAACvjB,EAAM6N,KACzB,GAAI7N,EAAKD,cAAgB8R,GAAI,CAC3B,MAAM,OAAE5M,EAAM,MAAEjB,GAAUhE,EAAK+E,GAC/B,OAAO,IAAI8M,GAAGhF,GAAS5H,EAAQjB,EAAQ6J,GAAO7N,EAAK4B,OAASiM,EAC9D,CAAO,GAAI7N,EAAKD,cAAgB+R,GAAM,CACpC,MAAM,OAAE7M,EAAM,MAAEjB,GAAUhE,EAAK+E,GAC/B,OAAO,IAAI+M,GAAKjF,GAAS5H,EAAQjB,EAAQ6J,GAAO7N,EAAK4B,OAASiM,EAChE,CAAO,CACL,MAAM2V,EAA+B,GAC/B,OAAEve,EAAM,MAAEjB,GAAUwf,EAASze,GACnC,OAAO,IAAIiN,GACTnF,GAAS5H,EAAQjB,EAAQ6J,GACzB,KACAhB,GAAS5H,EAAQjB,EAAQ6J,EAAO,GAChC,KACA2V,EAASC,YACTD,EAASlY,OACTkY,EAAStH,UACTsH,EAASnX,QAAQjE,OAAOyF,GAE5B,GAYI8F,GAAiB,CAACc,EAASP,EAAWpG,GAAiBiV,EAAWxa,MACtE,GAAuB,IAAnBkM,EAAQ7S,OACV,OAAO6S,EAAQ,GAEjB,MAAMiP,EAAiBjP,EAAQnS,KAAIiR,GAAU,IAAIW,EAAS3M,EAAA,GAAuBgM,MACjF,IAAIoQ,EAAqBD,EAAephB,KAAI+E,GAAW,IAAI0a,GAAiB1a,GAAS,KAMjFuc,EAAY,KAEhB,MAAMC,EAAgB,IAAId,EAEpBe,EAAoB,IAAIpB,GAAiBmB,GAM/C,KAEEF,EAAqBA,EAAmB1Q,QAAO8Q,GAAoB,OAAbA,EAAI5B,OAC1DwB,EAAmBle,MACuB,CAACue,EAAMC,KAC7C,GAAID,EAAK7B,KAAKpd,GAAGE,SAAWgf,EAAK9B,KAAKpd,GAAGE,OAAQ,CAC/C,MAAMif,EAAYF,EAAK7B,KAAKpd,GAAGf,MAAQigB,EAAK9B,KAAKpd,GAAGf,MACpD,OAAkB,IAAdkgB,EAEKF,EAAK7B,KAAKpiB,cAAgBkkB,EAAK9B,KAAKpiB,YACvC,EACAikB,EAAK7B,KAAKpiB,cAAgB+R,GAAO,GAAK,EAEnCoS,CAEX,CACE,OAAOD,EAAK9B,KAAKpd,GAAGE,OAAS+e,EAAK7B,KAAKpd,GAAGE,MAC5C,IAG8B,IAA9B0e,EAAmB/hB,QApBZ,CAuBX,MAAMuiB,EAAcR,EAAmB,GAGjCS,EAAwCD,EAAgB,KAAEpf,GAAGE,OAEnE,GAAkB,OAAd2e,EAAoB,CACtB,IAAIzB,EAAwCgC,EAAgB,KACxDE,GAAW,EAIf,KAAgB,OAATlC,GAAiBA,EAAKpd,GAAGf,MAAQme,EAAKvgB,QAAUgiB,EAAUnd,OAAO1B,GAAGf,MAAQ4f,EAAUnd,OAAO7E,QAAUugB,EAAKpd,GAAGE,QAAU2e,EAAUnd,OAAO1B,GAAGE,QAClJkd,EAAOgC,EAAY7gB,OACnB+gB,GAAW,EAEb,GACW,OAATlC,GACAA,EAAKpd,GAAGE,SAAWmf,GAClBC,GAAYlC,EAAKpd,GAAGf,MAAQ4f,EAAUnd,OAAO1B,GAAGf,MAAQ4f,EAAUnd,OAAO7E,OAE1E,SAGF,GAAIwiB,IAAgBR,EAAUnd,OAAO1B,GAAGE,OACtCqf,GAA8BR,EAAmBF,EAAUnd,OAAQmd,EAAU1Q,QAC7E0Q,EAAY,CAAEnd,OAAQ0b,EAAMjP,OAAQ,GACpCiR,EAAY7gB,YAEZ,GAAIsgB,EAAUnd,OAAO1B,GAAGf,MAAQ4f,EAAUnd,OAAO7E,OAASugB,EAAKpd,GAAGf,MAEhE,GAAI4f,EAAUnd,OAAO1G,cAAgB+R,GAEnC8R,EAAUnd,OAAO7E,OAASugB,EAAKpd,GAAGf,MAAQme,EAAKvgB,OAASgiB,EAAUnd,OAAO1B,GAAGf,UACvE,CACLsgB,GAA8BR,EAAmBF,EAAUnd,OAAQmd,EAAU1Q,QAC7E,MAAMrF,EAAOsU,EAAKpd,GAAGf,MAAQ4f,EAAUnd,OAAO1B,GAAGf,MAAQ4f,EAAUnd,OAAO7E,OAK1EgiB,EAAY,CAAEnd,OADC,IAAIqL,GAAKjF,GAASuX,EAAaR,EAAUnd,OAAO1B,GAAGf,MAAQ4f,EAAUnd,OAAO7E,QAASiM,GAC9EqF,OAAQ,EAChC,KACK,CACL,MAAMrF,EAAO+V,EAAUnd,OAAO1B,GAAGf,MAAQ4f,EAAUnd,OAAO7E,OAASugB,EAAKpd,GAAGf,MACvE6J,EAAO,IACL+V,EAAUnd,OAAO1G,cAAgB+R,GAEnC8R,EAAUnd,OAAO7E,QAAUiM,EAE3BsU,EAAOoB,GAAYpB,EAAMtU,IAGxB+V,EAAUnd,OAAO4V,UAA6B,KACjDiI,GAA8BR,EAAmBF,EAAUnd,OAAQmd,EAAU1Q,QAC7E0Q,EAAY,CAAEnd,OAAQ0b,EAAMjP,OAAQ,GACpCiR,EAAY7gB,OAEhB,CAEJ,MACEsgB,EAAY,CAAEnd,OAAkC0d,EAAgB,KAAGjR,OAAQ,GAC3EiR,EAAY7gB,OAEd,IACE,IAAIA,EAAO6gB,EAAYhC,KACd,OAAT7e,GAAiBA,EAAKyB,GAAGE,SAAWmf,GAAe9gB,EAAKyB,GAAGf,QAAU4f,EAAUnd,OAAO1B,GAAGf,MAAQ4f,EAAUnd,OAAO7E,QAAU0B,EAAKvD,cAAgB+R,GACjJxO,EAAO6gB,EAAY7gB,OAEnBghB,GAA8BR,EAAmBF,EAAUnd,OAAQmd,EAAU1Q,QAC7E0Q,EAAY,CAAEnd,OAAQnD,EAAM4P,OAAQ,EAExC,CACkB,OAAd0Q,IACFU,GAA8BR,EAAmBF,EAAUnd,OAAQmd,EAAU1Q,QAC7E0Q,EAAY,MAEdW,GAAwBT,GAExB,MAAMje,EAAM6d,EAAephB,KAAI+E,GAAWD,GAAcC,KAClD/C,EAAKsB,EAAgBC,GAE3B,OADAc,EAAekd,EAAevf,GACvBuf,EAAcrb,cAAa,EAS9BkM,GAAe,CAACnB,EAAQ2B,EAAIhB,EAAWpG,GAAiBiV,EAAWxa,MACvE,MAAMR,EAAQyM,GAAkBU,GAC1BtO,EAAU,IAAImc,EACdyB,EAAmB,IAAI9B,GAAiB9b,GACxCS,EAAU,IAAI6M,EAAS3M,EAAA,GAAuBgM,IAC9CkR,EAAS,IAAI1C,GAAiB1a,GAAS,GAC7C,KAAOod,EAAOtC,MAAM,CAClB,MAAMA,EAAOsC,EAAOtC,KACdQ,EAAaR,EAAKpd,GAAGE,OACrByf,EAAU3c,EAAMpD,IAAIge,IAAe,EACzC,GAAI8B,EAAOtC,KAAKpiB,cAAgB+R,GAKhC,GAAIqQ,EAAKpd,GAAGf,MAAQme,EAAKvgB,OAAS8iB,EAGhC,IAFAJ,GAA8BE,EAAkBrC,EAAM,KAASuC,EAAUvC,EAAKpd,GAAGf,MAAO,IACxFygB,EAAOnhB,OACAmhB,EAAOtC,MAAQsC,EAAOtC,KAAKpd,GAAGE,SAAW0d,GAC9C2B,GAA8BE,EAAkBC,EAAOtC,KAAM,GAC7DsC,EAAOnhB,YAIT,KAAOmhB,EAAOtC,MAAQsC,EAAOtC,KAAKpd,GAAGE,SAAW0d,GAAc8B,EAAOtC,KAAKpd,GAAGf,MAAQygB,EAAOtC,KAAKvgB,QAAU8iB,GACzGD,EAAOnhB,YAbTmhB,EAAOnhB,MAgBX,CACAihB,GAAwBC,GAExB,MAAMlgB,EAAK8C,GAAcC,GAEzB,OADAV,EAAeC,EAAStC,GACjBsC,EAAQ4B,cAAa,EAOxBmc,GAAa,CAACpR,EAAQ2B,IAAOR,GAAanB,EAAQ2B,EAAIvI,GAAiBkC,IAKvE+V,GAAwBC,IACxBA,EAAWjC,QAAU,IACvBiC,EAAWhC,cAAc7gB,KAAK,CAAE4gB,QAASiC,EAAWjC,QAAS9b,YAAaD,EAAA,GAAsBge,EAAWje,QAAQE,eACnH+d,EAAWje,QAAQE,YAAcD,EAAA,KACjCge,EAAWjC,QAAU,EACvB,EAQI0B,GAAgC,CAACO,EAAYpe,EAAQyM,KAErD2R,EAAWjC,QAAU,GAAKiC,EAAWlC,aAAelc,EAAO1B,GAAGE,QAChE2f,GAAsBC,GAEG,IAAvBA,EAAWjC,UACbiC,EAAWlC,WAAalc,EAAO1B,GAAGE,OAElC4f,EAAWje,QAAQoI,YAAYvI,EAAO1B,GAAGE,QAEzC4B,EAAA,GAAsBge,EAAWje,QAAQE,YAAaL,EAAO1B,GAAGf,MAAQkP,IAE1EzM,EAAOkK,MAAMkU,EAAWje,QAASsM,GACjC2R,EAAWjC,SAAS,EAShB2B,GAA2BM,IAC/BD,GAAsBC,GAGtB,MAAM/d,EAAc+d,EAAWje,QAAQE,YAQvCD,EAAA,GAAsBC,EAAa+d,EAAWhC,cAAcjhB,QAE5D,IAAK,IAAI7C,EAAI,EAAGA,EAAI8lB,EAAWhC,cAAcjhB,OAAQ7C,IAAK,CACxD,MAAM+lB,EAAcD,EAAWhC,cAAc9jB,GAK7C8H,EAAA,GAAsBC,EAAage,EAAYlC,SAE/C/b,EAAA,GAAyBC,EAAage,EAAYhe,YACpD,GAQIie,GAAsB,CAACxR,EAAQW,EAAU6O,KAC7C,MAAMT,EAAgB,IAAIpO,EAAS3M,EAAA,GAAuBgM,IACpDgP,EAAc,IAAIR,GAAiBO,GAAe,GAClDuB,EAAgB,IAAId,EACpB8B,EAAa,IAAInC,GAAiBmB,GAExC,IAAK,IAAI1B,EAAOI,EAAYJ,KAAe,OAATA,EAAeA,EAAOI,EAAYjf,OAClEghB,GAA8BO,EAAY1C,EAAM,GAElDoC,GAAwBM,GACxB,MAAMvgB,EAAK8C,GAAckb,GAEzB,OADA3b,EAAekd,EAAevf,GACvBuf,EAAcrb,cAAa,EAM9Bwc,GAA4BzR,GAAUwR,GAAoBxR,EAAQ5G,GAAiBpE,IAKnFqM,GAA4BrB,GAAUwR,GAAoBxR,EAAQzF,GAAiBe,IAMzF,MAAMoW,GAKJllB,YAAawd,EAAQlZ,GAKnBnE,KAAKqd,OAASA,EAKdrd,KAAKsd,cAAgBD,EAKrBrd,KAAKmE,YAAcA,EAInBnE,KAAKglB,SAAW,KAIhBhlB,KAAKilB,MAAQ,KAIbjlB,KAAKklB,OAAS,IAChB,CAeIzH,WAEF,OAAO0H,GAAUnlB,KAAKsd,cAAetd,KAAKqd,OAC5C,CAUAhZ,QAASkC,GACP,OAAO3B,EAAU5E,KAAKmE,YAAYuT,UAAWnR,EAAO1B,GACtD,CAKIgJ,WACF,GAAmB,OAAf7N,KAAKilB,MAAgB,CACvB,MAAMpX,EAAO,IAAI5J,IACXoZ,EAASrd,KAAKqd,OAC2Brd,KAAKmE,YAAYuX,QAAQjX,IAAI4Y,GACpEpa,SAAQT,IACd,GAAY,OAARA,EAAc,CAChB,MAAMuE,EAA4BsW,EAAOnS,KAAKzG,IAAIjC,GAIlD,IAAI4iB,EACAC,EACJ,GAAIrlB,KAAKslB,KAAKve,GAAO,CACnB,IAAIwe,EAAOxe,EAAKjH,KAChB,KAAgB,OAATylB,GAAiBvlB,KAAKslB,KAAKC,IAChCA,EAAOA,EAAKzlB,KAEd,GAAIE,KAAKqE,QAAQ0C,GAAO,CACtB,GAAa,OAATwe,IAAiBvlB,KAAKqE,QAAQkhB,GAIhC,OAHAH,EAAS,SACTC,EAAWpf,EAAA,GAAWsf,EAAKpZ,QAAQ6K,aAIvC,MACe,OAATuO,GAAiBvlB,KAAKqE,QAAQkhB,IAChCH,EAAS,SACTC,EAAWpf,EAAA,GAAWsf,EAAKpZ,QAAQ6K,gBAEnCoO,EAAS,MACTC,OAAWxjB,EAGjB,KAAO,CACL,IAAI7B,KAAKqE,QAAQ0C,GAIf,OAHAqe,EAAS,SACTC,EAAWpf,EAAA,GAA+Bc,EAAKoF,QAAQ6K,aAI3D,CACAnJ,EAAKxL,IAAIG,EAAK,CAAE4iB,SAAQC,YAC1B,KAEFrlB,KAAKilB,MAAQpX,CACf,CACA,OAAO7N,KAAKilB,KACd,CAKIO,YACF,OAAOxlB,KAAK8W,QAAQ0O,KACtB,CAUAF,KAAM/e,GACJ,OAAOA,EAAO1B,GAAGf,QAAU9D,KAAKmE,YAAYqX,YAAY/W,IAAI8B,EAAO1B,GAAGE,SAAW,EACnF,CAKI+R,cACF,IAAIA,EAAU9W,KAAKglB,SACnB,GAAgB,OAAZlO,EAAkB,CACpB,MAAMuG,EAASrd,KAAKqd,OACdtG,EAAQ1U,EAAA,KACRmE,EAAUnE,EAAA,KAIVmjB,EAAQ,GAQd,GAPA1O,EAAU,CACRC,QACAvQ,UACAgf,QACA3X,KAAM7N,KAAK6N,MAEkC7N,KAAKmE,YAAYuX,QAAQjX,IAAI4Y,GAChEtX,IAAI,MAAO,CAIrB,IAAI8a,EAAS,KACb,MAAM4E,EAAS,KACT5E,GACF2E,EAAM1jB,KAAK+e,EACb,EAEF,IAAK,IAAI9Z,EAAOsW,EAAOhS,OAAiB,OAATtE,EAAeA,EAAOA,EAAKhH,MACpDgH,EAAKP,QACHxG,KAAKqE,QAAQ0C,KAAU/G,KAAKslB,KAAKve,KACpB,OAAX8Z,QAAqChf,IAAlBgf,EAAOzY,SAC5Bqd,IACA5E,EAAS,CAAEzY,OAAQ,IAErByY,EAAOzY,QAAUrB,EAAKrF,OACtB8E,EAAQ6D,IAAItD,IAGV/G,KAAKslB,KAAKve,IACG,OAAX8Z,QAAqChf,IAAlBgf,EAAO6E,SAC5BD,IACA5E,EAAS,CAAE6E,OAAQ,KAErB7E,EAAO6E,OAAS7E,EAAO6E,OAAOC,OAAO5e,EAAKoF,QAAQ6K,cAClDD,EAAM1M,IAAItD,KAEK,OAAX8Z,QAAqChf,IAAlBgf,EAAO+E,SAC5BH,IACA5E,EAAS,CAAE+E,OAAQ,IAErB/E,EAAO+E,QAAU7e,EAAKrF,QAIb,OAAXmf,QAAqChf,IAAlBgf,EAAO+E,QAC5BH,GAEJ,CACAzlB,KAAKglB,SAAWlO,CAClB,CACA,OAA0B,CAC5B,EAoBF,MAAMqO,GAAY,CAAC/Z,EAAQ6K,KACzB,MAAMwH,EAAO,GACb,KAAuB,OAAhBxH,EAAM1M,OAAkB0M,IAAU7K,GAAQ,CAC/C,GAA8B,OAA1B6K,EAAM1M,MAAMyS,UAEdyB,EAAKhb,QAAQwT,EAAM1M,MAAMyS,eACpB,CAEL,IAAInd,EAAI,EACJS,EAAsC2W,EAAM1M,MAAY,OAAE8B,OAC9D,KAAO/L,IAAM2W,EAAM1M,OAAe,OAANjK,GACrBA,EAAEkH,SACL3H,IAEFS,EAAIA,EAAES,MAER0d,EAAKhb,QAAQ5D,EACf,CACAoX,EAA0CA,EAAM1M,MAAY,MAC9D,CACA,OAAOkU,GAYT,IAAIoI,GAA8B,EAElC,MAAMC,GAKJjmB,YAAakmB,EAAG/d,GACd+d,EAAEC,QAAS,EACXhmB,KAAK+lB,EAAIA,EACT/lB,KAAKgI,MAAQA,EACbhI,KAAKimB,UAAYJ,IACnB,EAMF,MASMK,GAAkB,CAACF,EAAQD,EAAG/d,KAClCge,EAAOD,EAAEC,QAAS,EAClBA,EAAOD,EAAIA,EACXA,EAAEC,QAAS,EACXA,EAAOhe,MAAQA,EACfge,EAAOC,UAAYJ,IAA6B,EAkC5CM,GAAa,CAACC,EAAQpe,KAC1B,GAAsB,OAAlBoe,EAAO/a,QAA6B,IAAVrD,GAAwC,OAAzBoe,EAAO1G,cAClD,OAAO,KAET,MAAMsG,EAAyC,IAAhCI,EAAO1G,cAAche,OAAe,KAAO0kB,EAAO1G,cAAc2G,QAAO,CAAC7gB,EAAGC,IAAM,KAASuC,EAAQxC,EAAEwC,OAAS,KAASA,EAAQvC,EAAEuC,OAASxC,EAAIC,IAC5J,IAAIsgB,EAAIK,EAAO/a,OACXib,EAAS,EAOb,IANe,OAAXN,IACFD,EAAIC,EAAOD,EACXO,EAASN,EAAOhe,MAzDWge,KAAYA,EAAOC,UAAYJ,IAA6B,EA0DvFU,CAAuBP,IAGN,OAAZD,EAAEhmB,OAAkBumB,EAASte,GAAO,CACzC,IAAK+d,EAAEvf,SAAWuf,EAAEvN,UAAW,CAC7B,GAAIxQ,EAAQse,EAASP,EAAErkB,OACrB,MAEF4kB,GAAUP,EAAErkB,MACd,CACAqkB,EAAIA,EAAEhmB,KACR,CAEA,KAAkB,OAAXgmB,EAAEjmB,MAAiBwmB,EAASte,GACjC+d,EAAIA,EAAEjmB,MACDimB,EAAEvf,SAAWuf,EAAEvN,YAClB8N,GAAUP,EAAErkB,QAMhB,KAAkB,OAAXqkB,EAAEjmB,MAAiBimB,EAAEjmB,KAAK+E,GAAGE,SAAWghB,EAAElhB,GAAGE,QAAUghB,EAAEjmB,KAAK+E,GAAGf,MAAQiiB,EAAEjmB,KAAK4B,SAAWqkB,EAAElhB,GAAGf,OACrGiiB,EAAIA,EAAEjmB,MACDimB,EAAEvf,SAAWuf,EAAEvN,YAClB8N,GAAUP,EAAErkB,QA4BhB,OAAe,OAAXskB,GAAmB,KAASA,EAAOhe,MAAQse,GAA4CP,EAAQ,OAAErkB,OA1I/E,IA4IpBwkB,GAAgBF,EAAQD,EAAGO,GACpBN,GA5FU,EAACQ,EAAcT,EAAG/d,KACrC,GAAIwe,EAAa9kB,QAlDK,GAkDsB,CAE1C,MAAMskB,EAASQ,EAAaH,QAAO,CAAC7gB,EAAGC,IAAMD,EAAEygB,UAAYxgB,EAAEwgB,UAAYzgB,EAAIC,IAE7E,OADAygB,GAAgBF,EAAQD,EAAG/d,GACpBge,CACT,CAAO,CAEL,MAAMS,EAAK,IAAIX,GAAkBC,EAAG/d,GAEpC,OADAwe,EAAa1kB,KAAK2kB,GACXA,CACT,GAoFSC,CAAaN,EAAO1G,cAAeqG,EAAGO,EAC/C,EAYIK,GAAsB,CAACH,EAAcxe,EAAOzJ,KAChD,IAAK,IAAIM,EAAI2nB,EAAa9kB,OAAS,EAAG7C,GAAK,EAAGA,IAAK,CACjD,MAAMyD,EAAIkkB,EAAa3nB,GACvB,GAAIN,EAAM,EAAG,CAIX,IAAIwnB,EAAIzjB,EAAEyjB,EAKV,IAJAA,EAAEC,QAAS,EAIJD,IAAMA,EAAEvf,UAAYuf,EAAEvN,YAC3BuN,EAAIA,EAAEjmB,KACFimB,IAAMA,EAAEvf,SAAWuf,EAAEvN,YAEvBlW,EAAE0F,OAAS+d,EAAErkB,QAGjB,GAAU,OAANqkB,IAA2B,IAAbA,EAAEC,OAAiB,CAEnCQ,EAAate,OAAOrJ,EAAG,GACvB,QACF,CACAyD,EAAEyjB,EAAIA,EACNA,EAAEC,QAAS,CACb,EACIhe,EAAQ1F,EAAE0F,OAAUzJ,EAAM,GAAKyJ,IAAU1F,EAAE0F,SAC7C1F,EAAE0F,MAAQ,KAASA,EAAO1F,EAAE0F,MAAQzJ,GAExC,GASIqoB,GAAkB7b,IACtB,IAAImE,EAAInE,EAAEM,OACV,MAAM3M,EAAM,GACZ,KAAOwQ,GACLxQ,EAAIoD,KAAKoN,GACTA,EAAIA,EAAEnP,MAER,OAAOrB,GAYHmoB,GAAoB,CAAC/b,EAAM3G,EAAa0S,KAC5C,MAAMiQ,EAAchc,EACd6Q,EAAqBxX,EAAYwX,mBACvC,KAEEvZ,EAAA,GAAmBuZ,EAAoB7Q,GAAM,IAAM,KAAIhJ,KAAK+U,GACzC,OAAf/L,EAAKvB,OAGTuB,EAAyCA,EAAKvB,MAAY,OAE5DmM,GAA0BoR,EAAYC,IAAKlQ,EAAO1S,EAAY,EAOhE,MAAM0G,GACJhL,cAIEG,KAAKuJ,MAAQ,KAIbvJ,KAAKkL,KAAO,IAAIjH,IAIhBjE,KAAKqL,OAAS,KAIdrL,KAAKC,IAAM,KACXD,KAAKsL,QAAU,EAKftL,KAAK+mB,IAAMzR,KAKXtV,KAAK0d,KAAOpI,KAIZtV,KAAK0f,cAAgB,IACvB,CAKItU,aACF,OAAOpL,KAAKuJ,MAA0CvJ,KAAKuJ,MAAY,OAAI,IAC7E,CAYAyB,WAAYgc,EAAGjgB,GACb/G,KAAKC,IAAM+mB,EACXhnB,KAAKuJ,MAAQxC,CACf,CAKAkgB,QACE,MAAMnX,EAAA,IACR,CAKAoX,QACE,MAAMpX,EAAA,IACR,CAKAqX,OAAQC,GAAY,CAKhBC,aACF,IAAIlc,EAAInL,KAAKqL,OACb,KAAa,OAANF,GAAcA,EAAE3E,SACrB2E,EAAIA,EAAEpL,MAER,OAAOoL,CACT,CASAgS,cAAehZ,EAAamjB,IACrBnjB,EAAYkN,OAASrR,KAAK0f,gBAC7B1f,KAAK0f,cAAche,OAAS,EAEhC,CAOAkV,QAASnX,GACP8V,GAAwBvV,KAAK+mB,IAAKtnB,EACpC,CAOA8nB,YAAa9nB,GACX8V,GAAwBvV,KAAK0d,KAAMje,EACrC,CAOA+nB,UAAW/nB,GACT+V,GAA2BxV,KAAK+mB,IAAKtnB,EACvC,CAOAgoB,cAAehoB,GACb+V,GAA2BxV,KAAK0d,KAAMje,EACxC,CAMAuM,SAAW,EAYb,MAAM0b,GAAgB,CAAC5c,EAAM6c,EAAOC,KAC9BD,EAAQ,IACVA,EAAQ7c,EAAKQ,QAAUqc,GAErBC,EAAM,IACRA,EAAM9c,EAAKQ,QAAUsc,GAEvB,IAAIrpB,EAAMqpB,EAAMD,EAChB,MAAME,EAAK,GACX,IAAI1c,EAAIL,EAAKO,OACb,KAAa,OAANF,GAAc5M,EAAM,GAAG,CAC5B,GAAI4M,EAAEqN,YAAcrN,EAAE3E,QAAS,CAC7B,MAAMlH,EAAI6L,EAAEgB,QAAQ6K,aACpB,GAAI1X,EAAEoC,QAAUimB,EACdA,GAASroB,EAAEoC,WACN,CACL,IAAK,IAAI7C,EAAI8oB,EAAO9oB,EAAIS,EAAEoC,QAAUnD,EAAM,EAAGM,IAC3CgpB,EAAG/lB,KAAKxC,EAAET,IACVN,IAEFopB,EAAQ,CACV,CACF,CACAxc,EAAIA,EAAEpL,KACR,CACA,OAAO8nB,GAUHC,GAAkBhd,IACtB,MAAM+c,EAAK,GACX,IAAI1c,EAAIL,EAAKO,OACb,KAAa,OAANF,GAAY,CACjB,GAAIA,EAAEqN,YAAcrN,EAAE3E,QAAS,CAC7B,MAAMlH,EAAI6L,EAAEgB,QAAQ6K,aACpB,IAAK,IAAInY,EAAI,EAAGA,EAAIS,EAAEoC,OAAQ7C,IAC5BgpB,EAAG/lB,KAAKxC,EAAET,GAEd,CACAsM,EAAIA,EAAEpL,KACR,CACA,OAAO8nB,GAWHE,GAA0B,CAACjd,EAAMsP,KACrC,MAAMyN,EAAK,GACX,IAAI1c,EAAIL,EAAKO,OACb,KAAa,OAANF,GAAY,CACjB,GAAIA,EAAEqN,WAAakC,GAAUvP,EAAGiP,GAAW,CACzC,MAAM9a,EAAI6L,EAAEgB,QAAQ6K,aACpB,IAAK,IAAInY,EAAI,EAAGA,EAAIS,EAAEoC,OAAQ7C,IAC5BgpB,EAAG/lB,KAAKxC,EAAET,GAEd,CACAsM,EAAIA,EAAEpL,KACR,CACA,OAAO8nB,GAYHG,GAAkB,CAACld,EAAMrL,KAC7B,IAAIuI,EAAQ,EACRmD,EAAIL,EAAKO,OACb,KAAa,OAANF,GAAY,CACjB,GAAIA,EAAEqN,YAAcrN,EAAE3E,QAAS,CAC7B,MAAMlH,EAAI6L,EAAEgB,QAAQ6K,aACpB,IAAK,IAAInY,EAAI,EAAGA,EAAIS,EAAEoC,OAAQ7C,IAC5BY,EAAEH,EAAET,GAAImJ,IAAS8C,EAErB,CACAK,EAAIA,EAAEpL,KACR,GAYIkoB,GAAc,CAACnd,EAAMrL,KAIzB,MAAMuf,EAAS,GAIf,OAHAgJ,GAAgBld,GAAM,CAACxL,EAAGT,KACxBmgB,EAAOld,KAAKrC,EAAEH,EAAGT,EAAGiM,GAAM,IAErBkU,GAUHkJ,GAAyBpd,IAC7B,IAAIK,EAAIL,EAAKO,OAIT8c,EAAiB,KACjBC,EAAsB,EAC1B,MAAO,CACL,CAACzoB,OAAO0D,YACN,OAAOrD,IACT,EACAoD,KAAM,KAEJ,GAAuB,OAAnB+kB,EAAyB,CAC3B,KAAa,OAANhd,GAAcA,EAAE3E,SACrB2E,EAAIA,EAAEpL,MAGR,GAAU,OAANoL,EACF,MAAO,CACL3H,MAAM,EACNjB,WAAOV,GAIXsmB,EAAiBhd,EAAEgB,QAAQ6K,aAC3BoR,EAAsB,EACtBjd,EAAIA,EAAEpL,KACR,CACA,MAAMwC,EAAQ4lB,EAAeC,KAK7B,OAHID,EAAezmB,QAAU0mB,IAC3BD,EAAiB,MAEZ,CACL3kB,MAAM,EACNjB,QACF,EAEJ,EAWI8lB,GAAc,CAACvd,EAAM9C,KACzB,MAAMge,EAASG,GAAWrb,EAAM9C,GAChC,IAAImD,EAAIL,EAAKO,OAKb,IAJe,OAAX2a,IACF7a,EAAI6a,EAAOD,EACX/d,GAASge,EAAOhe,OAEL,OAANmD,EAAYA,EAAIA,EAAEpL,MACvB,IAAKoL,EAAE3E,SAAW2E,EAAEqN,UAAW,CAC7B,GAAIxQ,EAAQmD,EAAEzJ,OACZ,OAAOyJ,EAAEgB,QAAQ6K,aAAahP,GAEhCA,GAASmD,EAAEzJ,MACb,CACF,EAYI4mB,GAA8B,CAACnkB,EAAaiH,EAAQmd,EAAepc,KACvE,IAAIrM,EAAOyoB,EACX,MAAMtoB,EAAMkE,EAAYlE,IAClBuoB,EAAcvoB,EAAI+I,SAClBxE,EAAQvE,EAAIuE,MACZzE,EAA0B,OAAlBwoB,EAAyBnd,EAAOC,OAASkd,EAAcxoB,MAIrE,IAAI0oB,EAAc,GAClB,MAAMC,EAAkB,KAClBD,EAAY/mB,OAAS,IACvB5B,EAAO,IAAIgS,GAAKnF,GAAS6b,EAAa1gB,GAAStD,EAAOgkB,IAAe1oB,EAAMA,GAAQA,EAAK2Y,OAAQ1Y,EAAOA,GAASA,EAAM8E,GAAIuG,EAAQ,KAAM,IAAIud,GAAWF,IACvJ3oB,EAAKsT,UAAUjP,EAAa,GAC5BskB,EAAc,GAChB,EAEFtc,EAAQlJ,SAAQ3D,IACd,GAAU,OAANA,EACFmpB,EAAY3mB,KAAKxC,QAEjB,OAAQA,EAAEO,aACR,KAAKmC,OACL,KAAKU,OACL,KAAKkmB,QACL,KAAKpe,MACL,KAAKzI,OACH0mB,EAAY3mB,KAAKxC,GACjB,MACF,QAEE,OADAopB,IACQppB,EAAEO,aACR,KAAKlB,WACL,KAAKF,YACHqB,EAAO,IAAIgS,GAAKnF,GAAS6b,EAAa1gB,GAAStD,EAAOgkB,IAAe1oB,EAAMA,GAAQA,EAAK2Y,OAAQ1Y,EAAOA,GAASA,EAAM8E,GAAIuG,EAAQ,KAAM,IAAIyd,GAAc,IAAIlqB,WAAqC,KACnMmB,EAAKsT,UAAUjP,EAAa,GAC5B,MACF,KAAKqE,GACH1I,EAAO,IAAIgS,GAAKnF,GAAS6b,EAAa1gB,GAAStD,EAAOgkB,IAAe1oB,EAAMA,GAAQA,EAAK2Y,OAAQ1Y,EAAOA,GAASA,EAAM8E,GAAIuG,EAAQ,KAAM,IAAI0d,GAA8B,IAC1KhpB,EAAKsT,UAAUjP,EAAa,GAC5B,MACF,QACE,KAAI7E,aAAauL,IAIf,MAAM,IAAIU,MAAM,+CAHhBzL,EAAO,IAAIgS,GAAKnF,GAAS6b,EAAa1gB,GAAStD,EAAOgkB,IAAe1oB,EAAMA,GAAQA,EAAK2Y,OAAQ1Y,EAAOA,GAASA,EAAM8E,GAAIuG,EAAQ,KAAM,IAAIgO,GAAY9Z,IACxJQ,EAAKsT,UAAUjP,EAAa,IAMxC,IAEFukB,GAAiB,EAGbK,GAAiBjZ,EAAA,GAAa,oBAW9BkZ,GAAyB,CAAC7kB,EAAaiH,EAAQpD,EAAOmE,KAC1D,GAAInE,EAAQoD,EAAOE,QACjB,MAAMyd,GAER,GAAc,IAAV/gB,EAIF,OAHIoD,EAAOsU,eACTiH,GAAoBvb,EAAOsU,cAAe1X,EAAOmE,EAAQzK,QAEpD4mB,GAA4BnkB,EAAaiH,EAAQ,KAAMe,GAEhE,MAAM8c,EAAajhB,EACbge,EAASG,GAAW/a,EAAQpD,GAClC,IAAImD,EAAIC,EAAOC,OAWf,IAVe,OAAX2a,IACF7a,EAAI6a,EAAOD,EAGG,IAFd/d,GAASge,EAAOhe,SAIdmD,EAAIA,EAAEoa,KACNvd,GAAUmD,GAAKA,EAAEqN,YAAcrN,EAAE3E,QAAW2E,EAAEzJ,OAAS,IAG9C,OAANyJ,EAAYA,EAAIA,EAAEpL,MACvB,IAAKoL,EAAE3E,SAAW2E,EAAEqN,UAAW,CAC7B,GAAIxQ,GAASmD,EAAEzJ,OAAQ,CACjBsG,EAAQmD,EAAEzJ,QAEZkZ,GAAkBzW,EAAawI,GAASxB,EAAEtG,GAAGE,OAAQoG,EAAEtG,GAAGf,MAAQkE,IAEpE,KACF,CACAA,GAASmD,EAAEzJ,MACb,CAKF,OAHI0J,EAAOsU,eACTiH,GAAoBvb,EAAOsU,cAAeuJ,EAAY9c,EAAQzK,QAEzD4mB,GAA4BnkB,EAAaiH,EAAQD,EAAGgB,EAAO,EAmC9D+c,GAAiB,CAAC/kB,EAAaiH,EAAQpD,EAAOtG,KAClD,GAAe,IAAXA,EAAgB,OACpB,MAAMunB,EAAajhB,EACbmhB,EAAcznB,EACdskB,EAASG,GAAW/a,EAAQpD,GAClC,IAAImD,EAAIC,EAAOC,OAMf,IALe,OAAX2a,IACF7a,EAAI6a,EAAOD,EACX/d,GAASge,EAAOhe,OAGL,OAANmD,GAAcnD,EAAQ,EAAGmD,EAAIA,EAAEpL,OAC/BoL,EAAE3E,SAAW2E,EAAEqN,YACdxQ,EAAQmD,EAAEzJ,QACZkZ,GAAkBzW,EAAawI,GAASxB,EAAEtG,GAAGE,OAAQoG,EAAEtG,GAAGf,MAAQkE,IAEpEA,GAASmD,EAAEzJ,QAIf,KAAOA,EAAS,GAAW,OAANyJ,GACdA,EAAE3E,UACD9E,EAASyJ,EAAEzJ,QACbkZ,GAAkBzW,EAAawI,GAASxB,EAAEtG,GAAGE,OAAQoG,EAAEtG,GAAGf,MAAQpC,IAEpEyJ,EAAE/C,OAAOjE,GACTzC,GAAUyJ,EAAEzJ,QAEdyJ,EAAIA,EAAEpL,MAER,GAAI2B,EAAS,EACX,MAAMqnB,GAEJ3d,EAAOsU,eACTiH,GAAoBvb,EAAOsU,cAAeuJ,GAAaE,EAAcznB,EACvE,EAWI0nB,GAAgB,CAACjlB,EAAaiH,EAAQ5I,KAC1C,MAAMlD,EAAI8L,EAAOF,KAAKzG,IAAIjC,QAChBX,IAANvC,GACFA,EAAE8I,OAAOjE,EACX,EAYIklB,GAAa,CAACllB,EAAaiH,EAAQ5I,EAAKD,KAC5C,MAAMzC,EAAOsL,EAAOF,KAAKzG,IAAIjC,IAAQ,KAC/BvC,EAAMkE,EAAYlE,IAClBuoB,EAAcvoB,EAAI+I,SACxB,IAAImD,EACJ,GAAa,MAAT5J,EACF4J,EAAU,IAAIwc,GAAW,CAACpmB,SAE1B,OAAQA,EAAM1C,aACZ,KAAKmC,OACL,KAAKU,OACL,KAAKkmB,QACL,KAAKpe,MACL,KAAKzI,OACHoK,EAAU,IAAIwc,GAAW,CAACpmB,IAC1B,MACF,KAAK5D,WACHwN,EAAU,IAAI0c,GAAwC,GACtD,MACF,KAAKrgB,GACH2D,EAAU,IAAI2c,GAA8B,GAC5C,MACF,QACE,KAAIvmB,aAAiBsI,IAGnB,MAAM,IAAIU,MAAM,2BAFhBY,EAAU,IAAIiN,GAAY7W,GAMlC,IAAIuP,GAAKnF,GAAS6b,EAAa1gB,GAAS7H,EAAIuE,MAAOgkB,IAAe1oB,EAAMA,GAAQA,EAAK2Y,OAAQ,KAAM,KAAMrN,EAAQ5I,EAAK2J,GAASiH,UAAUjP,EAAa,EAAE,EAWpJmlB,GAAa,CAACle,EAAQ5I,KAC1B,MAAM+mB,EAAMne,EAAOF,KAAKzG,IAAIjC,GAC5B,YAAeX,IAAR0nB,GAAsBA,EAAI/iB,aAAqD3E,EAA3C0nB,EAAIpd,QAAQ6K,aAAauS,EAAI7nB,OAAS,EAAKG,EAUlF2nB,GAAiBpe,IAIrB,MAAM+K,EAAM,CAAC,EAMb,OALA/K,EAAOF,KAAKjI,SAAQ,CAACV,EAAOC,KACrBD,EAAMiE,UACT2P,EAAI3T,GAAOD,EAAM4J,QAAQ6K,aAAazU,EAAMb,OAAS,GACvD,IAEKyU,GAWHsT,GAAa,CAACre,EAAQ5I,KAC1B,MAAM+mB,EAAMne,EAAOF,KAAKzG,IAAIjC,GAC5B,YAAeX,IAAR0nB,IAAsBA,EAAI/iB,SAY7BkjB,GAAqB,CAACte,EAAQ5I,EAAK4X,KACvC,IAAIuP,EAAIve,EAAOF,KAAKzG,IAAIjC,IAAQ,KAChC,KAAa,OAANmnB,KAAgBvP,EAASpF,GAAGjP,IAAI4jB,EAAE9kB,GAAGE,SAAW4kB,EAAE9kB,GAAGf,QAAUsW,EAASpF,GAAGvQ,IAAIklB,EAAE9kB,GAAGE,SAAW,KACpG4kB,EAAIA,EAAE7pB,KAER,OAAa,OAAN6pB,GAAcjP,GAAUiP,EAAGvP,GAAYuP,EAAExd,QAAQ6K,aAAa2S,EAAEjoB,OAAS,QAAKG,GAUjF+nB,GAAoBxnB,IAAO,OD3rKFiB,EC2rK0BjB,EAAI0O,UD3rKpBiC,EC2rKyD8W,IAAUA,EAAM,GAAGrjB,QD3rKjErD,GAAe,KACjE,IAAIgT,EACJ,GACEA,EAAM9S,EAASD,cACP+S,EAAI3S,OAASuP,EAAOoD,EAAI5T,QAClC,OAAO4T,KALqB,IAAC9S,EAAU0P,CC2rKoF,EAW7H,MAAM+W,WAAoB/E,GAKxBllB,YAAaumB,EAAQjiB,GACnBP,MAAMwiB,EAAQjiB,GACdnE,KAAKmJ,aAAehF,CACtB,EASF,MAAMsH,WAAeZ,GACnBhL,cACE+D,QAKA5D,KAAK+pB,eAAiB,GAItB/pB,KAAK0f,cAAgB,EACvB,CAQAsK,YAAaC,GAIX,MAAMzkB,EAAI,IAAIiG,GAEd,OADAjG,EAAE1D,KAAKmoB,GACAzkB,CACT,CAYAwF,WAAYgc,EAAGjgB,GACbnD,MAAMoH,WAAWgc,EAAGjgB,GACpB/G,KAAK0lB,OAAO,EAA8B1lB,KAAmB,gBAC7DA,KAAK+pB,eAAiB,IACxB,CAKA9C,QACE,OAAO,IAAIxb,EACb,CAKAyb,QAIE,MAAMxoB,EAAM,IAAI+M,GAIhB,OAHA/M,EAAIgnB,OAAO,EAAG1lB,KAAKkqB,UAAU9nB,KAAI+nB,GAC/BA,aAActf,GAAyCsf,EAAGjD,QAAWiD,KAEhEzrB,CACT,CAEIgD,aACF,OAA+B,OAAxB1B,KAAK+pB,eAA0B/pB,KAAKsL,QAAUtL,KAAK+pB,eAAeroB,MAC3E,CAQAyb,cAAehZ,EAAaimB,GAC1BxmB,MAAMuZ,cAAchZ,EAAaimB,GACjCvD,GAAkB7mB,KAAMmE,EAAa,IAAI2lB,GAAY9pB,KAAMmE,GAC7D,CAkBAuhB,OAAQ1d,EAAOmE,GACI,OAAbnM,KAAKC,IACPkK,GAASnK,KAAKC,KAAKkE,IACjB6kB,GAAuB7kB,EAAanE,KAAMgI,EAA0B,EAAU,IAGrDhI,KAAmB,eAAEkI,OAAOF,EAAO,KAAMmE,EAExE,CASArK,KAAMqK,GACa,OAAbnM,KAAKC,IACPkK,GAASnK,KAAKC,KAAKkE,IA1UI,EAACA,EAAaiH,EAAQe,KAGjD,IAAIhB,GADYC,EAAOsU,eAAiB,IAAI2G,QAAO,CAACgE,EAAWC,IAAeA,EAAWtiB,MAAQqiB,EAAUriB,MAAQsiB,EAAaD,GAAW,CAAEriB,MAAO,EAAG+d,EAAG3a,EAAOC,SAClJ0a,EACf,GAAI5a,EACF,KAAOA,EAAEpL,OACPoL,EAAIA,EAAEpL,MAGHuoB,GAA4BnkB,EAAaiH,EAAQD,EAAGgB,EAAO,EAkU5Doe,CAAqBpmB,EAAanE,KAAyB,EAAU,IAG5CA,KAAmB,eAAE8B,QAAQqK,EAE5D,CAOA1J,QAAS0J,GACPnM,KAAK0lB,OAAO,EAAGvZ,EACjB,CAQA/D,OAAQJ,EAAOtG,EAAS,GACL,OAAb1B,KAAKC,IACPkK,GAASnK,KAAKC,KAAKkE,IACjB+kB,GAAe/kB,EAAanE,KAAMgI,EAAOtG,EAAO,IAGvB1B,KAAmB,eAAEkI,OAAOF,EAAOtG,EAElE,CAQA+C,IAAKuD,GACH,OAAOqgB,GAAYroB,KAAMgI,EAC3B,CAOAkiB,UACE,OAAOpC,GAAgB9nB,KACzB,CASAgG,MAAO2hB,EAAQ,EAAGC,EAAM5nB,KAAK0B,QAC3B,OAAOgmB,GAAc1nB,KAAM2nB,EAAOC,EACpC,CAOA5b,SACE,OAAOhM,KAAKoC,KAAI9C,GAAKA,aAAauL,GAAevL,EAAE0M,SAAW1M,GAChE,CAWA8C,IAAK3C,GACH,OAAOwoB,GAAYjoB,KAAyB,EAC9C,CAOAiD,QAASxD,GACPuoB,GAAgBhoB,KAAMP,EACxB,CAKA,CAACE,OAAO0D,YACN,OAAO6kB,GAAuBloB,KAChC,CAKAmnB,OAAQzgB,GACNA,EAAQ2I,aAAamb,GACvB,EAgBF,MAAMC,WAAkB1F,GAMtBllB,YAAa6qB,EAAMvmB,EAAa8Y,GAC9BrZ,MAAM8mB,EAAMvmB,GACZnE,KAAKkX,YAAc+F,CACrB,EAUF,MAAMpR,WAAahB,GAKjBhL,YAAaiR,GACXlN,QAKA5D,KAAK+pB,eAAiB,KAGpB/pB,KAAK+pB,oBADSloB,IAAZiP,EACoB,IAAI7M,IAEJ,IAAIA,IAAI6M,EAElC,CAYA9F,WAAYgc,EAAGjgB,GACbnD,MAAMoH,WAAWgc,EAAGjgB,GACc/G,KAAmB,eAAEiD,SAAQ,CAACV,EAAOC,KACrExC,KAAKqC,IAAIG,EAAKD,EAAM,IAEtBvC,KAAK+pB,eAAiB,IACxB,CAKA9C,QACE,OAAO,IAAIpb,EACb,CAKAqb,QAIE,MAAM9kB,EAAM,IAAIyJ,GAIhB,OAHA7L,KAAKiD,SAAQ,CAACV,EAAOC,KACnBJ,EAAIC,IAAIG,EAAKD,aAAiBsI,GAA4CtI,EAAM2kB,QAAW3kB,EAAM,IAE5FH,CACT,CAQA+a,cAAehZ,EAAaimB,GAC1BvD,GAAkB7mB,KAAMmE,EAAa,IAAIsmB,GAAUzqB,KAAMmE,EAAaimB,GACxE,CAOApe,SAIE,MAAM5J,EAAM,CAAC,EAOb,OANApC,KAAKkL,KAAKjI,SAAQ,CAAC8D,EAAMvE,KACvB,IAAKuE,EAAKP,QAAS,CACjB,MAAMmjB,EAAI5iB,EAAKoF,QAAQ6K,aAAajQ,EAAKrF,OAAS,GAClDU,EAAII,GAAOmnB,aAAa9e,GAAe8e,EAAE3d,SAAW2d,CACtD,KAEKvnB,CACT,CAOIyE,WACF,MAAO,IAAI+iB,GAAkB5pB,KAAKkL,OAAOxJ,MAC3C,CAOAmM,OACE,OAAO,EAAqB+b,GAAkB5pB,KAAKkL,OAA6Bye,GAAKA,EAAE,IACzF,CAOAgB,SACE,OAAO,EAAqBf,GAAkB5pB,KAAKkL,OAA6Bye,GAAKA,EAAE,GAAGxd,QAAQ6K,aAAa2S,EAAE,GAAGjoB,OAAS,IAC/H,CAOAoP,UACE,OAAO,EAAqB8Y,GAAkB5pB,KAAKkL,OAA6Bye,GAAK,CAACA,EAAE,GAAIA,EAAE,GAAGxd,QAAQ6K,aAAa2S,EAAE,GAAGjoB,OAAS,KACtI,CAOAuB,QAASxD,GACPO,KAAKkL,KAAKjI,SAAQ,CAAC8D,EAAMvE,KAClBuE,EAAKP,SACR/G,EAAEsH,EAAKoF,QAAQ6K,aAAajQ,EAAKrF,OAAS,GAAIc,EAAKxC,KACrD,GAEJ,CAOA,CAACL,OAAO0D,YACN,OAAOrD,KAAK8Q,SACd,CAOA1I,OAAQ5F,GACW,OAAbxC,KAAKC,IACPkK,GAASnK,KAAKC,KAAKkE,IACjBilB,GAAcjlB,EAAanE,KAAMwC,EAAI,IAGNxC,KAAmB,eAAEoI,OAAO5F,EAEjE,CAQAH,IAAKG,EAAKD,GAQR,OAPiB,OAAbvC,KAAKC,IACPkK,GAASnK,KAAKC,KAAKkE,IACjBklB,GAAWllB,EAAanE,KAAMwC,EAAwB,EAAQ,IAG/BxC,KAAmB,eAAEqC,IAAIG,EAAKD,GAE1DA,CACT,CAQAkC,IAAKjC,GACH,OAA2B8mB,GAAWtpB,KAAMwC,EAC9C,CAQAuD,IAAKvD,GACH,OAAOinB,GAAWzpB,KAAMwC,EAC1B,CAKAge,QACmB,OAAbxgB,KAAKC,IACPkK,GAASnK,KAAKC,KAAKkE,IACjBnE,KAAKiD,SAAQ,SAAU2nB,EAAQpoB,EAAKJ,GAClCgnB,GAAcjlB,EAAa/B,EAAKI,EAClC,GAAE,IAG6BxC,KAAmB,eAAEwgB,OAE1D,CAKA2G,OAAQzgB,GACNA,EAAQ2I,aAAawb,GACvB,EASF,MAOMC,GAAa,CAACtlB,EAAGC,IAAMD,IAAMC,GAAmB,iBAAND,GAA+B,iBAANC,GAAkBD,GAAKC,GAAKslB,EAAA,GAAiBvlB,EAAGC,GAEzH,MAAMulB,GAOJnrB,YAAaC,EAAMC,EAAOiI,EAAOijB,GAC/BjrB,KAAKF,KAAOA,EACZE,KAAKD,MAAQA,EACbC,KAAKgI,MAAQA,EACbhI,KAAKirB,kBAAoBA,CAC3B,CAKAC,UACqB,OAAflrB,KAAKD,OACP+P,EAAA,KAEM9P,KAAKD,MAAMoM,QAAQtM,cACpBsrB,GACEnrB,KAAKD,MAAMyG,SACd4kB,GAAwBprB,KAAKirB,kBAAiDjrB,KAAKD,MAAa,SAI7FC,KAAKD,MAAMyG,UACdxG,KAAKgI,OAAShI,KAAKD,MAAM2B,QAI/B1B,KAAKF,KAAOE,KAAKD,MACjBC,KAAKD,MAAQC,KAAKD,MAAMA,KAC1B,EAYF,MAAMsrB,GAAmB,CAAClnB,EAAa+X,EAAKoP,KAC1C,KAAqB,OAAdpP,EAAInc,OAAkBurB,EAAQ,GAC3BpP,EAAInc,MAAMoM,QAAQtM,cACnBsrB,GACEjP,EAAInc,MAAMyG,SACb4kB,GAAwBlP,EAAI+O,kBAAiD/O,EAAInc,MAAa,SAI3Fmc,EAAInc,MAAMyG,UACT8kB,EAAQpP,EAAInc,MAAM2B,QAEpBkZ,GAAkBzW,EAAawI,GAASuP,EAAInc,MAAM8E,GAAGE,OAAQmX,EAAInc,MAAM8E,GAAGf,MAAQwnB,IAEpFpP,EAAIlU,OAASkU,EAAInc,MAAM2B,OACvB4pB,GAASpP,EAAInc,MAAM2B,QAIzBwa,EAAIpc,KAAOoc,EAAInc,MACfmc,EAAInc,MAAQmc,EAAInc,MAAMA,MAGxB,OAAOmc,GAYHqP,GAAe,CAACpnB,EAAaiH,EAAQpD,KACzC,MAAMijB,EAAoB,IAAIhnB,IACxB+hB,EAASG,GAAW/a,EAAQpD,GAClC,GAAIge,EAAQ,CACV,MAAM9J,EAAM,IAAI8O,GAAqBhF,EAAOD,EAAEjmB,KAAMkmB,EAAOD,EAAGC,EAAOhe,MAAOijB,GAC5E,OAAOI,GAAiBlnB,EAAa+X,EAAKlU,EAAQge,EAAOhe,MAC3D,CAAO,CACL,MAAMkU,EAAM,IAAI8O,GAAqB,KAAM5f,EAAOC,OAAQ,EAAG4f,GAC7D,OAAOI,GAAiBlnB,EAAa+X,EAAKlU,EAC5C,GAcIwjB,GAA0B,CAACrnB,EAAaiH,EAAQqgB,EAASC,KAE7D,KACoB,OAAlBD,EAAQ1rB,SACoB,IAA1B0rB,EAAQ1rB,MAAMyG,SACZilB,EAAQ1rB,MAAMoM,QAAQtM,cAAgBsrB,IACtCL,GAAWY,EAAkBjnB,IAAkCgnB,EAAQ1rB,MAAa,QAAEyC,KAAoCipB,EAAQ1rB,MAAa,QAAEwC,SAIhJkpB,EAAQ1rB,MAAMyG,SACjBklB,EAAkBtjB,OAAqCqjB,EAAQ1rB,MAAa,QAAEyC,KAEhFipB,EAAQP,UAEV,MAAMjrB,EAAMkE,EAAYlE,IAClBuoB,EAAcvoB,EAAI+I,SACxB0iB,EAAkBzoB,SAAQ,CAACsmB,EAAK/mB,KAC9B,MAAM1C,EAAO2rB,EAAQ3rB,KACfC,EAAQ0rB,EAAQ1rB,MAChB4rB,EAAa,IAAI7Z,GAAKnF,GAAS6b,EAAa1gB,GAAS7H,EAAIuE,MAAOgkB,IAAe1oB,EAAMA,GAAQA,EAAK2Y,OAAQ1Y,EAAOA,GAASA,EAAM8E,GAAIuG,EAAQ,KAAM,IAAI+f,GAAc3oB,EAAK+mB,IAC/KoC,EAAWvY,UAAUjP,EAAa,GAClCsnB,EAAQ1rB,MAAQ4rB,EAChBF,EAAQP,SAAS,GACjB,EAUEE,GAA0B,CAACH,EAAmBW,KAClD,MAAM,IAAEppB,EAAG,MAAED,GAAUqpB,EACT,OAAVrpB,EACF0oB,EAAkB7iB,OAAO5F,GAEzByoB,EAAkB5oB,IAAIG,EAAKD,EAC7B,EAUIspB,GAA2B,CAACJ,EAASK,KAEzC,KACwB,OAAlBL,EAAQ1rB,QAED0rB,EAAQ1rB,MAAMyG,SAAYilB,EAAQ1rB,MAAMoM,QAAQtM,cAAgBsrB,IAAiBL,GAAWgB,EAA0CL,EAAQ1rB,MAAc,QAAEyC,MAAQ,KAAoCipB,EAAQ1rB,MAAa,QAAEwC,SAG5OkpB,EAAQP,SACV,EAaIa,GAAmB,CAAC5nB,EAAaiH,EAAQqgB,EAASK,KACtD,MAAM7rB,EAAMkE,EAAYlE,IAClBuoB,EAAcvoB,EAAI+I,SAClB0iB,EAAoB,IAAIznB,IAE9B,IAAK,MAAMzB,KAAOspB,EAAY,CAC5B,MAAMvC,EAAMuC,EAAWtpB,GACjBwpB,EAAaP,EAAQR,kBAAkBxmB,IAAIjC,IAAQ,KACzD,IAAKsoB,GAAWkB,EAAYzC,GAAM,CAEhCmC,EAAkBrpB,IAAIG,EAAKwpB,GAC3B,MAAM,KAAElsB,EAAI,MAAEC,GAAU0rB,EACxBA,EAAQ1rB,MAAQ,IAAI+R,GAAKnF,GAAS6b,EAAa1gB,GAAS7H,EAAIuE,MAAOgkB,IAAe1oB,EAAMA,GAAQA,EAAK2Y,OAAQ1Y,EAAOA,GAASA,EAAM8E,GAAIuG,EAAQ,KAAM,IAAI+f,GAAc3oB,EAAK+mB,IAC5KkC,EAAQ1rB,MAAMqT,UAAUjP,EAAa,GACrCsnB,EAAQP,SACV,CACF,CACA,OAAOQ,GAaHO,GAAa,CAAC9nB,EAAaiH,EAAQqgB,EAASS,EAAMJ,KACtDL,EAAQR,kBAAkBhoB,SAAQ,CAACkpB,EAAM3pB,UACfX,IAApBiqB,EAAWtpB,KACbspB,EAAWtpB,GAAO,KACpB,IAEF,MAAMvC,EAAMkE,EAAYlE,IAClBuoB,EAAcvoB,EAAI+I,SACxB6iB,GAAyBJ,EAASK,GAClC,MAAMJ,EAAoBK,GAAiB5nB,EAAaiH,EAAQqgB,EAASK,GAEnE3f,EAAU+f,EAAKrsB,cAAgBkC,OAAS,IAAIqqB,GAAoC,GAAWF,aAAgBrhB,GAAe,IAAIuO,GAAY8S,GAAQ,IAAIG,GAAaH,GACzK,IAAI,KAAEpsB,EAAI,MAAEC,EAAK,MAAEiI,GAAUyjB,EACzBrgB,EAAOsU,eACTiH,GAAoBvb,EAAOsU,cAAe+L,EAAQzjB,MAAOmE,EAAQmgB,aAEnEvsB,EAAQ,IAAI+R,GAAKnF,GAAS6b,EAAa1gB,GAAS7H,EAAIuE,MAAOgkB,IAAe1oB,EAAMA,GAAQA,EAAK2Y,OAAQ1Y,EAAOA,GAASA,EAAM8E,GAAIuG,EAAQ,KAAMe,GAC7IpM,EAAMqT,UAAUjP,EAAa,GAC7BsnB,EAAQ1rB,MAAQA,EAChB0rB,EAAQzjB,MAAQA,EAChByjB,EAAQP,UACRM,GAAwBrnB,EAAaiH,EAAQqgB,EAASC,EAAkB,EAapEa,GAAa,CAACpoB,EAAaiH,EAAQqgB,EAAS/pB,EAAQoqB,KACxD,MAAM7rB,EAAMkE,EAAYlE,IAClBuoB,EAAcvoB,EAAI+I,SACxB6iB,GAAyBJ,EAASK,GAClC,MAAMJ,EAAoBK,GAAiB5nB,EAAaiH,EAAQqgB,EAASK,GAKzEU,EAAe,KACK,OAAlBf,EAAQ1rB,QACP2B,EAAS,GAENgqB,EAAkB7kB,KAAO,IACxB4kB,EAAQ1rB,MAAMyG,SAAWilB,EAAQ1rB,MAAMoM,QAAQtM,cAAgBsrB,MAGpE,CACA,IAAKM,EAAQ1rB,MAAMyG,QACjB,OAAQilB,EAAQ1rB,MAAMoM,QAAQtM,aAC5B,KAAKsrB,GAAe,CAClB,MAAM,IAAE3oB,EAAG,MAAED,GAAwCkpB,EAAQ1rB,MAAa,QACpE0sB,EAAOX,EAAWtpB,GACxB,QAAaX,IAAT4qB,EAAoB,CACtB,GAAI3B,GAAW2B,EAAMlqB,GACnBmpB,EAAkBtjB,OAAO5F,OACpB,CACL,GAAe,IAAXd,EAGF,MAAM8qB,EAERd,EAAkBrpB,IAAIG,EAAKD,EAC7B,CACAkpB,EAAQ1rB,MAAMqI,OAAOjE,EACvB,MACEsnB,EAAQR,kBAAkB5oB,IAAIG,EAAKD,GAErC,KACF,CACA,QACMb,EAAS+pB,EAAQ1rB,MAAM2B,QACzBkZ,GAAkBzW,EAAawI,GAAS8e,EAAQ1rB,MAAM8E,GAAGE,OAAQ0mB,EAAQ1rB,MAAM8E,GAAGf,MAAQpC,IAE5FA,GAAU+pB,EAAQ1rB,MAAM2B,OAI9B+pB,EAAQP,SACV,CAIA,GAAIxpB,EAAS,EAAG,CACd,IAAIgrB,EAAW,GACf,KAAOhrB,EAAS,EAAGA,IACjBgrB,GAAY,KAEdjB,EAAQ1rB,MAAQ,IAAI+R,GAAKnF,GAAS6b,EAAa1gB,GAAS7H,EAAIuE,MAAOgkB,IAAeiD,EAAQ3rB,KAAM2rB,EAAQ3rB,MAAQ2rB,EAAQ3rB,KAAK2Y,OAAQgT,EAAQ1rB,MAAO0rB,EAAQ1rB,OAAS0rB,EAAQ1rB,MAAM8E,GAAIuG,EAAQ,KAAM,IAAIghB,GAAcM,IACvNjB,EAAQ1rB,MAAMqT,UAAUjP,EAAa,GACrCsnB,EAAQP,SACV,CACAM,GAAwBrnB,EAAaiH,EAAQqgB,EAASC,EAAkB,EAgBpEiB,GAAuB,CAACxoB,EAAawjB,EAAO1F,EAAM2K,EAAiBC,KACvE,IAAIjF,EAAM3F,EACV,MAAM6K,EAAgB1qB,EAAA,GAASyqB,GAC/B,KAAOjF,KAASA,EAAIpP,WAAaoP,EAAIphB,UAC9BohB,EAAIphB,SAAWohB,EAAIzb,QAAQtM,cAAgBsrB,IAC9CC,GAAwB0B,EAA6ClF,EAAW,SAElFA,EAAMA,EAAI7nB,MAEZ,IAAIgtB,EAAW,EACXC,GAAmB,EACvB,KAAOrF,IAAUC,GAAK,CAIpB,GAHI3F,IAAS0F,IACXqF,GAAmB,IAEhBrF,EAAMnhB,QAAS,CAClB,MAAM2F,EAAUwb,EAAMxb,QACtB,OAAQA,EAAQtM,aACd,KAAKsrB,GAAe,CAClB,MAAM,IAAE3oB,EAAG,MAAED,GAAuC,EAC9C0qB,EAAiBL,EAAgBnoB,IAAIjC,IAAQ,MAC9CsqB,EAAcroB,IAAIjC,IAAQ,QAAUD,GAAS0qB,IAAmB1qB,IAEnEolB,EAAMvf,OAAOjE,GACb4oB,IACKC,IAAqBH,EAAepoB,IAAIjC,IAAQ,QAAUD,IAAUqqB,EAAgBnoB,IAAIjC,IAAQ,QAAUD,IACtF,OAAnB0qB,EACFJ,EAAezkB,OAAO5F,GAEtBqqB,EAAexqB,IAAIG,EAAKyqB,KAI9B,KACF,EAEJ,CACAtF,EAA6BA,EAAW,KAC1C,CACA,OAAOoF,GAuCHG,GAAyBpiB,IAC7B,IAAIqL,EAAM,EAsBV,OArBAhM,GAA6BW,EAAQ,KAAG3G,IACtC,IAAIwjB,EAA6B7c,EAAW,OACxC8c,EAAM9c,EAAKO,OACXuhB,EAAkBxqB,EAAA,KACtB,MAAM6oB,EAAoB7oB,EAAA,GAASwqB,GACnC,KAAOhF,IACe,IAAhBA,EAAIphB,UACEohB,EAAIzb,QAAQtM,cACbsrB,GACHC,GAAwBH,EAAiDrD,EAAW,UAGpFzR,GAAOwW,GAAqBxoB,EAAawjB,EAAOC,EAAKgF,EAAiB3B,GACtE2B,EAAkBxqB,EAAA,GAAS6oB,GAC3BtD,EAAQC,IAIdA,EAAMA,EAAI7nB,KACZ,IAEKoW,GAYHgX,GAAa,CAAChpB,EAAasnB,EAAS/pB,KACxC,MAAMynB,EAAcznB,EACd0rB,EAAahrB,EAAA,GAASqpB,EAAQR,mBAC9BtD,EAAQ8D,EAAQ1rB,MACtB,KAAO2B,EAAS,GAAuB,OAAlB+pB,EAAQ1rB,OAAgB,CAC3C,IAA8B,IAA1B0rB,EAAQ1rB,MAAMyG,QAChB,OAAQilB,EAAQ1rB,MAAMoM,QAAQtM,aAC5B,KAAKuZ,GACL,KAAKiT,GACL,KAAKD,GACC1qB,EAAS+pB,EAAQ1rB,MAAM2B,QACzBkZ,GAAkBzW,EAAawI,GAAS8e,EAAQ1rB,MAAM8E,GAAGE,OAAQ0mB,EAAQ1rB,MAAM8E,GAAGf,MAAQpC,IAE5FA,GAAU+pB,EAAQ1rB,MAAM2B,OACxB+pB,EAAQ1rB,MAAMqI,OAAOjE,GAI3BsnB,EAAQP,SACV,CACIvD,GACFgF,GAAqBxoB,EAAawjB,EAAO8D,EAAQ1rB,MAAOqtB,EAAY3B,EAAQR,mBAE9E,MAAM7f,GAAgEqgB,EAAQ3rB,MAAQ2rB,EAAQ1rB,OAAa,OAI3G,OAHIqL,EAAOsU,eACTiH,GAAoBvb,EAAOsU,cAAe+L,EAAQzjB,OAAQmhB,EAAcznB,GAEnE+pB,GAkCT,MAAM4B,WAAmBtI,GAMvBllB,YAAaytB,EAAOnpB,EAAa8Y,GAC/BrZ,MAAM0pB,EAAOnpB,GAMbnE,KAAKutB,kBAAmB,EAKxBvtB,KAAKkX,YAAc,IAAI5N,IACvB2T,EAAKha,SAASuqB,IACA,OAARA,EACFxtB,KAAKutB,kBAAmB,EAExBvtB,KAAKkX,YAAY7M,IAAImjB,EACvB,GAEJ,CAKI1W,cACF,GAAsB,OAAlB9W,KAAKglB,SAAmB,CAI1B,MAAMlO,EAAU,CACdjJ,KAAM7N,KAAK6N,KACX2X,MAAOxlB,KAAKwlB,MACZzO,MAAO,IAAIzN,IACX9C,QAAS,IAAI8C,KAEftJ,KAAKglB,SAAWlO,CAClB,CACA,OAA2B9W,KAAa,QAC1C,CAUIwlB,YACF,GAAoB,OAAhBxlB,KAAKklB,OAAiB,CACxB,MAAM8B,EAAwBhnB,KAAKqd,OAAU,IAIvCmI,EAAQ,GACdrb,GAAS6c,GAAG7iB,IACV,MAAM8mB,EAAoB,IAAIhnB,IACxBwpB,EAAgB,IAAIxpB,IAC1B,IAAI8C,EAAO/G,KAAKqd,OAAOhS,OAInB+Z,EAAS,KAIb,MAAM0G,EAAa,CAAC,EAIpB,IAAIpG,EAAS,GACTE,EAAS,EACT8H,EAAY,EAChB,MAAMC,EAAQ,KACZ,GAAe,OAAXvI,EAAiB,CAInB,IAAIwI,EACJ,OAAQxI,GACN,IAAK,SACHwI,EAAK,CAAExlB,OAAQslB,GACfA,EAAY,EACZ,MACF,IAAK,SACHE,EAAK,CAAElI,UACHuF,EAAkBpkB,KAAO,IAC3B+mB,EAAG9B,WAAa,CAAC,EACjBb,EAAkBhoB,SAAQ,CAACV,EAAOC,KAClB,OAAVD,IACFqrB,EAAG9B,WAAWtpB,GAAOD,EACvB,KAGJmjB,EAAS,GACT,MACF,IAAK,SAEH,GADAkI,EAAK,CAAEhI,UACHljB,OAAOmL,KAAKie,GAAYpqB,OAAS,EAAG,CACtCksB,EAAG9B,WAAa,CAAC,EACjB,IAAK,MAAMtpB,KAAOspB,EAChB8B,EAAG9B,WAAWtpB,GAAOspB,EAAWtpB,EAEpC,CACAojB,EAAS,EAGbJ,EAAM1jB,KAAK8rB,GACXxI,EAAS,IACX,GAEF,KAAgB,OAATre,GAAe,CACpB,OAAQA,EAAKoF,QAAQtM,aACnB,KAAKuZ,GACL,KAAKiT,GACCrsB,KAAKslB,KAAKve,GACP/G,KAAKqE,QAAQ0C,KAChB4mB,IACAvI,EAAS,SACTM,EAAS3e,EAAKoF,QAAQ6K,aAAa,GACnC2W,KAEO3tB,KAAKqE,QAAQ0C,IACP,WAAXqe,IACFuI,IACAvI,EAAS,UAEXsI,GAAa,GACH3mB,EAAKP,UACA,WAAX4e,IACFuI,IACAvI,EAAS,UAEXQ,GAAU,GAEZ,MACF,KAAKwG,GACCpsB,KAAKslB,KAAKve,GACP/G,KAAKqE,QAAQ0C,KACD,WAAXqe,IACFuI,IACAvI,EAAS,UAEXM,GAAwC3e,EAAY,QAAE8mB,KAE/C7tB,KAAKqE,QAAQ0C,IACP,WAAXqe,IACFuI,IACAvI,EAAS,UAEXsI,GAAa3mB,EAAKrF,QACRqF,EAAKP,UACA,WAAX4e,IACFuI,IACAvI,EAAS,UAEXQ,GAAU7e,EAAKrF,QAEjB,MACF,KAAKypB,GAAe,CAClB,MAAM,IAAE3oB,EAAG,MAAED,GAAwCwE,EAAY,QACjE,GAAI/G,KAAKslB,KAAKve,IACZ,IAAK/G,KAAKqE,QAAQ0C,GAAO,CACvB,MAAM+mB,EAAS7C,EAAkBxmB,IAAIjC,IAAQ,KACxCsoB,GAAWgD,EAAQvrB,GASH,OAAVA,GACTwE,EAAKqB,OAAOjE,IATG,WAAXihB,GACFuI,IAEE7C,GAAWvoB,EAAQkrB,EAAchpB,IAAIjC,IAAQ,aACxCspB,EAAWtpB,GAElBspB,EAAWtpB,GAAOD,EAKxB,OACK,GAAIvC,KAAKqE,QAAQ0C,GAAO,CAC7B0mB,EAAcprB,IAAIG,EAAKD,GACvB,MAAMurB,EAAS7C,EAAkBxmB,IAAIjC,IAAQ,KACxCsoB,GAAWgD,EAAQvrB,KACP,WAAX6iB,GACFuI,IAEF7B,EAAWtpB,GAAOsrB,EAEtB,MAAO,IAAK/mB,EAAKP,QAAS,CACxBinB,EAAcprB,IAAIG,EAAKD,GACvB,MAAMkqB,EAAOX,EAAWtpB,QACXX,IAAT4qB,IACG3B,GAAW2B,EAAMlqB,GASF,OAATkqB,GACT1lB,EAAKqB,OAAOjE,IATG,WAAXihB,GACFuI,IAEY,OAAVprB,SACKupB,EAAWtpB,GAElBspB,EAAWtpB,GAAOD,GAM1B,CACKwE,EAAKP,UACO,WAAX4e,GACFuI,IAEFvC,GAAwBH,EAAiDlkB,EAAY,UAEvF,KACF,EAEFA,EAAOA,EAAKhH,KACd,CAEA,IADA4tB,IACOnI,EAAM9jB,OAAS,GAAG,CACvB,MAAMmf,EAAS2E,EAAMA,EAAM9jB,OAAS,GACpC,QAAsBG,IAAlBgf,EAAO+E,aAA8C/jB,IAAtBgf,EAAOiL,WAIxC,MAFAtG,EAAMjT,KAIV,KAEFvS,KAAKklB,OAASM,CAChB,CACA,OAA2BxlB,KAAW,MACxC,EAYF,MAAM2L,WAAcd,GAIlBhL,YAAakuB,GACXnqB,QAKA5D,KAAKguB,cAAsBnsB,IAAXksB,EAAuB,CAAC,IAAM/tB,KAAK0lB,OAAO,EAAGqI,IAAW,GAIxE/tB,KAAK0f,cAAgB,EACvB,CAOIhe,aACF,OAAO1B,KAAKsL,OACd,CAMAN,WAAYgc,EAAGjgB,GACbnD,MAAMoH,WAAWgc,EAAGjgB,GACpB,IACkC/G,KAAa,SAAEiD,SAAQxD,GAAKA,KAC9D,CAAE,MAAOwuB,GACPnrB,QAAQgN,MAAMme,EAChB,CACAjuB,KAAKguB,SAAW,IAClB,CAEA/G,QACE,OAAO,IAAItb,EACb,CAKAub,QACE,MAAMgF,EAAO,IAAIvgB,GAEjB,OADAugB,EAAKgC,WAAWluB,KAAKmuB,WACdjC,CACT,CAQA/O,cAAehZ,EAAaimB,GAC1BxmB,MAAMuZ,cAAchZ,EAAaimB,GACjC,MAAMvT,EAAQ,IAAIwW,GAAWrtB,KAAMmE,EAAaimB,GAC1CnqB,EAAMkE,EAAYlE,IAGxB,GAFA4mB,GAAkB7mB,KAAMmE,EAAa0S,IAEhC1S,EAAYkN,MAAO,CAEtB,IAAI+c,GAAsB,EAC1B,IAAK,MAAOrpB,EAAQspB,KAAelqB,EAAYsX,WAAW3K,UAAW,CACnE,MAAMhN,EAAQK,EAAYqX,YAAY/W,IAAIM,IAAW,EACrD,GAAIspB,IAAevqB,IAGnBa,GAAeR,EAA4ClE,EAAIuE,MAAMR,QAAQS,IAAIM,GAAUjB,EAAOuqB,GAAYtnB,IACvGA,EAAKP,SAA+B,EAAO2F,QAAQtM,cAAgBsrB,KACtEiD,GAAsB,EACxB,IAEEA,GACF,KAEJ,CACKA,GACHlqB,EAAsBC,EAAaA,EAAYuT,WAAW3Q,IACpDA,aAAgB4K,IAAMyc,GAGtBrnB,EAAKqE,SAAWpL,MAAQ+G,EAAKoF,QAAQtM,cAAgBsrB,KACvDiD,GAAsB,EACxB,IAGJjkB,GAASlK,GAAM8K,IACTqjB,EAGFlB,GAAuBltB,MAKvBkE,EAAsB6G,EAAGA,EAAE2M,WAAW3Q,IAChCA,aAAgB4K,IAGhB5K,EAAKqE,SAAWpL,MAjeQ,EAACmE,EAAa4C,KAEpD,KAAOA,GAAQA,EAAKhH,QAAUgH,EAAKhH,MAAMyG,UAAYO,EAAKhH,MAAMyY,YAC9DzR,EAAOA,EAAKhH,MAEd,MAAMuuB,EAAQ,IAAIhlB,IAElB,KAAOvC,IAASA,EAAKP,UAAYO,EAAKyR,YAAY,CAChD,IAAKzR,EAAKP,SAAWO,EAAKoF,QAAQtM,cAAgBsrB,GAAe,CAC/D,MAAM3oB,EAAoCuE,EAAY,QAAEvE,IACpD8rB,EAAMvoB,IAAIvD,GACZuE,EAAKqB,OAAOjE,GAEZmqB,EAAMjkB,IAAI7H,EAEd,CACAuE,EAAOA,EAAKjH,IACd,GAidYyuB,CAAgCxjB,EAAGhE,EACrC,GAEJ,GAEJ,CACF,CAOAxH,WACE,IAAIsuB,EAAM,GAIN1iB,EAAInL,KAAKqL,OACb,KAAa,OAANF,IACAA,EAAE3E,SAAW2E,EAAEqN,WAAarN,EAAEgB,QAAQtM,cAAgBusB,KACzDyB,GAAqC1iB,EAAS,QAAE0iB,KAElD1iB,EAAIA,EAAEpL,MAER,OAAO8tB,CACT,CAQA7hB,SACE,OAAOhM,KAAKT,UACd,CAYA2uB,WAAY1I,GAAO,SAAEgJ,GAAW,GAAS,CAAC,GACvB,OAAbxuB,KAAKC,IACPkK,GAASnK,KAAKC,KAAKkE,IACjB,MAAMsnB,EAAU,IAAIT,GAAqB,KAAMhrB,KAAKqL,OAAQ,EAAG,IAAIpH,KACnE,IAAK,IAAIpF,EAAI,EAAGA,EAAI2mB,EAAM9jB,OAAQ7C,IAAK,CACrC,MAAM+uB,EAAKpI,EAAM3mB,GACjB,QAAkBgD,IAAd+rB,EAAGlI,OAAsB,CAM3B,MAAM+I,EAAQD,GAAiC,iBAAdZ,EAAGlI,QAAuB7mB,IAAM2mB,EAAM9jB,OAAS,GAAuB,OAAlB+pB,EAAQ1rB,OAA0C,OAAxB6tB,EAAGlI,OAAO1f,OAAO,GAAwC4nB,EAAGlI,OAA5BkI,EAAGlI,OAAO1f,MAAM,GAAI,IAChJ,iBAARyoB,GAAoBA,EAAI/sB,OAAS,IAC1CuqB,GAAW9nB,EAAanE,KAAMyrB,EAASgD,EAAKb,EAAG9B,YAAc,CAAC,EAElE,WAAyBjqB,IAAd+rB,EAAGhI,OACZ2G,GAAWpoB,EAAanE,KAAMyrB,EAASmC,EAAGhI,OAAQgI,EAAG9B,YAAc,CAAC,QAC7CjqB,IAAd+rB,EAAGxlB,QACZ+kB,GAAWhpB,EAAasnB,EAASmC,EAAGxlB,OAExC,KAG8BpI,KAAa,SAAE8B,MAAK,IAAM9B,KAAKkuB,WAAW1I,IAE9E,CAYA2I,QAAS/T,EAAUsU,EAAcC,GAI/B,MAAMC,EAAM,GACN3D,EAAoB,IAAIhnB,IACxBhE,EAA0BD,KAAQ,IACxC,IAAI6tB,EAAM,GACN1iB,EAAInL,KAAKqL,OACb,SAASwjB,IACP,GAAIhB,EAAInsB,OAAS,EAAG,CAKlB,MAAMoqB,EAAa,CAAC,EACpB,IAAIgD,GAAgB,EACpB7D,EAAkBhoB,SAAQ,CAACV,EAAOC,KAChCssB,GAAgB,EAChBhD,EAAWtpB,GAAOD,CAAK,IAKzB,MAAMqrB,EAAK,CAAElI,OAAQmI,GACjBiB,IACFlB,EAAG9B,WAAaA,GAElB8C,EAAI9sB,KAAK8rB,GACTC,EAAM,EACR,CACF,CA+DA,OA5DA1jB,GAASlK,GAAKkE,IAOZ,IANIiW,GACFO,GAA6BxW,EAAaiW,GAExCsU,GACF/T,GAA6BxW,EAAauqB,GAE/B,OAANvjB,GAAY,CACjB,GAAIuP,GAAUvP,EAAGiP,SAA+BvY,IAAjB6sB,GAA8BhU,GAAUvP,EAAGujB,GACxE,OAAQvjB,EAAEgB,QAAQtM,aAChB,KAAKusB,GAAe,CAClB,MAAM2C,EAAM9D,EAAkBxmB,IAAI,gBACjB5C,IAAbuY,GAA2BM,GAAUvP,EAAGiP,QAKhBvY,IAAjB6sB,GAA+BhU,GAAUvP,EAAGujB,QAKpC7sB,IAARktB,IACTF,IACA5D,EAAkB7iB,OAAO,iBANbvG,IAARktB,GAAqBA,EAAIvY,OAASrL,EAAEtG,GAAGE,QAAuB,UAAbgqB,EAAIjkB,OACvD+jB,IACA5D,EAAkB5oB,IAAI,UAAWssB,EAAiBA,EAAe,QAASxjB,EAAEtG,IAAM,CAAEiG,KAAM,gBAPhFjJ,IAARktB,GAAqBA,EAAIvY,OAASrL,EAAEtG,GAAGE,QAAuB,YAAbgqB,EAAIjkB,OACvD+jB,IACA5D,EAAkB5oB,IAAI,UAAWssB,EAAiBA,EAAe,UAAWxjB,EAAEtG,IAAM,CAAEiG,KAAM,aAWhG+iB,GAAqC1iB,EAAS,QAAE0iB,IAChD,KACF,CACA,KAAKzU,GACL,KAAKiT,GAAc,CACjBwC,IAIA,MAAMjB,EAAK,CACTlI,OAAQva,EAAEgB,QAAQ6K,aAAa,IAEjC,GAAIiU,EAAkBpkB,KAAO,EAAG,CAC9B,MAAMynB,EAA0C,CAAG,EACnDV,EAAG9B,WAAawC,EAChBrD,EAAkBhoB,SAAQ,CAACV,EAAOC,KAChC8rB,EAAM9rB,GAAOD,CAAK,GAEtB,CACAqsB,EAAI9sB,KAAK8rB,GACT,KACF,CACA,KAAKzC,GACCzQ,GAAUvP,EAAGiP,KACfyU,IACAzD,GAAwBH,EAAiD9f,EAAS,UAK1FA,EAAIA,EAAEpL,KACR,CACA8uB,GAAS,GACR,WACID,CACT,CAYAlJ,OAAQ1d,EAAOkkB,EAAMJ,GACnB,GAAII,EAAKxqB,QAAU,EACjB,OAEF,MAAMslB,EAAIhnB,KAAKC,IACL,OAAN+mB,EACF7c,GAAS6c,GAAG7iB,IACV,MAAM+X,EAAMqP,GAAapnB,EAAanE,KAAMgI,GACvC8jB,IACHA,EAAa,CAAC,EAEd5P,EAAI+O,kBAAkBhoB,SAAQ,CAAC0mB,EAAGqF,KAAQlD,EAAWkD,GAAKrF,CAAC,KAE7DsC,GAAW9nB,EAAanE,KAAMkc,EAAKgQ,EAAMJ,EAAW,IAGtB9rB,KAAa,SAAE8B,MAAK,IAAM9B,KAAK0lB,OAAO1d,EAAOkkB,EAAMJ,IAEvF,CAYAmD,YAAajnB,EAAO2H,EAAOmc,EAAa,CAAC,GACvC,MAAM9E,EAAIhnB,KAAKC,IACL,OAAN+mB,EACF7c,GAAS6c,GAAG7iB,IACV,MAAM+X,EAAMqP,GAAapnB,EAAanE,KAAMgI,GAC5CikB,GAAW9nB,EAAanE,KAAMkc,EAAKvM,EAAOmc,EAAW,IAGvB9rB,KAAa,SAAE8B,MAAK,IAAM9B,KAAKivB,YAAYjnB,EAAO2H,EAAOmc,IAE7F,CAUA1jB,OAAQJ,EAAOtG,GACb,GAAe,IAAXA,EACF,OAEF,MAAMslB,EAAIhnB,KAAKC,IACL,OAAN+mB,EACF7c,GAAS6c,GAAG7iB,IACVgpB,GAAWhpB,EAAaonB,GAAapnB,EAAanE,KAAMgI,GAAQtG,EAAO,IAGzC1B,KAAa,SAAE8B,MAAK,IAAM9B,KAAKoI,OAAOJ,EAAOtG,IAEjF,CAYAkqB,OAAQ5jB,EAAOtG,EAAQoqB,GACrB,GAAe,IAAXpqB,EACF,OAEF,MAAMslB,EAAIhnB,KAAKC,IACL,OAAN+mB,EACF7c,GAAS6c,GAAG7iB,IACV,MAAM+X,EAAMqP,GAAapnB,EAAanE,KAAMgI,GAC1B,OAAdkU,EAAInc,OAGRwsB,GAAWpoB,EAAanE,KAAMkc,EAAKxa,EAAQoqB,EAAW,IAGxB9rB,KAAa,SAAE8B,MAAK,IAAM9B,KAAK4rB,OAAO5jB,EAAOtG,EAAQoqB,IAEzF,CAWAoD,gBAAiBC,GACE,OAAbnvB,KAAKC,IACPkK,GAASnK,KAAKC,KAAKkE,IACjBilB,GAAcjlB,EAAanE,KAAMmvB,EAAc,IAGjBnvB,KAAa,SAAE8B,MAAK,IAAM9B,KAAKkvB,gBAAgBC,IAEnF,CAYAC,aAAcD,EAAeE,GACV,OAAbrvB,KAAKC,IACPkK,GAASnK,KAAKC,KAAKkE,IACjBklB,GAAWllB,EAAanE,KAAMmvB,EAAeE,EAAe,IAG9BrvB,KAAa,SAAE8B,MAAK,IAAM9B,KAAKovB,aAAaD,EAAeE,IAE/F,CAaAC,aAAcH,GACZ,OAA2B7F,GAAWtpB,KAAMmvB,EAC9C,CAWAI,gBACE,OAAO/F,GAAcxpB,KACvB,CAKAmnB,OAAQzgB,GACNA,EAAQ2I,aAAamgB,GACvB,EA8CF,MAAMC,GAKJ5vB,YAAa6vB,EAAMjwB,EAAI,MAAM,IAC3BO,KAAK2vB,QAAUlwB,EACfO,KAAK4vB,MAAQF,EAIb1vB,KAAK6vB,aAAoCH,EAAW,OACpD1vB,KAAK8vB,YAAa,CACpB,CAEA,CAACnwB,OAAO0D,YACN,OAAOrD,IACT,CASAoD,OAIE,IAAI+H,EAAInL,KAAK6vB,aACT/kB,EAAOK,GAAKA,EAAEgB,SAA+BhB,EAAS,QAAEL,KAC5D,GAAU,OAANK,KAAgBnL,KAAK8vB,YAAc3kB,EAAE3E,UAAYxG,KAAK2vB,QAAQ7kB,IAChE,GAEE,GADAA,EAA2BK,EAAS,QAAEL,KACjCK,EAAE3E,SAAYsE,EAAKjL,cAAgBkwB,IAAejlB,EAAKjL,cAAgBkM,IAAiC,OAAhBjB,EAAKO,OAKhG,KAAa,OAANF,GAAY,CACjB,GAAgB,OAAZA,EAAEpL,MAAgB,CACpBoL,EAAIA,EAAEpL,MACN,KACF,CACEoL,EADSA,EAAEC,SAAWpL,KAAK4vB,MACvB,KAEkCzkB,EAAQ,OAAE5B,KAEpD,MAZA4B,EAAIL,EAAKO,aAcE,OAANF,IAAeA,EAAE3E,UAAYxG,KAAK2vB,QAAoCxkB,EAAS,QAAEL,QAG5F,OADA9K,KAAK8vB,YAAa,EACR,OAAN3kB,EAEK,CAAE5I,WAAOV,EAAW2B,MAAM,IAEnCxD,KAAK6vB,aAAe1kB,EACb,CAAE5I,MAA2B4I,EAAS,QAAEL,KAAMtH,MAAM,GAC7D,EAYF,MAAMuI,WAAqBlB,GACzBhL,cACE+D,QAIA5D,KAAK+pB,eAAiB,EACxB,CAKIiG,iBACF,MAAMC,EAAQjwB,KAAKqnB,OACnB,OAAO4I,EAAQA,EAAM9jB,QAAQ6K,aAAa,GAAK,IACjD,CAYAhM,WAAYgc,EAAGjgB,GACbnD,MAAMoH,WAAWgc,EAAGjgB,GACpB/G,KAAK0lB,OAAO,EAA8B1lB,KAAmB,gBAC7DA,KAAK+pB,eAAiB,IACxB,CAEA9C,QACE,OAAO,IAAIlb,EACb,CAKAmb,QACE,MAAMiD,EAAK,IAAIpe,GAGf,OADAoe,EAAGzE,OAAO,EAAG1lB,KAAKkqB,UAAU9nB,KAAI2E,GAAQA,aAAgB8D,GAAe9D,EAAKmgB,QAAUngB,KAC/EojB,CACT,CAEIzoB,aACF,OAA+B,OAAxB1B,KAAK+pB,eAA0B/pB,KAAKsL,QAAUtL,KAAK+pB,eAAeroB,MAC3E,CAmBAwuB,iBAAkBnd,GAChB,OAAO,IAAI0c,GAAezvB,KAAM+S,EAClC,CAiBAod,cAAeC,GACbA,EAAQA,EAAMC,cAEd,MACMjtB,EADW,IAAIqsB,GAAezvB,MAAMswB,GAAWA,EAAQC,UAAYD,EAAQC,SAASF,gBAAkBD,IACtFhtB,OACtB,OAAIA,EAAKI,KACA,KAEAJ,EAAKb,KAEhB,CAaAiuB,iBAAkBJ,GAGhB,OAFAA,EAAQA,EAAMC,cAEP7lB,MAAMC,KAAK,IAAIglB,GAAezvB,MAAMswB,GAAWA,EAAQC,UAAYD,EAAQC,SAASF,gBAAkBD,IAC/G,CAQAjT,cAAehZ,EAAaimB,GAC1BvD,GAAkB7mB,KAAMmE,EAAa,IAAIssB,GAAUzwB,KAAMoqB,EAAYjmB,GACvE,CAOA5E,WACE,OAAO0oB,GAAYjoB,MAAM0wB,GAAOA,EAAInxB,aAAY0C,KAAK,GACvD,CAKA+J,SACE,OAAOhM,KAAKT,UACd,CAiBAoxB,MAAOC,EAAY1wB,SAAU2wB,EAAQ,CAAC,EAAGC,GACvC,MAAMC,EAAWH,EAAUI,yBAO3B,YANgBnvB,IAAZivB,GACFA,EAAQG,mBAAmBF,EAAU/wB,MAEvCgoB,GAAgBhoB,MAAMkxB,IACpBH,EAASI,aAAaD,EAAQP,MAAMC,EAAWC,EAAOC,GAAU,KAAK,IAEhEC,CACT,CAYArL,OAAQ1d,EAAOmE,GACI,OAAbnM,KAAKC,IACPkK,GAASnK,KAAKC,KAAKkE,IACjB6kB,GAAuB7kB,EAAanE,KAAMgI,EAAOmE,EAAQ,IAI3DnM,KAAK+pB,eAAe7hB,OAAOF,EAAO,KAAMmE,EAE5C,CAYAilB,YAAaC,EAAKllB,GAChB,GAAiB,OAAbnM,KAAKC,IACPkK,GAASnK,KAAKC,KAAKkE,IACjB,MAAMmtB,EAAWD,GAAOA,aAAexmB,GAAgBwmB,EAAI9nB,MAAQ8nB,EACnE/I,GAA4BnkB,EAAanE,KAAMsxB,EAASnlB,EAAQ,QAE7D,CACL,MAAMolB,EAAgCvxB,KAAmB,eACnDgI,EAAgB,OAARqpB,EAAe,EAAIE,EAAGC,WAAUrH,GAAMA,IAAOkH,IAAO,EAClE,GAAc,IAAVrpB,GAAuB,OAARqpB,EACjB,MAAMvhB,EAAA,GAAa,4BAErByhB,EAAGrpB,OAAOF,EAAO,KAAMmE,EACzB,CACF,CAQA/D,OAAQJ,EAAOtG,EAAS,GACL,OAAb1B,KAAKC,IACPkK,GAASnK,KAAKC,KAAKkE,IACjB+kB,GAAe/kB,EAAanE,KAAMgI,EAAOtG,EAAO,IAIlD1B,KAAK+pB,eAAe7hB,OAAOF,EAAOtG,EAEtC,CAOAwoB,UACE,OAAOpC,GAAgB9nB,KACzB,CAOA8B,KAAMqK,GACJnM,KAAK0lB,OAAO1lB,KAAK0B,OAAQyK,EAC3B,CAOA1J,QAAS0J,GACPnM,KAAK0lB,OAAO,EAAGvZ,EACjB,CAQA1H,IAAKuD,GACH,OAAOqgB,GAAYroB,KAAMgI,EAC3B,CASAhC,MAAO2hB,EAAQ,EAAGC,EAAM5nB,KAAK0B,QAC3B,OAAOgmB,GAAc1nB,KAAM2nB,EAAOC,EACpC,CAOA3kB,QAASxD,GACPuoB,GAAgBhoB,KAAMP,EACxB,CAUA0nB,OAAQzgB,GACNA,EAAQ2I,aAAaoiB,GACvB,EAmBF,MAAM1B,WAAoBhkB,GACxBlM,YAAa0wB,EAAW,aACtB3sB,QACA5D,KAAKuwB,SAAWA,EAIhBvwB,KAAK0xB,aAAe,IAAIztB,GAC1B,CAKI0tB,kBACF,MAAMxmB,EAAInL,KAAKuJ,MAAQvJ,KAAKuJ,MAAMnG,KAAO,KACzC,OAAO+H,EAAqEA,EAAS,QAAM,KAAI,IACjG,CAKIymB,kBACF,MAAMzmB,EAAInL,KAAKuJ,MAAQvJ,KAAKuJ,MAAMgc,KAAO,KACzC,OAAOpa,EAAqEA,EAAS,QAAM,KAAI,IACjG,CAYAH,WAAYgc,EAAGjgB,GACbnD,MAAMoH,WAAWgc,EAAGjgB,GACe/G,KAAkB,aAAEiD,SAAQ,CAACV,EAAOC,KACrExC,KAAKovB,aAAa5sB,EAAKD,EAAM,IAE/BvC,KAAK0xB,aAAe,IACtB,CAOAzK,QACE,OAAO,IAAI8I,GAAY/vB,KAAKuwB,SAC9B,CAKArJ,QACE,MAAMiD,EAAK,IAAI4F,GAAY/vB,KAAKuwB,UAC1BjC,EAAQtuB,KAAKuvB,gBACnB,IAAK,MAAM/sB,KAAO8rB,EAChBnE,EAAGiF,aAAa5sB,EAAK8rB,EAAM9rB,IAI7B,OADA2nB,EAAGzE,OAAO,EAAG1lB,KAAKkqB,UAAU9nB,KAAI2E,GAAQA,aAAgB8D,GAAe9D,EAAKmgB,QAAUngB,KAC/EojB,CACT,CAWA5qB,WACE,MAAM+uB,EAAQtuB,KAAKuvB,gBACbsC,EAAgB,GAChBhkB,EAAO,GACb,IAAK,MAAMrL,KAAO8rB,EAChBzgB,EAAK/L,KAAKU,GAEZqL,EAAKtI,OACL,MAAMusB,EAAUjkB,EAAKnM,OACrB,IAAK,IAAI7C,EAAI,EAAGA,EAAIizB,EAASjzB,IAAK,CAChC,MAAM2D,EAAMqL,EAAKhP,GACjBgzB,EAAc/vB,KAAKU,EAAM,KAAO8rB,EAAM9rB,GAAO,IAC/C,CACA,MAAM+tB,EAAWvwB,KAAKuwB,SAASwB,oBAE/B,MAAO,IAAIxB,IADSsB,EAAcnwB,OAAS,EAAI,IAAMmwB,EAAc5vB,KAAK,KAAO,MAC1C2B,MAAMrE,eAAegxB,IAC5D,CASArB,gBAAiBC,GACE,OAAbnvB,KAAKC,IACPkK,GAASnK,KAAKC,KAAKkE,IACjBilB,GAAcjlB,EAAanE,KAAMmvB,EAAc,IAGjBnvB,KAAiB,aAAEoI,OAAO+mB,EAE9D,CAUAC,aAAcD,EAAeE,GACV,OAAbrvB,KAAKC,IACPkK,GAASnK,KAAKC,KAAKkE,IACjBklB,GAAWllB,EAAanE,KAAMmvB,EAAeE,EAAe,IAG7BrvB,KAAiB,aAAEqC,IAAI8sB,EAAeE,EAE3E,CAWAC,aAAcH,GACZ,OAA2B7F,GAAWtpB,KAAMmvB,EAC9C,CAUA6C,aAAc7C,GACZ,OAA2B1F,GAAWzpB,KAAMmvB,EAC9C,CASAI,gBACE,OAAO/F,GAAcxpB,KACvB,CAiBA2wB,MAAOC,EAAY1wB,SAAU2wB,EAAQ,CAAC,EAAGC,GACvC,MAAMmB,EAAMrB,EAAUsB,cAAclyB,KAAKuwB,UACnCjC,EAAQtuB,KAAKuvB,gBACnB,IAAK,MAAM/sB,KAAO8rB,EAChB2D,EAAI7C,aAAa5sB,EAAK8rB,EAAM9rB,IAQ9B,OANAwlB,GAAgBhoB,MAAMmyB,IACpBF,EAAIG,YAAYD,EAAKxB,MAAMC,EAAWC,EAAOC,GAAS,SAExCjvB,IAAZivB,GACFA,EAAQG,mBAAmBgB,EAAKjyB,MAE3BiyB,CACT,CAUA9K,OAAQzgB,GACNA,EAAQ2I,aAAagjB,IACrB3rB,EAAQkJ,SAAS5P,KAAKuwB,SACxB,EAeF,MAAME,WAAkB1L,GAQtBllB,YAAawd,EAAQJ,EAAM9Y,GACzBP,MAAMyZ,EAAQlZ,GAMdnE,KAAKutB,kBAAmB,EAKxBvtB,KAAKsyB,kBAAoB,IAAIhpB,IAC7B2T,EAAKha,SAASuqB,IACA,OAARA,EACFxtB,KAAKutB,kBAAmB,EAExBvtB,KAAKsyB,kBAAkBjoB,IAAImjB,EAC7B,GAEJ,EAQF,MAAM+E,WAAiB1mB,GAIrBhM,YAAa2yB,GACX5uB,QAIA5D,KAAKwyB,SAAWA,CAClB,CAKAvL,QACE,OAAO,IAAIsL,GAASvyB,KAAKwyB,SAC3B,CAKAtL,QACE,MAAMiD,EAAK,IAAIoI,GAASvyB,KAAKwyB,UAI7B,OAHAxyB,KAAKiD,SAAQ,CAACV,EAAOC,KACnB2nB,EAAG9nB,IAAIG,EAAKD,EAAM,IAEb4nB,CACT,CAiBAwG,MAAOC,EAAY1wB,SAAU2wB,EAAQ,CAAC,EAAGC,GACvC,MAAM2B,EAAO5B,EAAM7wB,KAAKwyB,UACxB,IAAIP,EAUJ,OAREA,OADWpwB,IAAT4wB,EACIA,EAAKC,UAAU1yB,MAEfE,SAASgyB,cAAclyB,KAAKwyB,UAEpCP,EAAI7C,aAAa,gBAAiBpvB,KAAKwyB,eACvB3wB,IAAZivB,GACFA,EAAQG,mBAAmBgB,EAAKjyB,MAE3BiyB,CACT,CAUA9K,OAAQzgB,GACNA,EAAQ2I,aAAasjB,IACrBjsB,EAAQkJ,SAAS5P,KAAKwyB,SACxB,EAiBF,MAAMI,WAAiBjnB,GAIjBgmB,kBACF,MAAMxmB,EAAInL,KAAKuJ,MAAQvJ,KAAKuJ,MAAMnG,KAAO,KACzC,OAAO+H,EAAqEA,EAAS,QAAM,KAAI,IACjG,CAKIymB,kBACF,MAAMzmB,EAAInL,KAAKuJ,MAAQvJ,KAAKuJ,MAAMgc,KAAO,KACzC,OAAOpa,EAAqEA,EAAS,QAAM,KAAI,IACjG,CAEA8b,QACE,OAAO,IAAI2L,EACb,CAKA1L,QACE,MAAMgF,EAAO,IAAI0G,GAEjB,OADA1G,EAAKgC,WAAWluB,KAAKmuB,WACdjC,CACT,CAiBAyE,MAAOC,EAAY1wB,SAAU2wB,EAAOC,GAClC,MAAMmB,EAAMrB,EAAUiC,eAAe7yB,KAAKT,YAI1C,YAHgBsC,IAAZivB,GACFA,EAAQG,mBAAmBgB,EAAKjyB,MAE3BiyB,CACT,CAEA1yB,WAEE,OAAOS,KAAKmuB,UAAU/rB,KAAIojB,IACxB,MAAMsN,EAAc,GACpB,IAAK,MAAMvC,KAAY/K,EAAMsG,WAAY,CACvC,MAAMwC,EAAQ,GACd,IAAK,MAAM9rB,KAAOgjB,EAAMsG,WAAWyE,GACjCjC,EAAMxsB,KAAK,CAAEU,MAAKD,MAAOijB,EAAMsG,WAAWyE,GAAU/tB,KAGtD8rB,EAAM/oB,MAAK,CAACC,EAAGC,IAAMD,EAAEhD,IAAMiD,EAAEjD,KAAO,EAAI,IAC1CswB,EAAYhxB,KAAK,CAAEyuB,WAAUjC,SAC/B,CAEAwE,EAAYvtB,MAAK,CAACC,EAAGC,IAAMD,EAAE+qB,SAAW9qB,EAAE8qB,UAAY,EAAI,IAE1D,IAAI1C,EAAM,GACV,IAAK,IAAIhvB,EAAI,EAAGA,EAAIi0B,EAAYpxB,OAAQ7C,IAAK,CAC3C,MAAMk0B,EAAOD,EAAYj0B,GACzBgvB,GAAO,IAAIkF,EAAKxC,WAChB,IAAK,IAAIjrB,EAAI,EAAGA,EAAIytB,EAAKzE,MAAM5sB,OAAQ4D,IAAK,CAC1C,MAAMmnB,EAAOsG,EAAKzE,MAAMhpB,GACxBuoB,GAAO,IAAIpB,EAAKjqB,QAAQiqB,EAAKlqB,QAC/B,CACAsrB,GAAO,GACT,CACAA,GAAOrI,EAAME,OACb,IAAK,IAAI7mB,EAAIi0B,EAAYpxB,OAAS,EAAG7C,GAAK,EAAGA,IAC3CgvB,GAAO,KAAKiF,EAAYj0B,GAAG0xB,YAE7B,OAAO1C,KACN5rB,KAAK,GACV,CAKA+J,SACE,OAAOhM,KAAKT,UACd,CAKA4nB,OAAQzgB,GACNA,EAAQ2I,aAAa2jB,GACvB,EAYF,MAAMC,GAKJpzB,YAAagF,EAAInD,GACf1B,KAAK6E,GAAKA,EACV7E,KAAK0B,OAASA,CAChB,CAKI8E,cACF,MAAMsJ,EAAA,IACR,CASAqM,UAAWpc,GACT,OAAO,CACT,CAOA0Q,MAAO/J,EAASsM,EAAQkgB,GACtB,MAAMpjB,EAAA,IACR,CAMAsD,UAAWjP,EAAa6O,GACtB,MAAMlD,EAAA,IACR,EAQF,MAAM6B,WAAWshB,GACXzsB,cACF,OAAO,CACT,CAEA4B,SAAW,CAMX+T,UAAWpc,GACT,OAAIC,KAAKH,cAAgBE,EAAMF,cAG/BG,KAAK0B,QAAU3B,EAAM2B,QACd,EACT,CAMA0R,UAAWjP,EAAa6O,GAClBA,EAAS,IACXhT,KAAK6E,GAAGf,OAASkP,EACjBhT,KAAK0B,QAAUsR,GAEjBkI,GAAU/W,EAAYlE,IAAIuE,MAAOxE,KACnC,CAMAyQ,MAAO/J,EAASsM,GACdtM,EAAQqI,UAzCc,GA0CtBrI,EAAQ4I,SAAStP,KAAK0B,OAASsR,EACjC,CAOAE,WAAY/O,EAAaK,GACvB,OAAO,IACT,EAGF,MAAMqkB,GAIJhpB,YAAasM,GACXnM,KAAKmM,QAAUA,CACjB,CAKAmgB,YACE,OAAO,CACT,CAKAtV,aACE,MAAO,CAAChX,KAAKmM,QACf,CAKAgnB,cACE,OAAO,CACT,CAKAC,OACE,OAAO,IAAIvK,GAAc7oB,KAAKmM,QAChC,CAMAjE,OAAQ8K,GACN,MAAMlD,EAAA,IACR,CAMAqM,UAAWpc,GACT,OAAO,CACT,CAMAqT,UAAWjP,EAAa4C,GAAO,CAI/BqB,OAAQjE,GAAc,CAItBwE,GAAInE,GAAQ,CAKZiM,MAAO/J,EAASsM,GACdtM,EAAQ+I,SAASzP,KAAKmM,QACxB,CAKAknB,SACE,OAAO,CACT,EASF,MAAMC,GAIJzzB,YAAatB,GACXyB,KAAKzB,IAAMA,CACb,CAKA+tB,YACE,OAAOtsB,KAAKzB,GACd,CAKAyY,aACE,MAAO,EACT,CAKAmc,cACE,OAAO,CACT,CAKAC,OACE,OAAO,IAAIE,GAAetzB,KAAKzB,IACjC,CAMA2J,OAAQ8K,GACN,MAAMjT,EAAQ,IAAIuzB,GAAetzB,KAAKzB,IAAMyU,GAE5C,OADAhT,KAAKzB,IAAMyU,EACJjT,CACT,CAMAoc,UAAWpc,GAET,OADAC,KAAKzB,KAAOwB,EAAMxB,KACX,CACT,CAMA6U,UAAWjP,EAAa4C,GACtBb,EAAe/B,EAAYuT,UAAW3Q,EAAKlC,GAAGE,OAAQgC,EAAKlC,GAAGf,MAAO9D,KAAKzB,KAC1EwI,EAAKwsB,aACP,CAKAnrB,OAAQjE,GAAc,CAItBwE,GAAInE,GAAQ,CAKZiM,MAAO/J,EAASsM,GACdtM,EAAQ4I,SAAStP,KAAKzB,IAAMyU,EAC9B,CAKAqgB,SACE,OAAO,CACT,EASF,MAMMG,GAAoB,CAAC/qB,EAAM2D,IAAS,IAAI5D,GAAI,CAAEC,UAAS2D,EAAMrD,WAAYqD,EAAKrD,YAAcqD,EAAKtD,WAAY,IAKnH,MAAMggB,GAIJjpB,YAAaI,GACPA,EAAIsJ,OACNzG,QAAQgN,MAAM,2HAKhB9P,KAAKC,IAAMA,EAIX,MAAMmM,EAAO,CAAC,EACdpM,KAAKoM,KAAOA,EACPnM,EAAI0I,KACPyD,EAAKzD,IAAK,GAER1I,EAAI6I,WACNsD,EAAKtD,UAAW,GAED,OAAb7I,EAAI4I,OACNuD,EAAKvD,KAAO5I,EAAI4I,KAEpB,CAKAyjB,YACE,OAAO,CACT,CAKAtV,aACE,MAAO,CAAChX,KAAKC,IACf,CAKAkzB,cACE,OAAO,CACT,CAKAC,OACE,OAAO,IAAItK,GAAW0K,GAAkBxzB,KAAKC,IAAIwI,KAAMzI,KAAKoM,MAC9D,CAMAlE,OAAQ8K,GACN,MAAMlD,EAAA,IACR,CAMAqM,UAAWpc,GACT,OAAO,CACT,CAMAqT,UAAWjP,EAAa4C,GAEtB/G,KAAKC,IAAIsJ,MAAQxC,EACjB5C,EAAYkI,aAAahC,IAAIrK,KAAKC,KAC9BD,KAAKC,IAAI8I,YACX5E,EAAYiG,cAAcC,IAAIrK,KAAKC,IAEvC,CAKAmI,OAAQjE,GACFA,EAAYkI,aAAatG,IAAI/F,KAAKC,KACpCkE,EAAYkI,aAAajE,OAAOpI,KAAKC,KAErCkE,EAAYmI,eAAejC,IAAIrK,KAAKC,IAExC,CAKA0I,GAAInE,GAAS,CAMbiM,MAAO/J,EAASsM,GACdtM,EAAQuI,YAAYjP,KAAKC,IAAIwI,MAC7B/B,EAAQ6I,SAASvP,KAAKoM,KACxB,CAKAinB,SACE,OAAO,CACT,EAcF,MAAMhH,GAIJxsB,YAAa8P,GACX3P,KAAK2P,MAAQA,CACf,CAKA2c,YACE,OAAO,CACT,CAKAtV,aACE,MAAO,CAAChX,KAAK2P,MACf,CAKAwjB,cACE,OAAO,CACT,CAKAC,OACE,OAAO,IAAI/G,GAAarsB,KAAK2P,MAC/B,CAMAzH,OAAQ8K,GACN,MAAMlD,EAAA,IACR,CAMAqM,UAAWpc,GACT,OAAO,CACT,CAMAqT,UAAWjP,EAAa4C,GAAO,CAI/BqB,OAAQjE,GAAc,CAItBwE,GAAInE,GAAQ,CAKZiM,MAAO/J,EAASsM,GACdtM,EAAQgJ,UAAU1P,KAAK2P,MACzB,CAKA0jB,SACE,OAAO,CACT,EAcF,MAAMlI,GAKJtrB,YAAa2C,EAAKD,GAChBvC,KAAKwC,IAAMA,EACXxC,KAAKuC,MAAQA,CACf,CAKA+pB,YACE,OAAO,CACT,CAKAtV,aACE,MAAO,EACT,CAKAmc,cACE,OAAO,CACT,CAKAC,OACE,OAAO,IAAIjI,GAAcnrB,KAAKwC,IAAKxC,KAAKuC,MAC1C,CAMA2F,OAAQ8K,GACN,MAAMlD,EAAA,IACR,CAMAqM,UAAWpc,GACT,OAAO,CACT,CAMAqT,UAAWjP,EAAa4C,GAEYA,EAAW,OAAE2Y,cAAgB,IACjE,CAKAtX,OAAQjE,GAAc,CAItBwE,GAAInE,GAAQ,CAKZiM,MAAO/J,EAASsM,GACdtM,EAAQkJ,SAAS5P,KAAKwC,KACtBkE,EAAQgJ,UAAU1P,KAAKuC,MACzB,CAKA8wB,SACE,OAAO,CACT,EAYF,MAAMI,GAIJ5zB,YAAanB,GAIXsB,KAAKtB,IAAMA,CACb,CAKA4tB,YACE,OAAOtsB,KAAKtB,IAAIgD,MAClB,CAKAsV,aACE,OAAOhX,KAAKtB,GACd,CAKAy0B,cACE,OAAO,CACT,CAKAC,OACE,OAAO,IAAIK,GAAYzzB,KAAKtB,IAC9B,CAMAwJ,OAAQ8K,GACN,MAAMjT,EAAQ,IAAI0zB,GAAYzzB,KAAKtB,IAAIsH,MAAMgN,IAE7C,OADAhT,KAAKtB,IAAMsB,KAAKtB,IAAIsH,MAAM,EAAGgN,GACtBjT,CACT,CAMAoc,UAAWpc,GAET,OADAC,KAAKtB,IAAMsB,KAAKtB,IAAIinB,OAAO5lB,EAAMrB,MAC1B,CACT,CAMA0U,UAAWjP,EAAa4C,GAAO,CAI/BqB,OAAQjE,GAAc,CAItBwE,GAAInE,GAAQ,CAKZiM,MAAO/J,EAASsM,GACd,MAAMzU,EAAMyB,KAAKtB,IAAIgD,OACrBgF,EAAQ4I,SAAS/Q,EAAMyU,GACvB,IAAK,IAAInU,EAAImU,EAAQnU,EAAIN,EAAKM,IAAK,CACjC,MAAMS,EAAIU,KAAKtB,IAAIG,GACnB6H,EAAQuI,iBAAkBpN,IAANvC,EAAkB,YAAcqD,KAAKC,UAAUtD,GACrE,CACF,CAKA+zB,SACE,OAAO,CACT,EAuBF,MAAM1K,GAIJ9oB,YAAanB,GAIXsB,KAAKtB,IAAMA,CACb,CAKA4tB,YACE,OAAOtsB,KAAKtB,IAAIgD,MAClB,CAKAsV,aACE,OAAOhX,KAAKtB,GACd,CAKAy0B,cACE,OAAO,CACT,CAKAC,OACE,OAAO,IAAIzK,GAAW3oB,KAAKtB,IAC7B,CAMAwJ,OAAQ8K,GACN,MAAMjT,EAAQ,IAAI4oB,GAAW3oB,KAAKtB,IAAIsH,MAAMgN,IAE5C,OADAhT,KAAKtB,IAAMsB,KAAKtB,IAAIsH,MAAM,EAAGgN,GACtBjT,CACT,CAMAoc,UAAWpc,GAET,OADAC,KAAKtB,IAAMsB,KAAKtB,IAAIinB,OAAO5lB,EAAMrB,MAC1B,CACT,CAMA0U,UAAWjP,EAAa4C,GAAO,CAI/BqB,OAAQjE,GAAc,CAItBwE,GAAInE,GAAQ,CAKZiM,MAAO/J,EAASsM,GACd,MAAMzU,EAAMyB,KAAKtB,IAAIgD,OACrBgF,EAAQ4I,SAAS/Q,EAAMyU,GACvB,IAAK,IAAInU,EAAImU,EAAQnU,EAAIN,EAAKM,IAAK,CACjC,MAAMS,EAAIU,KAAKtB,IAAIG,GACnB6H,EAAQ6I,SAASjQ,EACnB,CACF,CAKA+zB,SACE,OAAO,CACT,EAmBF,MAAMjH,GAIJvsB,YAAaguB,GAIX7tB,KAAK6tB,IAAMA,CACb,CAKAvB,YACE,OAAOtsB,KAAK6tB,IAAInsB,MAClB,CAKAsV,aACE,OAAOhX,KAAK6tB,IAAI6F,MAAM,GACxB,CAKAP,cACE,OAAO,CACT,CAKAC,OACE,OAAO,IAAIhH,GAAcpsB,KAAK6tB,IAChC,CAMA3lB,OAAQ8K,GACN,MAAMjT,EAAQ,IAAIqsB,GAAcpsB,KAAK6tB,IAAI7nB,MAAMgN,IAC/ChT,KAAK6tB,IAAM7tB,KAAK6tB,IAAI7nB,MAAM,EAAGgN,GAG7B,MAAM2gB,EAAgB3zB,KAAK6tB,IAAI+F,WAAW5gB,EAAS,GASnD,OARI2gB,GAAiB,OAAUA,GAAiB,QAI9C3zB,KAAK6tB,IAAM7tB,KAAK6tB,IAAI7nB,MAAM,EAAGgN,EAAS,GAAK,IAE3CjT,EAAM8tB,IAAM,IAAM9tB,EAAM8tB,IAAI7nB,MAAM,IAE7BjG,CACT,CAMAoc,UAAWpc,GAET,OADAC,KAAK6tB,KAAO9tB,EAAM8tB,KACX,CACT,CAMAza,UAAWjP,EAAa4C,GAAO,CAI/BqB,OAAQjE,GAAc,CAItBwE,GAAInE,GAAQ,CAKZiM,MAAO/J,EAASsM,GACdtM,EAAQuI,YAAuB,IAAX+D,EAAehT,KAAK6tB,IAAM7tB,KAAK6tB,IAAI7nB,MAAMgN,GAC/D,CAKAqgB,SACE,OAAO,CACT,EASF,MAMMQ,GAAW,CAnuGEC,GAAY,IAAIroB,GA6PlBqoB,GAAY,IAAIjoB,GAusCfioB,GAAY,IAAInoB,GAioBVxE,GAAW,IAAI4oB,GAAY5oB,EAAQqG,WAhOlCsmB,GAAY,IAAI/nB,GA2VpB5E,GACnB,IAAIorB,GAASprB,EAAQqG,WAmHFrG,GAAW,IAAIyrB,IAy7B9BpI,GAAc,EACdK,GAAY,EACZ2E,GAAa,EACb6C,GAAmB,EACnBZ,GAAoB,EACpBkB,GAAgB,EAChBK,GAAgB,EAKtB,MAAM5Z,GAIJvZ,YAAaiL,GAIX9K,KAAK8K,KAAOA,CACd,CAKAwhB,YACE,OAAO,CACT,CAKAtV,aACE,MAAO,CAAChX,KAAK8K,KACf,CAKAqoB,cACE,OAAO,CACT,CAKAC,OACE,OAAO,IAAIha,GAAYpZ,KAAK8K,KAAKmc,QACnC,CAMA/e,OAAQ8K,GACN,MAAMlD,EAAA,IACR,CAMAqM,UAAWpc,GACT,OAAO,CACT,CAMAqT,UAAWjP,EAAa4C,GACtB/G,KAAK8K,KAAKE,WAAW7G,EAAYlE,IAAK8G,EACxC,CAKAqB,OAAQjE,GACN,IAAI4C,EAAO/G,KAAK8K,KAAKO,OACrB,KAAgB,OAATtE,GACAA,EAAKP,QAORrC,EAAYyX,cAAc9Z,KAAKiF,GAN/BA,EAAKqB,OAAOjE,GAQd4C,EAAOA,EAAKhH,MAEdC,KAAK8K,KAAKI,KAAKjI,SAAQ8D,IAChBA,EAAKP,QAIRrC,EAAYyX,cAAc9Z,KAAKiF,GAH/BA,EAAKqB,OAAOjE,EAId,IAEFA,EAAYuX,QAAQtT,OAAOpI,KAAK8K,KAClC,CAKAnC,GAAInE,GACF,IAAIuC,EAAO/G,KAAK8K,KAAKO,OACrB,KAAgB,OAATtE,GACLA,EAAK4B,GAAGnE,GAAO,GACfuC,EAAOA,EAAKhH,MAEdC,KAAK8K,KAAKO,OAAS,KACnBrL,KAAK8K,KAAKI,KAAKjI,SAA0C8D,IACvD,KAAgB,OAATA,GACLA,EAAK4B,GAAGnE,GAAO,GACfuC,EAAOA,EAAKjH,IACd,IAEFE,KAAK8K,KAAKI,KAAO,IAAIjH,GACvB,CAMAwM,MAAO/J,EAASsM,GACdhT,KAAK8K,KAAKqc,OAAOzgB,EACnB,CAKA2sB,SACE,OAAO,CACT,EASF,MASMla,GAAe,CAAC3U,EAAOK,KAI3B,IAEIkC,EAFAgtB,EAASlvB,EACT8I,EAAO,EAEX,GACMA,EAAO,IACTomB,EAASpnB,GAASonB,EAAOhvB,OAAQgvB,EAAOjwB,MAAQ6J,IAElD5G,EAAOoU,GAAQ3W,EAAOuvB,GACtBpmB,EAAOomB,EAAOjwB,MAAQiD,EAAKlC,GAAGf,MAC9BiwB,EAAShtB,EAAKsY,aACI,OAAX0U,GAAmBhtB,aAAgB+K,IAC5C,MAAO,CACL/K,OAAM4G,OACR,EAYIiR,GAAW,CAAC7X,EAAM2V,KACtB,KAAgB,OAAT3V,GAAiBA,EAAK2V,OAASA,GACpC3V,EAAK2V,KAAOA,EACZ3V,EAAyCA,EAAW,OAAEwC,KACxD,EAaIpB,GAAY,CAAChE,EAAamf,EAAU3V,KAExC,MAAM,OAAE5I,EAAM,MAAEjB,GAAUwf,EAASze,GAC7BmvB,EAAY,IAAIliB,GACpBnF,GAAS5H,EAAQjB,EAAQ6J,GACzB2V,EACA3W,GAAS5H,EAAQjB,EAAQ6J,EAAO,GAChC2V,EAASvjB,MACTujB,EAASC,YACTD,EAASlY,OACTkY,EAAStH,UACTsH,EAASnX,QAAQjE,OAAOyF,IAwB1B,OAtBI2V,EAAS9c,SACXwtB,EAAUT,cAERjQ,EAAS5G,OACXsX,EAAUtX,MAAO,GAEK,OAApB4G,EAASjE,SACX2U,EAAU3U,OAAS1S,GAAS2W,EAASjE,OAAOta,OAAQue,EAASjE,OAAOvb,MAAQ6J,IAG9E2V,EAASvjB,MAAQi0B,EAEO,OAApBA,EAAUj0B,QACZi0B,EAAUj0B,MAAMD,KAAOk0B,GAGzB7vB,EAAYyX,cAAc9Z,KAAKkyB,GAEH,OAAxBA,EAAUhY,WAA0C,OAApBgY,EAAUj0B,OACVi0B,EAAgB,OAAE9oB,KAAK7I,IAAI2xB,EAAUhY,UAAWgY,GAEpF1Q,EAAS5hB,OAASiM,EACXqmB,GAgBH1U,GAAW,CAACnb,EAAa4C,EAAMktB,EAAW9U,EAAeI,KAC7D,MAAMtf,EAAMkE,EAAYlE,IAClBuE,EAAQvE,EAAIuE,MACZ0vB,EAAcj0B,EAAI+I,SAClBqW,EAAStY,EAAKsY,OACpB,GAAe,OAAXA,EACF,OAAOzE,GAAkBzW,EAAakb,GAExC,IAQItf,EARAo0B,EAA+CptB,EAAW,OAAEwC,MAI5DzJ,EAAO,KAMX,GAAmB,OAAfq0B,IAA8C,IAAvBA,EAAW3tB,QAAkB,CAEtD,GAA0B,OAAtB2tB,EAAW9U,UAAqB4U,EAAUluB,IAAIouB,IAAuG,OAAxF7U,GAASnb,EAAagwB,EAAYF,EAAW9U,EAAeI,IAC3H,OAAO,KAET,KAA6B,OAAtB4U,EAAW9U,QAChB8U,EAAavZ,GAAkBzW,EAAagwB,EAAW9U,OAE3D,CACA,MAAM+U,EAA4B,OAAfD,EAAwDptB,EAAW,OAAgCotB,EAAkB,QAAErpB,KAE1I,GAAuB,OAAnB/D,EAAKiV,UAAoB,CAK3B,IAHAlc,EAAOiH,EAAKjH,KACZC,EAAQgH,EAEQ,OAATjH,GAAe,CAIpB,IAAIu0B,EAAYv0B,EAEhB,KAAqB,OAAdu0B,GAAwDA,EAAgB,OAAE9qB,QAAU4qB,GACzFE,EAAiC,OAArBA,EAAUhV,OAAkB,KAAOzE,GAAkBzW,EAAakwB,EAAUhV,QAE1F,GAAkB,OAAdgV,GAAwDA,EAAgB,OAAE9qB,QAAU4qB,EAAY,CAClGr0B,EAAOu0B,EACP,KACF,CACAv0B,EAAOA,EAAKA,IACd,CACA,KAAiB,OAAVC,GAAgB,CAIrB,IAAIu0B,EAAav0B,EAEjB,KAAsB,OAAfu0B,GAAyDA,EAAiB,OAAE/qB,QAAU4qB,GAC3FG,EAAmC,OAAtBA,EAAWjV,OAAkB,KAAOzE,GAAkBzW,EAAamwB,EAAWjV,QAE7F,GAAmB,OAAfiV,GAAyDA,EAAiB,OAAE/qB,QAAU4qB,EAAY,CACpGp0B,EAAQu0B,EACR,KACF,CACAv0B,EAAQA,EAAMA,KAChB,CACF,MAEE,GADAA,EAAQ,KACJgH,EAAKhH,QAAUwf,EAAwB,CAIzC,IAHAzf,EAAOiH,EAGS,OAATjH,GAAgC,OAAfA,EAAKC,OAAkB6E,EAAUua,EAAerf,EAAKC,MAAM8E,KACjF/E,EAAOA,EAAKC,MAId,KAAgB,OAATD,GAAiC,OAAhBA,EAAKuf,QAC3Bvf,EAAO8a,GAAkBzW,EAAarE,EAAKuf,QAE7C,GAAIvf,GAAuB,OAAfA,EAAKC,MAGf,OAAO,IAEX,MACED,EAAOs0B,EAAWlpB,KAAKzG,IAAIsC,EAAKiV,YAAc,KAGlD,MAAMuY,EAAYzsB,GAAStD,EAAO0vB,GAC5BM,EAAS7nB,GAASunB,EAAaK,GAC/BE,EAAa,IAAI3iB,GACrB0iB,EACA10B,EAAMA,GAAQA,EAAK2Y,OACnB1Y,EAAOA,GAASA,EAAM8E,GACtBuvB,EACArtB,EAAKiV,UACLjV,EAAKoF,QAAQinB,QAKf,OAHArsB,EAAKsY,OAASmV,EACd5V,GAAS6V,GAAY,GACrBA,EAAWrhB,UAAUjP,EAAa,GAC3BswB,GAMT,MAAM3iB,WAAamhB,GAWjBpzB,YAAagF,EAAI/E,EAAM4K,EAAQ3K,EAAOwjB,EAAanY,EAAQ4Q,EAAW7P,GACpEvI,MAAMiB,EAAIsH,EAAQmgB,aAKlBtsB,KAAK0K,OAASA,EAKd1K,KAAKF,KAAOA,EAKZE,KAAKD,MAAQA,EAKbC,KAAKujB,YAAcA,EAInBvjB,KAAKoL,OAASA,EAQdpL,KAAKgc,UAAYA,EAMjBhc,KAAKqf,OAAS,KAIdrf,KAAKmM,QAAUA,EAQfnM,KAAKgP,KAAOhP,KAAKmM,QAAQgnB,cAAgB,KAAc,CACzD,CAOInN,WAAQ0O,IACJ10B,KAAKgP,KAAO,MAAe,IAAO0lB,IACtC10B,KAAKgP,MAAQ,KAEjB,CAEIgX,aACF,OAAQhmB,KAAKgP,KAAO,MAAe,CACrC,CAKI0N,WACF,OAAQ1c,KAAKgP,KAAO,MAAe,CACrC,CAEI0N,SAAMiY,GACJ30B,KAAK0c,OAASiY,IAChB30B,KAAKgP,MAAQ,KAEjB,CAEIwJ,gBACF,OAAQxY,KAAKgP,KAAO,MAAe,CACrC,CAMIxI,cACF,OAAQxG,KAAKgP,KAAO,MAAe,CACrC,CAEIxI,YAASouB,GACP50B,KAAKwG,UAAYouB,IACnB50B,KAAKgP,MAAQ,KAEjB,CAEAukB,cACEvzB,KAAKgP,MAAQ,IACf,CASAkE,WAAY/O,EAAaK,GACvB,GAAIxE,KAAK0K,QAAU1K,KAAK0K,OAAO3F,SAAW/E,KAAK6E,GAAGE,QAAU/E,KAAK0K,OAAO5G,OAASgE,GAAStD,EAAOxE,KAAK0K,OAAO3F,QAC3G,OAAO/E,KAAK0K,OAAO3F,OAErB,GAAI/E,KAAKujB,aAAevjB,KAAKujB,YAAYxe,SAAW/E,KAAK6E,GAAGE,QAAU/E,KAAKujB,YAAYzf,OAASgE,GAAStD,EAAOxE,KAAKujB,YAAYxe,QAC/H,OAAO/E,KAAKujB,YAAYxe,OAE1B,GAAI/E,KAAKoL,QAAUpL,KAAKoL,OAAOvL,cAAgB0O,IAAMvO,KAAK6E,GAAGE,SAAW/E,KAAKoL,OAAOrG,QAAU/E,KAAKoL,OAAOtH,OAASgE,GAAStD,EAAOxE,KAAKoL,OAAOrG,QAC7I,OAAO/E,KAAKoL,OAAOrG,OAiBrB,GAZI/E,KAAK0K,SACP1K,KAAKF,KAAOub,GAAgBlX,EAAaK,EAAOxE,KAAK0K,QACrD1K,KAAK0K,OAAS1K,KAAKF,KAAK2Y,QAEtBzY,KAAKujB,cACPvjB,KAAKD,MAAQ6a,GAAkBzW,EAAanE,KAAKujB,aACjDvjB,KAAKujB,YAAcvjB,KAAKD,MAAM8E,KAE3B7E,KAAKF,MAAQE,KAAKF,KAAKD,cAAgB8R,IAAQ3R,KAAKD,OAASC,KAAKD,MAAMF,cAAgB8R,MAC3F3R,KAAKoL,OAAS,MAGXpL,KAAKoL,QASH,GAAIpL,KAAKoL,OAAOvL,cAAgB0O,GAAI,CACzC,MAAM4lB,EAAahZ,GAAQ3W,EAAOxE,KAAKoL,QACnC+oB,EAAWt0B,cAAgB8R,GAC7B3R,KAAKoL,OAAS,KAEdpL,KAAKoL,OAAqC+oB,EAAkB,QAAErpB,IAElE,OAfM9K,KAAKF,MAAQE,KAAKF,KAAKD,cAAgBiS,KACzC9R,KAAKoL,OAASpL,KAAKF,KAAKsL,OACxBpL,KAAKgc,UAAYhc,KAAKF,KAAKkc,WAEzBhc,KAAKD,OAASC,KAAKD,MAAMF,cAAgBiS,KAC3C9R,KAAKoL,OAASpL,KAAKD,MAAMqL,OACzBpL,KAAKgc,UAAYhc,KAAKD,MAAMic,WAUhC,OAAO,IACT,CAMA5I,UAAWjP,EAAa6O,GAStB,GARIA,EAAS,IACXhT,KAAK6E,GAAGf,OAASkP,EACjBhT,KAAKF,KAAOub,GAAgBlX,EAAaA,EAAYlE,IAAIuE,MAAOmI,GAAS3M,KAAK6E,GAAGE,OAAQ/E,KAAK6E,GAAGf,MAAQ,IACzG9D,KAAK0K,OAAS1K,KAAKF,KAAK2Y,OACxBzY,KAAKmM,QAAUnM,KAAKmM,QAAQjE,OAAO8K,GACnChT,KAAK0B,QAAUsR,GAGbhT,KAAKoL,OAAQ,CACf,IAAMpL,KAAKF,QAAUE,KAAKD,OAA6B,OAApBC,KAAKD,MAAMD,OAAoBE,KAAKF,MAAQE,KAAKF,KAAKC,QAAUC,KAAKD,MAAQ,CAI9G,IAKI80B,EALA/0B,EAAOE,KAAKF,KAOhB,GAAa,OAATA,EACF+0B,EAAI/0B,EAAKC,WACJ,GAAuB,OAAnBC,KAAKgc,UAEd,IADA6Y,EAAsC70B,KAAW,OAAEkL,KAAKzG,IAAIzE,KAAKgc,YAAc,KAClE,OAAN6Y,GAAyB,OAAXA,EAAE/0B,MACrB+0B,EAAIA,EAAE/0B,UAGR+0B,EAAsC70B,KAAW,OAAEqL,OAOrD,MAAMypB,EAAmB,IAAIxrB,IAIvByrB,EAAoB,IAAIzrB,IAI9B,KAAa,OAANurB,GAAcA,IAAM70B,KAAKD,OAAO,CAGrC,GAFAg1B,EAAkB1qB,IAAIwqB,GACtBC,EAAiBzqB,IAAIwqB,GACjBhf,GAAW7V,KAAK0K,OAAQmqB,EAAEnqB,SAE5B,GAAImqB,EAAEhwB,GAAGE,OAAS/E,KAAK6E,GAAGE,OACxBjF,EAAO+0B,EACPC,EAAiBtU,aACZ,GAAI3K,GAAW7V,KAAKujB,YAAasR,EAAEtR,aAGxC,UAEG,IAAiB,OAAbsR,EAAEnqB,SAAmBqqB,EAAkBhvB,IAAIoV,GAAQhX,EAAYlE,IAAIuE,MAAOqwB,EAAEnqB,SAOrF,MALKoqB,EAAiB/uB,IAAIoV,GAAQhX,EAAYlE,IAAIuE,MAAOqwB,EAAEnqB,WACzD5K,EAAO+0B,EACPC,EAAiBtU,QAIrB,CACAqU,EAAIA,EAAE90B,KACR,CACAC,KAAKF,KAAOA,CACd,CAEA,GAAkB,OAAdE,KAAKF,KAAe,CACtB,MAAMC,EAAQC,KAAKF,KAAKC,MACxBC,KAAKD,MAAQA,EACbC,KAAKF,KAAKC,MAAQC,IACpB,KAAO,CACL,IAAIg1B,EACJ,GAAuB,OAAnBh1B,KAAKgc,UAEP,IADAgZ,EAAsCh1B,KAAW,OAAEkL,KAAKzG,IAAIzE,KAAKgc,YAAc,KAClE,OAANgZ,GAAyB,OAAXA,EAAEl1B,MACrBk1B,EAAIA,EAAEl1B,UAGRk1B,EAAsCh1B,KAAW,OAAEqL,OAChBrL,KAAW,OAAEqL,OAASrL,KAE3DA,KAAKD,MAAQi1B,CACf,CACmB,OAAfh1B,KAAKD,MACPC,KAAKD,MAAMD,KAAOE,KACU,OAAnBA,KAAKgc,YAEoBhc,KAAW,OAAEkL,KAAK7I,IAAIrC,KAAKgc,UAAWhc,MACtD,OAAdA,KAAKF,MAEPE,KAAKF,KAAKsI,OAAOjE,IAIE,OAAnBnE,KAAKgc,WAAsBhc,KAAKwY,YAAcxY,KAAKwG,UACnBxG,KAAW,OAAEsL,SAAWtL,KAAK0B,QAEjEwZ,GAAU/W,EAAYlE,IAAIuE,MAAOxE,MACjCA,KAAKmM,QAAQiH,UAAUjP,EAAanE,MAEpC+b,GAA4B5X,EAA+CnE,KAAW,OAAGA,KAAKgc,YAChC,OAAvBhc,KAAW,OAAEuJ,OAAoDvJ,KAAW,OAAEuJ,MAAM/C,SAAgC,OAAnBxG,KAAKgc,WAAqC,OAAfhc,KAAKD,QAEtKC,KAAKoI,OAAOjE,EAEhB,MAEE,IAAIwN,GAAG3R,KAAK6E,GAAI7E,KAAK0B,QAAQ0R,UAAUjP,EAAa,EAExD,CAKIf,WACF,IAAI+H,EAAInL,KAAKD,MACb,KAAa,OAANoL,GAAcA,EAAE3E,SACrB2E,EAAIA,EAAEpL,MAER,OAAOoL,CACT,CAKIoa,WACF,IAAIpa,EAAInL,KAAKF,KACb,KAAa,OAANqL,GAAcA,EAAE3E,SACrB2E,EAAIA,EAAErL,KAER,OAAOqL,CACT,CAKIsN,aAEF,OAAuB,IAAhBzY,KAAK0B,OAAe1B,KAAK6E,GAAK8H,GAAS3M,KAAK6E,GAAGE,OAAQ/E,KAAK6E,GAAGf,MAAQ9D,KAAK0B,OAAS,EAC9F,CAQAya,UAAWpc,GACT,GACEC,KAAKH,cAAgBE,EAAMF,aAC3BgW,GAAW9V,EAAM2K,OAAQ1K,KAAKyY,SAC9BzY,KAAKD,QAAUA,GACf8V,GAAW7V,KAAKujB,YAAaxjB,EAAMwjB,cACnCvjB,KAAK6E,GAAGE,SAAWhF,EAAM8E,GAAGE,QAC5B/E,KAAK6E,GAAGf,MAAQ9D,KAAK0B,SAAW3B,EAAM8E,GAAGf,OACzC9D,KAAKwG,UAAYzG,EAAMyG,SACP,OAAhBxG,KAAKqf,QACY,OAAjBtf,EAAMsf,QACNrf,KAAKmM,QAAQtM,cAAgBE,EAAMoM,QAAQtM,aAC3CG,KAAKmM,QAAQgQ,UAAUpc,EAAMoM,SAC7B,CACA,MAAMqa,EAAiDxmB,KAAW,OAAE0f,cAqBpE,OApBI8G,GACFA,EAAavjB,SAAQ+iB,IACfA,EAAOD,IAAMhmB,IAEfimB,EAAOD,EAAI/lB,MAENA,KAAKwG,SAAWxG,KAAKwY,YACxBwN,EAAOhe,OAAShI,KAAK0B,QAEzB,IAGA3B,EAAM2c,OACR1c,KAAK0c,MAAO,GAEd1c,KAAKD,MAAQA,EAAMA,MACA,OAAfC,KAAKD,QACPC,KAAKD,MAAMD,KAAOE,MAEpBA,KAAK0B,QAAU3B,EAAM2B,QACd,CACT,CACA,OAAO,CACT,CAOA0G,OAAQjE,GACN,IAAKnE,KAAKwG,QAAS,CACjB,MAAM4E,EAA2CpL,KAAW,OAExDA,KAAKwY,WAAgC,OAAnBxY,KAAKgc,YACzB5Q,EAAOE,SAAWtL,KAAK0B,QAEzB1B,KAAKuzB,cACLrtB,EAAe/B,EAAYuT,UAAW1X,KAAK6E,GAAGE,OAAQ/E,KAAK6E,GAAGf,MAAO9D,KAAK0B,QAC1Eqa,GAA4B5X,EAAaiH,EAAQpL,KAAKgc,WACtDhc,KAAKmM,QAAQ/D,OAAOjE,EACtB,CACF,CAMAwE,GAAInE,EAAOywB,GACT,IAAKj1B,KAAKwG,QACR,MAAMsJ,EAAA,KAER9P,KAAKmM,QAAQxD,GAAGnE,GACZywB,EAvoNc,EAACzwB,EAAO+B,EAAQ2uB,KACpC,MAAM3wB,EAAyCC,EAAMR,QAAQS,IAAI8B,EAAO1B,GAAGE,QAC3ER,EAAQ0D,GAAY1D,EAASgC,EAAO1B,GAAGf,QAAUoxB,CAAS,EAsoNtDC,CAAc3wB,EAAOxE,KAAM,IAAI2R,GAAG3R,KAAK6E,GAAI7E,KAAK0B,SAEhD1B,KAAKmM,QAAU,IAAImnB,GAAetzB,KAAK0B,OAE3C,CAWA+O,MAAO/J,EAASsM,GACd,MAAMtI,EAASsI,EAAS,EAAIrG,GAAS3M,KAAK6E,GAAGE,OAAQ/E,KAAK6E,GAAGf,MAAQkP,EAAS,GAAKhT,KAAK0K,OAClF6Y,EAAcvjB,KAAKujB,YACnBvH,EAAYhc,KAAKgc,UACjBhN,EAAQhP,KAAKmM,QAAQknB,SAAW,MACxB,OAAX3oB,EAAkB,EAAI,OACN,OAAhB6Y,EAAuB,EAAI,OACb,OAAdvH,EAAqB,EAAI,MAQ5B,GAPAtV,EAAQqI,UAAUC,GACH,OAAXtE,GACFhE,EAAQkI,YAAYlE,GAEF,OAAhB6Y,GACF7c,EAAQmI,aAAa0U,GAER,OAAX7Y,GAAmC,OAAhB6Y,EAAsB,CAC3C,MAAMnY,EAA2CpL,KAAW,OAC5D,QAAqB6B,IAAjBuJ,EAAO7B,MAAqB,CAC9B,MAAM4qB,EAAa/oB,EAAO7B,MAC1B,GAAmB,OAAf4qB,EAAqB,CAGvB,MAAMiB,EAAOpf,GAAgB5K,GAC7B1E,EAAQyI,iBAAgB,GACxBzI,EAAQuI,YAAYmmB,EACtB,MACE1uB,EAAQyI,iBAAgB,GACxBzI,EAAQkI,YAAYulB,EAAWtvB,GAEnC,MAAWuG,EAAOvL,cAAgBkC,QAChC2E,EAAQyI,iBAAgB,GACxBzI,EAAQuI,YAAY7D,IACXA,EAAOvL,cAAgB0O,IAChC7H,EAAQyI,iBAAgB,GACxBzI,EAAQkI,YAAYxD,IAEpB0E,EAAA,KAEgB,OAAdkM,GACFtV,EAAQuI,YAAY+M,EAExB,CACAhc,KAAKmM,QAAQsE,MAAM/J,EAASsM,EAC9B,EAOF,MAAMjB,GAAkB,CAAC5K,EAAS6H,IAASqmB,GAAYrmB,EAAO,MAAc7H,GAOtEkuB,GAAc,CAClB,KAAQvlB,EAAA,IAAsB,EAj9CL3I,GAAW,IAAImsB,GAAensB,EAAQ+F,WA2azC/F,IACtB,MAAM5I,EAAM4I,EAAQ+F,UACd2a,EAAK,GACX,IAAK,IAAIhpB,EAAI,EAAGA,EAAIN,EAAKM,IAAK,CAC5B,MAAMS,EAAI6H,EAAQ4F,aACR,cAANzN,EACFuoB,EAAG/lB,UAAKD,GAERgmB,EAAG/lB,KAAKa,KAAK4K,MAAMjO,GAEvB,CACA,OAAO,IAAIm0B,GAAY5L,EAAE,EAthBD1gB,GAAW,IAAI0hB,GAAc1hB,EAAQiG,WA6uBrCjG,GAAW,IAAIilB,GAAcjlB,EAAQ4F,cA1atC5F,GAAW,IAAIklB,GAAallB,EAAQmG,YAiGnCnG,GAAW,IAAIgkB,GAAchkB,EAAQqG,UAAWrG,EAAQmG,YAwe1DnG,GAAW,IAAIiS,GAAYya,GAAS1sB,EAAQ8F,eAAe9F,IAnR5DA,IACrB,MAAM5I,EAAM4I,EAAQ+F,UACd2a,EAAK,GACX,IAAK,IAAIhpB,EAAI,EAAGA,EAAIN,EAAKM,IACvBgpB,EAAG/lB,KAAKqF,EAAQgG,WAElB,OAAO,IAAIwb,GAAWd,EAAE,EAxZH1gB,GAAW,IAAI2hB,GAAW0K,GAAkBrsB,EAAQ4F,aAAc5F,EAAQgG,YAo1C/F,KAAQ2C,EAAA,IAAsB,GAQhC,MAAM8B,WAAaqhB,GACbzsB,cACF,OAAO,CACT,CAEA4B,SAAW,CAMX+T,UAAWpc,GACT,OAAIC,KAAKH,cAAgBE,EAAMF,cAG/BG,KAAK0B,QAAU3B,EAAM2B,QACd,EACT,CAMA0R,UAAWjP,EAAa6O,GAEtBlD,EAAA,IACF,CAMAW,MAAO/J,EAASsM,GACdtM,EAAQqI,UAtCgB,IAwCxBpI,EAAA,GAAsBD,EAAQE,YAAa5G,KAAK0B,OAASsR,EAC3D,CAOAE,WAAY/O,EAAaK,GACvB,OAAO,IACT,EAKF,MAAM8wB,GAAgD,oBAAfC,WACnCA,WACkB,oBAAXp3B,OACLA,YAEkB,IAAX,EAAAsX,EAAyB,EAAAA,EAAS,CAAC,EAE1C+f,GAAmB,eAEK,IAA1BF,GAAIE,KAeN1yB,QAAQgN,MAAM,6HAEhBwlB,GAAIE,KAAoB,C","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/isomorphic.js/browser.mjs","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/random.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/promise.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/symbol.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/pair.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/dom.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/logging.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/iterator.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/yjs/dist/yjs.mjs"],"sourcesContent":["/* eslint-env browser */\nexport const performance = typeof window === 'undefined' ? null : (typeof window.performance !== 'undefined' && window.performance) || null\n\nconst isoCrypto = typeof crypto === 'undefined' ? null : crypto\n\n/**\n * @type {function(number):ArrayBuffer}\n */\nexport const cryptoRandomBuffer = isoCrypto !== null\n  ? len => {\n    // browser\n    const buf = new ArrayBuffer(len)\n    const arr = new Uint8Array(buf)\n    isoCrypto.getRandomValues(arr)\n    return buf\n  }\n  : len => {\n    // polyfill\n    const buf = new ArrayBuffer(len)\n    const arr = new Uint8Array(buf)\n    for (let i = 0; i < len; i++) {\n      arr[i] = Math.ceil((Math.random() * 0xFFFFFFFF) >>> 0)\n    }\n    return buf\n  }\n","\n/**\n * Isomorphic module for true random numbers / buffers / uuids.\n *\n * Attention: falls back to Math.random if the browser does not support crypto.\n *\n * @module random\n */\n\nimport * as math from './math.js'\nimport * as binary from './binary.js'\nimport { cryptoRandomBuffer } from './isomorphic.js'\n\nexport const rand = Math.random\n\nexport const uint32 = () => new Uint32Array(cryptoRandomBuffer(4))[0]\n\nexport const uint53 = () => {\n  const arr = new Uint32Array(cryptoRandomBuffer(8))\n  return (arr[0] & binary.BITS21) * (binary.BITS32 + 1) + (arr[1] >>> 0)\n}\n\n/**\n * @template T\n * @param {Array<T>} arr\n * @return {T}\n */\nexport const oneOf = arr => arr[math.floor(rand() * arr.length)]\n\n// @ts-ignore\nconst uuidv4Template = [1e7] + -1e3 + -4e3 + -8e3 + -1e11\nexport const uuidv4 = () => uuidv4Template.replace(/[018]/g, /** @param {number} c */ c =>\n  (c ^ uint32() & 15 >> c / 4).toString(16)\n)\n","/**\n * Utility helpers to work with promises.\n *\n * @module promise\n */\n\nimport * as time from './time.js'\n\n/**\n * @template T\n * @callback PromiseResolve\n * @param {T|PromiseLike<T>} [result]\n */\n\n/**\n * @template T\n * @param {function(PromiseResolve<T>,function(Error):void):any} f\n * @return {Promise<T>}\n */\nexport const create = f => /** @type {Promise<T>} */ (new Promise(f))\n\n/**\n * @param {function(function():void,function(Error):void):void} f\n * @return {Promise<void>}\n */\nexport const createEmpty = f => new Promise(f)\n\n/**\n * `Promise.all` wait for all promises in the array to resolve and return the result\n * @template T\n * @param {Array<Promise<T>>} arrp\n * @return {Promise<Array<T>>}\n */\nexport const all = arrp => Promise.all(arrp)\n\n/**\n * @param {Error} [reason]\n * @return {Promise<never>}\n */\nexport const reject = reason => Promise.reject(reason)\n\n/**\n * @template T\n * @param {T|void} res\n * @return {Promise<T|void>}\n */\nexport const resolve = res => Promise.resolve(res)\n\n/**\n * @template T\n * @param {T} res\n * @return {Promise<T>}\n */\nexport const resolveWith = res => Promise.resolve(res)\n\n/**\n * @todo Next version, reorder parameters: check, [timeout, [intervalResolution]]\n *\n * @param {number} timeout\n * @param {function():boolean} check\n * @param {number} [intervalResolution]\n * @return {Promise<void>}\n */\nexport const until = (timeout, check, intervalResolution = 10) => create((resolve, reject) => {\n  const startTime = time.getUnixTime()\n  const hasTimeout = timeout > 0\n  const untilInterval = () => {\n    if (check()) {\n      clearInterval(intervalHandle)\n      resolve()\n    } else if (hasTimeout) {\n      /* istanbul ignore else */\n      if (time.getUnixTime() - startTime > timeout) {\n        clearInterval(intervalHandle)\n        reject(new Error('Timeout'))\n      }\n    }\n  }\n  const intervalHandle = setInterval(untilInterval, intervalResolution)\n})\n\n/**\n * @param {number} timeout\n * @return {Promise<undefined>}\n */\nexport const wait = timeout => create((resolve, reject) => setTimeout(resolve, timeout))\n\n/**\n * Checks if an object is a promise using ducktyping.\n *\n * Promises are often polyfilled, so it makes sense to add some additional guarantees if the user of this\n * library has some insane environment where global Promise objects are overwritten.\n *\n * @param {any} p\n * @return {boolean}\n */\nexport const isPromise = p => p instanceof Promise || (p && p.then && p.catch && p.finally)\n","/**\n * Utility module to work with EcmaScript Symbols.\n *\n * @module symbol\n */\n\n/**\n * Return fresh symbol.\n *\n * @return {Symbol}\n */\nexport const create = Symbol\n\n/**\n * @param {any} s\n * @return {boolean}\n */\nexport const isSymbol = s => typeof s === 'symbol'\n","/**\n * Working with value pairs.\n *\n * @module pair\n */\n\n/**\n * @template L,R\n */\nexport class Pair {\n  /**\n   * @param {L} left\n   * @param {R} right\n   */\n  constructor (left, right) {\n    this.left = left\n    this.right = right\n  }\n}\n\n/**\n * @template L,R\n * @param {L} left\n * @param {R} right\n * @return {Pair<L,R>}\n */\nexport const create = (left, right) => new Pair(left, right)\n\n/**\n * @template L,R\n * @param {R} right\n * @param {L} left\n * @return {Pair<L,R>}\n */\nexport const createReversed = (right, left) => new Pair(left, right)\n\n/**\n * @template L,R\n * @param {Array<Pair<L,R>>} arr\n * @param {function(L, R):any} f\n */\nexport const forEach = (arr, f) => arr.forEach(p => f(p.left, p.right))\n\n/**\n * @template L,R,X\n * @param {Array<Pair<L,R>>} arr\n * @param {function(L, R):X} f\n * @return {Array<X>}\n */\nexport const map = (arr, f) => arr.map(p => f(p.left, p.right))\n","/* eslint-env browser */\n\n/**\n * Utility module to work with the DOM.\n *\n * @module dom\n */\n\nimport * as pair from './pair.js'\nimport * as map from './map.js'\n\n/* istanbul ignore next */\n/**\n * @type {Document}\n */\nexport const doc = /** @type {Document} */ (typeof document !== 'undefined' ? document : {})\n\n/**\n * @param {string} name\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const createElement = name => doc.createElement(name)\n\n/**\n * @return {DocumentFragment}\n */\n/* istanbul ignore next */\nexport const createDocumentFragment = () => doc.createDocumentFragment()\n\n/**\n * @param {string} text\n * @return {Text}\n */\n/* istanbul ignore next */\nexport const createTextNode = text => doc.createTextNode(text)\n\n/* istanbul ignore next */\nexport const domParser = /** @type {DOMParser} */ (typeof DOMParser !== 'undefined' ? new DOMParser() : null)\n\n/**\n * @param {HTMLElement} el\n * @param {string} name\n * @param {Object} opts\n */\n/* istanbul ignore next */\nexport const emitCustomEvent = (el, name, opts) => el.dispatchEvent(new CustomEvent(name, opts))\n\n/**\n * @param {Element} el\n * @param {Array<pair.Pair<string,string|boolean>>} attrs Array of key-value pairs\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const setAttributes = (el, attrs) => {\n  pair.forEach(attrs, (key, value) => {\n    if (value === false) {\n      el.removeAttribute(key)\n    } else if (value === true) {\n      el.setAttribute(key, '')\n    } else {\n      // @ts-ignore\n      el.setAttribute(key, value)\n    }\n  })\n  return el\n}\n\n/**\n * @param {Element} el\n * @param {Map<string, string>} attrs Array of key-value pairs\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const setAttributesMap = (el, attrs) => {\n  attrs.forEach((value, key) => { el.setAttribute(key, value) })\n  return el\n}\n\n/**\n * @param {Array<Node>|HTMLCollection} children\n * @return {DocumentFragment}\n */\n/* istanbul ignore next */\nexport const fragment = children => {\n  const fragment = createDocumentFragment()\n  for (let i = 0; i < children.length; i++) {\n    appendChild(fragment, children[i])\n  }\n  return fragment\n}\n\n/**\n * @param {Element} parent\n * @param {Array<Node>} nodes\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const append = (parent, nodes) => {\n  appendChild(parent, fragment(nodes))\n  return parent\n}\n\n/**\n * @param {HTMLElement} el\n */\n/* istanbul ignore next */\nexport const remove = el => el.remove()\n\n/**\n * @param {EventTarget} el\n * @param {string} name\n * @param {EventListener} f\n */\n/* istanbul ignore next */\nexport const addEventListener = (el, name, f) => el.addEventListener(name, f)\n\n/**\n * @param {EventTarget} el\n * @param {string} name\n * @param {EventListener} f\n */\n/* istanbul ignore next */\nexport const removeEventListener = (el, name, f) => el.removeEventListener(name, f)\n\n/**\n * @param {Node} node\n * @param {Array<pair.Pair<string,EventListener>>} listeners\n * @return {Node}\n */\n/* istanbul ignore next */\nexport const addEventListeners = (node, listeners) => {\n  pair.forEach(listeners, (name, f) => addEventListener(node, name, f))\n  return node\n}\n\n/**\n * @param {Node} node\n * @param {Array<pair.Pair<string,EventListener>>} listeners\n * @return {Node}\n */\n/* istanbul ignore next */\nexport const removeEventListeners = (node, listeners) => {\n  pair.forEach(listeners, (name, f) => removeEventListener(node, name, f))\n  return node\n}\n\n/**\n * @param {string} name\n * @param {Array<pair.Pair<string,string>|pair.Pair<string,boolean>>} attrs Array of key-value pairs\n * @param {Array<Node>} children\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const element = (name, attrs = [], children = []) =>\n  append(setAttributes(createElement(name), attrs), children)\n\n/**\n * @param {number} width\n * @param {number} height\n */\n/* istanbul ignore next */\nexport const canvas = (width, height) => {\n  const c = /** @type {HTMLCanvasElement} */ (createElement('canvas'))\n  c.height = height\n  c.width = width\n  return c\n}\n\n/**\n * @param {string} t\n * @return {Text}\n */\n/* istanbul ignore next */\nexport const text = createTextNode\n\n/**\n * @param {pair.Pair<string,string>} pair\n */\n/* istanbul ignore next */\nexport const pairToStyleString = pair => `${pair.left}:${pair.right};`\n\n/**\n * @param {Array<pair.Pair<string,string>>} pairs\n * @return {string}\n */\n/* istanbul ignore next */\nexport const pairsToStyleString = pairs => pairs.map(pairToStyleString).join('')\n\n/**\n * @param {Map<string,string>} m\n * @return {string}\n */\n/* istanbul ignore next */\nexport const mapToStyleString = m => map.map(m, (value, key) => `${key}:${value};`).join('')\n\n/**\n * @todo should always query on a dom element\n *\n * @param {HTMLElement|ShadowRoot} el\n * @param {string} query\n * @return {HTMLElement | null}\n */\n/* istanbul ignore next */\nexport const querySelector = (el, query) => el.querySelector(query)\n\n/**\n * @param {HTMLElement|ShadowRoot} el\n * @param {string} query\n * @return {NodeListOf<HTMLElement>}\n */\n/* istanbul ignore next */\nexport const querySelectorAll = (el, query) => el.querySelectorAll(query)\n\n/**\n * @param {string} id\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const getElementById = id => /** @type {HTMLElement} */ (doc.getElementById(id))\n\n/**\n * @param {string} html\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nconst _parse = html => domParser.parseFromString(`<html><body>${html}</body></html>`, 'text/html').body\n\n/**\n * @param {string} html\n * @return {DocumentFragment}\n */\n/* istanbul ignore next */\nexport const parseFragment = html => fragment(/** @type {any} */ (_parse(html).childNodes))\n\n/**\n * @param {string} html\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const parseElement = html => /** @type HTMLElement */ (_parse(html).firstElementChild)\n\n/**\n * @param {HTMLElement} oldEl\n * @param {HTMLElement|DocumentFragment} newEl\n */\n/* istanbul ignore next */\nexport const replaceWith = (oldEl, newEl) => oldEl.replaceWith(newEl)\n\n/**\n * @param {HTMLElement} parent\n * @param {HTMLElement} el\n * @param {Node|null} ref\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const insertBefore = (parent, el, ref) => parent.insertBefore(el, ref)\n\n/**\n * @param {Node} parent\n * @param {Node} child\n * @return {Node}\n */\n/* istanbul ignore next */\nexport const appendChild = (parent, child) => parent.appendChild(child)\n\nexport const ELEMENT_NODE = doc.ELEMENT_NODE\nexport const TEXT_NODE = doc.TEXT_NODE\nexport const CDATA_SECTION_NODE = doc.CDATA_SECTION_NODE\nexport const COMMENT_NODE = doc.COMMENT_NODE\nexport const DOCUMENT_NODE = doc.DOCUMENT_NODE\nexport const DOCUMENT_TYPE_NODE = doc.DOCUMENT_TYPE_NODE\nexport const DOCUMENT_FRAGMENT_NODE = doc.DOCUMENT_FRAGMENT_NODE\n\n/**\n * @param {any} node\n * @param {number} type\n */\nexport const checkNodeType = (node, type) => node.nodeType === type\n\n/**\n * @param {Node} parent\n * @param {HTMLElement} child\n */\nexport const isParentOf = (parent, child) => {\n  let p = child.parentNode\n  while (p && p !== parent) {\n    p = p.parentNode\n  }\n  return p === parent\n}\n","/**\n * Isomorphic logging module with support for colors!\n *\n * @module logging\n */\n\nimport * as env from './environment.js'\nimport * as set from './set.js'\nimport * as symbol from './symbol.js'\nimport * as pair from './pair.js'\nimport * as dom from './dom.js'\nimport * as json from './json.js'\nimport * as map from './map.js'\nimport * as eventloop from './eventloop.js'\nimport * as math from './math.js'\nimport * as time from './time.js'\nimport * as func from './function.js'\n\nexport const BOLD = symbol.create()\nexport const UNBOLD = symbol.create()\nexport const BLUE = symbol.create()\nexport const GREY = symbol.create()\nexport const GREEN = symbol.create()\nexport const RED = symbol.create()\nexport const PURPLE = symbol.create()\nexport const ORANGE = symbol.create()\nexport const UNCOLOR = symbol.create()\n\n/**\n * @type {Object<Symbol,pair.Pair<string,string>>}\n */\nconst _browserStyleMap = {\n  [BOLD]: pair.create('font-weight', 'bold'),\n  [UNBOLD]: pair.create('font-weight', 'normal'),\n  [BLUE]: pair.create('color', 'blue'),\n  [GREEN]: pair.create('color', 'green'),\n  [GREY]: pair.create('color', 'grey'),\n  [RED]: pair.create('color', 'red'),\n  [PURPLE]: pair.create('color', 'purple'),\n  [ORANGE]: pair.create('color', 'orange'), // not well supported in chrome when debugging node with inspector - TODO: deprecate\n  [UNCOLOR]: pair.create('color', 'black')\n}\n\nconst _nodeStyleMap = {\n  [BOLD]: '\\u001b[1m',\n  [UNBOLD]: '\\u001b[2m',\n  [BLUE]: '\\x1b[34m',\n  [GREEN]: '\\x1b[32m',\n  [GREY]: '\\u001b[37m',\n  [RED]: '\\x1b[31m',\n  [PURPLE]: '\\x1b[35m',\n  [ORANGE]: '\\x1b[38;5;208m',\n  [UNCOLOR]: '\\x1b[0m'\n}\n\n/* istanbul ignore next */\n/**\n * @param {Array<string|Symbol|Object|number>} args\n * @return {Array<string|object|number>}\n */\nconst computeBrowserLoggingArgs = (args) => {\n  const strBuilder = []\n  const styles = []\n  const currentStyle = map.create()\n  /**\n   * @type {Array<string|Object|number>}\n   */\n  let logArgs = []\n  // try with formatting until we find something unsupported\n  let i = 0\n\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    // @ts-ignore\n    const style = _browserStyleMap[arg]\n    if (style !== undefined) {\n      currentStyle.set(style.left, style.right)\n    } else {\n      if (arg.constructor === String || arg.constructor === Number) {\n        const style = dom.mapToStyleString(currentStyle)\n        if (i > 0 || style.length > 0) {\n          strBuilder.push('%c' + arg)\n          styles.push(style)\n        } else {\n          strBuilder.push(arg)\n        }\n      } else {\n        break\n      }\n    }\n  }\n\n  if (i > 0) {\n    // create logArgs with what we have so far\n    logArgs = styles\n    logArgs.unshift(strBuilder.join(''))\n  }\n  // append the rest\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    if (!(arg instanceof Symbol)) {\n      logArgs.push(arg)\n    }\n  }\n  return logArgs\n}\n\n/* istanbul ignore next */\n/**\n * @param {Array<string|Symbol|Object|number>} args\n * @return {Array<string|object|number>}\n */\nconst computeNoColorLoggingArgs = args => {\n  const strBuilder = []\n  const logArgs = []\n\n  // try with formatting until we find something unsupported\n  let i = 0\n\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    // @ts-ignore\n    const style = _nodeStyleMap[arg]\n    if (style === undefined) {\n      if (arg.constructor === String || arg.constructor === Number) {\n        strBuilder.push(arg)\n      } else {\n        break\n      }\n    }\n  }\n  if (i > 0) {\n    logArgs.push(strBuilder.join(''))\n  }\n  // append the rest\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    /* istanbul ignore else */\n    if (!(arg instanceof Symbol)) {\n      if (arg.constructor === Object) {\n        logArgs.push(JSON.stringify(arg))\n      } else {\n        logArgs.push(arg)\n      }\n    }\n  }\n  return logArgs\n}\n\n/* istanbul ignore next */\n/**\n * @param {Array<string|Symbol|Object|number>} args\n * @return {Array<string|object|number>}\n */\nconst computeNodeLoggingArgs = (args) => {\n  const strBuilder = []\n  const logArgs = []\n\n  // try with formatting until we find something unsupported\n  let i = 0\n\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    // @ts-ignore\n    const style = _nodeStyleMap[arg]\n    if (style !== undefined) {\n      strBuilder.push(style)\n    } else {\n      if (arg.constructor === String || arg.constructor === Number) {\n        strBuilder.push(arg)\n      } else {\n        break\n      }\n    }\n  }\n  if (i > 0) {\n    // create logArgs with what we have so far\n    strBuilder.push('\\x1b[0m')\n    logArgs.push(strBuilder.join(''))\n  }\n  // append the rest\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    /* istanbul ignore else */\n    if (!(arg instanceof Symbol)) {\n      logArgs.push(arg)\n    }\n  }\n  return logArgs\n}\n\n/* istanbul ignore next */\nconst computeLoggingArgs = env.supportsColor\n  ? (env.isNode ? computeNodeLoggingArgs : computeBrowserLoggingArgs)\n  : computeNoColorLoggingArgs\n\n/**\n * @param {Array<string|Symbol|Object|number>} args\n */\nexport const print = (...args) => {\n  console.log(...computeLoggingArgs(args))\n  /* istanbul ignore next */\n  vconsoles.forEach((vc) => vc.print(args))\n}\n\n/* istanbul ignore next */\n/**\n * @param {Array<string|Symbol|Object|number>} args\n */\nexport const warn = (...args) => {\n  console.warn(...computeLoggingArgs(args))\n  args.unshift(ORANGE)\n  vconsoles.forEach((vc) => vc.print(args))\n}\n\n/* istanbul ignore next */\n/**\n * @param {Error} err\n */\nexport const printError = (err) => {\n  console.error(err)\n  vconsoles.forEach((vc) => vc.printError(err))\n}\n\n/* istanbul ignore next */\n/**\n * @param {string} url image location\n * @param {number} height height of the image in pixel\n */\nexport const printImg = (url, height) => {\n  if (env.isBrowser) {\n    console.log(\n      '%c                      ',\n      `font-size: ${height}px; background-size: contain; background-repeat: no-repeat; background-image: url(${url})`\n    )\n    // console.log('%c                ', `font-size: ${height}x; background: url(${url}) no-repeat;`)\n  }\n  vconsoles.forEach((vc) => vc.printImg(url, height))\n}\n\n/* istanbul ignore next */\n/**\n * @param {string} base64\n * @param {number} height\n */\nexport const printImgBase64 = (base64, height) =>\n  printImg(`data:image/gif;base64,${base64}`, height)\n\n/**\n * @param {Array<string|Symbol|Object|number>} args\n */\nexport const group = (...args) => {\n  console.group(...computeLoggingArgs(args))\n  /* istanbul ignore next */\n  vconsoles.forEach((vc) => vc.group(args))\n}\n\n/**\n * @param {Array<string|Symbol|Object|number>} args\n */\nexport const groupCollapsed = (...args) => {\n  console.groupCollapsed(...computeLoggingArgs(args))\n  /* istanbul ignore next */\n  vconsoles.forEach((vc) => vc.groupCollapsed(args))\n}\n\nexport const groupEnd = () => {\n  console.groupEnd()\n  /* istanbul ignore next */\n  vconsoles.forEach((vc) => vc.groupEnd())\n}\n\n/* istanbul ignore next */\n/**\n * @param {function():Node} createNode\n */\nexport const printDom = (createNode) =>\n  vconsoles.forEach((vc) => vc.printDom(createNode()))\n\n/* istanbul ignore next */\n/**\n * @param {HTMLCanvasElement} canvas\n * @param {number} height\n */\nexport const printCanvas = (canvas, height) =>\n  printImg(canvas.toDataURL(), height)\n\nexport const vconsoles = set.create()\n\n/* istanbul ignore next */\n/**\n * @param {Array<string|Symbol|Object|number>} args\n * @return {Array<Element>}\n */\nconst _computeLineSpans = (args) => {\n  const spans = []\n  const currentStyle = new Map()\n  // try with formatting until we find something unsupported\n  let i = 0\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    // @ts-ignore\n    const style = _browserStyleMap[arg]\n    if (style !== undefined) {\n      currentStyle.set(style.left, style.right)\n    } else {\n      if (arg.constructor === String || arg.constructor === Number) {\n        // @ts-ignore\n        const span = dom.element('span', [\n          pair.create('style', dom.mapToStyleString(currentStyle))\n        ], [dom.text(arg.toString())])\n        if (span.innerHTML === '') {\n          span.innerHTML = '&nbsp;'\n        }\n        spans.push(span)\n      } else {\n        break\n      }\n    }\n  }\n  // append the rest\n  for (; i < args.length; i++) {\n    let content = args[i]\n    if (!(content instanceof Symbol)) {\n      if (content.constructor !== String && content.constructor !== Number) {\n        content = ' ' + json.stringify(content) + ' '\n      }\n      spans.push(\n        dom.element('span', [], [dom.text(/** @type {string} */ (content))])\n      )\n    }\n  }\n  return spans\n}\n\nconst lineStyle =\n  'font-family:monospace;border-bottom:1px solid #e2e2e2;padding:2px;'\n\n/* istanbul ignore next */\nexport class VConsole {\n  /**\n   * @param {Element} dom\n   */\n  constructor (dom) {\n    this.dom = dom\n    /**\n     * @type {Element}\n     */\n    this.ccontainer = this.dom\n    this.depth = 0\n    vconsoles.add(this)\n  }\n\n  /**\n   * @param {Array<string|Symbol|Object|number>} args\n   * @param {boolean} collapsed\n   */\n  group (args, collapsed = false) {\n    eventloop.enqueue(() => {\n      const triangleDown = dom.element('span', [\n        pair.create('hidden', collapsed),\n        pair.create('style', 'color:grey;font-size:120%;')\n      ], [dom.text('▼')])\n      const triangleRight = dom.element('span', [\n        pair.create('hidden', !collapsed),\n        pair.create('style', 'color:grey;font-size:125%;')\n      ], [dom.text('▶')])\n      const content = dom.element(\n        'div',\n        [pair.create(\n          'style',\n          `${lineStyle};padding-left:${this.depth * 10}px`\n        )],\n        [triangleDown, triangleRight, dom.text(' ')].concat(\n          _computeLineSpans(args)\n        )\n      )\n      const nextContainer = dom.element('div', [\n        pair.create('hidden', collapsed)\n      ])\n      const nextLine = dom.element('div', [], [content, nextContainer])\n      dom.append(this.ccontainer, [nextLine])\n      this.ccontainer = nextContainer\n      this.depth++\n      // when header is clicked, collapse/uncollapse container\n      dom.addEventListener(content, 'click', (_event) => {\n        nextContainer.toggleAttribute('hidden')\n        triangleDown.toggleAttribute('hidden')\n        triangleRight.toggleAttribute('hidden')\n      })\n    })\n  }\n\n  /**\n   * @param {Array<string|Symbol|Object|number>} args\n   */\n  groupCollapsed (args) {\n    this.group(args, true)\n  }\n\n  groupEnd () {\n    eventloop.enqueue(() => {\n      if (this.depth > 0) {\n        this.depth--\n        // @ts-ignore\n        this.ccontainer = this.ccontainer.parentElement.parentElement\n      }\n    })\n  }\n\n  /**\n   * @param {Array<string|Symbol|Object|number>} args\n   */\n  print (args) {\n    eventloop.enqueue(() => {\n      dom.append(this.ccontainer, [\n        dom.element('div', [\n          pair.create(\n            'style',\n            `${lineStyle};padding-left:${this.depth * 10}px`\n          )\n        ], _computeLineSpans(args))\n      ])\n    })\n  }\n\n  /**\n   * @param {Error} err\n   */\n  printError (err) {\n    this.print([RED, BOLD, err.toString()])\n  }\n\n  /**\n   * @param {string} url\n   * @param {number} height\n   */\n  printImg (url, height) {\n    eventloop.enqueue(() => {\n      dom.append(this.ccontainer, [\n        dom.element('img', [\n          pair.create('src', url),\n          pair.create('height', `${math.round(height * 1.5)}px`)\n        ])\n      ])\n    })\n  }\n\n  /**\n   * @param {Node} node\n   */\n  printDom (node) {\n    eventloop.enqueue(() => {\n      dom.append(this.ccontainer, [node])\n    })\n  }\n\n  destroy () {\n    eventloop.enqueue(() => {\n      vconsoles.delete(this)\n    })\n  }\n}\n\n/* istanbul ignore next */\n/**\n * @param {Element} dom\n */\nexport const createVConsole = (dom) => new VConsole(dom)\n\nconst loggingColors = [GREEN, PURPLE, ORANGE, BLUE]\nlet nextColor = 0\nlet lastLoggingTime = time.getUnixTime()\n\n/**\n * @param {string} moduleName\n * @return {function(...any):void}\n */\nexport const createModuleLogger = (moduleName) => {\n  const color = loggingColors[nextColor]\n  const debugRegexVar = env.getVariable('log')\n  const doLogging = debugRegexVar !== null &&\n    (debugRegexVar === '*' || debugRegexVar === 'true' ||\n      new RegExp(debugRegexVar, 'gi').test(moduleName))\n  nextColor = (nextColor + 1) % loggingColors.length\n  moduleName += ': '\n\n  return !doLogging ? func.nop : (...args) => {\n    const timeNow = time.getUnixTime()\n    const timeDiff = timeNow - lastLoggingTime\n    lastLoggingTime = timeNow\n    print(\n      color,\n      moduleName,\n      UNCOLOR,\n      ...args.map((arg) =>\n        (typeof arg === 'string' || typeof arg === 'symbol')\n          ? arg\n          : JSON.stringify(arg)\n      ),\n      color,\n      ' +' + timeDiff + 'ms'\n    )\n  }\n}\n","/**\n * Utility module to create and manipulate Iterators.\n *\n * @module iterator\n */\n\n/**\n * @template T,R\n * @param {Iterator<T>} iterator\n * @param {function(T):R} f\n * @return {IterableIterator<R>}\n */\nexport const mapIterator = (iterator, f) => ({\n  [Symbol.iterator] () {\n    return this\n  },\n  // @ts-ignore\n  next () {\n    const r = iterator.next()\n    return { value: r.done ? undefined : f(r.value), done: r.done }\n  }\n})\n\n/**\n * @template T\n * @param {function():IteratorResult<T>} next\n * @return {IterableIterator<T>}\n */\nexport const createIterator = next => ({\n  /**\n   * @return {IterableIterator<T>}\n   */\n  [Symbol.iterator] () {\n    return this\n  },\n  // @ts-ignore\n  next\n})\n\n/**\n * @template T\n * @param {Iterator<T>} iterator\n * @param {function(T):boolean} filter\n */\nexport const iteratorFilter = (iterator, filter) => createIterator(() => {\n  let res\n  do {\n    res = iterator.next()\n  } while (!res.done && !filter(res.value))\n  return res\n})\n\n/**\n * @template T,M\n * @param {Iterator<T>} iterator\n * @param {function(T):M} fmap\n */\nexport const iteratorMap = (iterator, fmap) => createIterator(() => {\n  const { done, value } = iterator.next()\n  return { done, value: done ? undefined : fmap(value) }\n})\n","import { Observable } from 'lib0/observable';\nimport * as array from 'lib0/array';\nimport * as math from 'lib0/math';\nimport * as map from 'lib0/map';\nimport * as encoding from 'lib0/encoding';\nimport * as decoding from 'lib0/decoding';\nimport * as random from 'lib0/random';\nimport * as promise from 'lib0/promise';\nimport * as buffer from 'lib0/buffer';\nimport * as error from 'lib0/error';\nimport * as binary from 'lib0/binary';\nimport * as f from 'lib0/function';\nimport { callAll } from 'lib0/function';\nimport * as set from 'lib0/set';\nimport * as logging from 'lib0/logging';\nimport * as time from 'lib0/time';\nimport * as iterator from 'lib0/iterator';\nimport * as object from 'lib0/object';\n\n/**\n * This is an abstract interface that all Connectors should implement to keep them interchangeable.\n *\n * @note This interface is experimental and it is not advised to actually inherit this class.\n *       It just serves as typing information.\n *\n * @extends {Observable<any>}\n */\nclass AbstractConnector extends Observable {\n  /**\n   * @param {Doc} ydoc\n   * @param {any} awareness\n   */\n  constructor (ydoc, awareness) {\n    super();\n    this.doc = ydoc;\n    this.awareness = awareness;\n  }\n}\n\nclass DeleteItem {\n  /**\n   * @param {number} clock\n   * @param {number} len\n   */\n  constructor (clock, len) {\n    /**\n     * @type {number}\n     */\n    this.clock = clock;\n    /**\n     * @type {number}\n     */\n    this.len = len;\n  }\n}\n\n/**\n * We no longer maintain a DeleteStore. DeleteSet is a temporary object that is created when needed.\n * - When created in a transaction, it must only be accessed after sorting, and merging\n *   - This DeleteSet is send to other clients\n * - We do not create a DeleteSet when we send a sync message. The DeleteSet message is created directly from StructStore\n * - We read a DeleteSet as part of a sync/update message. In this case the DeleteSet is already sorted and merged.\n */\nclass DeleteSet {\n  constructor () {\n    /**\n     * @type {Map<number,Array<DeleteItem>>}\n     */\n    this.clients = new Map();\n  }\n}\n\n/**\n * Iterate over all structs that the DeleteSet gc's.\n *\n * @param {Transaction} transaction\n * @param {DeleteSet} ds\n * @param {function(GC|Item):void} f\n *\n * @function\n */\nconst iterateDeletedStructs = (transaction, ds, f) =>\n  ds.clients.forEach((deletes, clientid) => {\n    const structs = /** @type {Array<GC|Item>} */ (transaction.doc.store.clients.get(clientid));\n    for (let i = 0; i < deletes.length; i++) {\n      const del = deletes[i];\n      iterateStructs(transaction, structs, del.clock, del.len, f);\n    }\n  });\n\n/**\n * @param {Array<DeleteItem>} dis\n * @param {number} clock\n * @return {number|null}\n *\n * @private\n * @function\n */\nconst findIndexDS = (dis, clock) => {\n  let left = 0;\n  let right = dis.length - 1;\n  while (left <= right) {\n    const midindex = math.floor((left + right) / 2);\n    const mid = dis[midindex];\n    const midclock = mid.clock;\n    if (midclock <= clock) {\n      if (clock < midclock + mid.len) {\n        return midindex\n      }\n      left = midindex + 1;\n    } else {\n      right = midindex - 1;\n    }\n  }\n  return null\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {ID} id\n * @return {boolean}\n *\n * @private\n * @function\n */\nconst isDeleted = (ds, id) => {\n  const dis = ds.clients.get(id.client);\n  return dis !== undefined && findIndexDS(dis, id.clock) !== null\n};\n\n/**\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\nconst sortAndMergeDeleteSet = ds => {\n  ds.clients.forEach(dels => {\n    dels.sort((a, b) => a.clock - b.clock);\n    // merge items without filtering or splicing the array\n    // i is the current pointer\n    // j refers to the current insert position for the pointed item\n    // try to merge dels[i] into dels[j-1] or set dels[j]=dels[i]\n    let i, j;\n    for (i = 1, j = 1; i < dels.length; i++) {\n      const left = dels[j - 1];\n      const right = dels[i];\n      if (left.clock + left.len >= right.clock) {\n        left.len = math.max(left.len, right.clock + right.len - left.clock);\n      } else {\n        if (j < i) {\n          dels[j] = right;\n        }\n        j++;\n      }\n    }\n    dels.length = j;\n  });\n};\n\n/**\n * @param {Array<DeleteSet>} dss\n * @return {DeleteSet} A fresh DeleteSet\n */\nconst mergeDeleteSets = dss => {\n  const merged = new DeleteSet();\n  for (let dssI = 0; dssI < dss.length; dssI++) {\n    dss[dssI].clients.forEach((delsLeft, client) => {\n      if (!merged.clients.has(client)) {\n        // Write all missing keys from current ds and all following.\n        // If merged already contains `client` current ds has already been added.\n        /**\n         * @type {Array<DeleteItem>}\n         */\n        const dels = delsLeft.slice();\n        for (let i = dssI + 1; i < dss.length; i++) {\n          array.appendTo(dels, dss[i].clients.get(client) || []);\n        }\n        merged.clients.set(client, dels);\n      }\n    });\n  }\n  sortAndMergeDeleteSet(merged);\n  return merged\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {number} client\n * @param {number} clock\n * @param {number} length\n *\n * @private\n * @function\n */\nconst addToDeleteSet = (ds, client, clock, length) => {\n  map.setIfUndefined(ds.clients, client, () => []).push(new DeleteItem(clock, length));\n};\n\nconst createDeleteSet = () => new DeleteSet();\n\n/**\n * @param {StructStore} ss\n * @return {DeleteSet} Merged and sorted DeleteSet\n *\n * @private\n * @function\n */\nconst createDeleteSetFromStructStore = ss => {\n  const ds = createDeleteSet();\n  ss.clients.forEach((structs, client) => {\n    /**\n     * @type {Array<DeleteItem>}\n     */\n    const dsitems = [];\n    for (let i = 0; i < structs.length; i++) {\n      const struct = structs[i];\n      if (struct.deleted) {\n        const clock = struct.id.clock;\n        let len = struct.length;\n        if (i + 1 < structs.length) {\n          for (let next = structs[i + 1]; i + 1 < structs.length && next.deleted; next = structs[++i + 1]) {\n            len += next.length;\n          }\n        }\n        dsitems.push(new DeleteItem(clock, len));\n      }\n    }\n    if (dsitems.length > 0) {\n      ds.clients.set(client, dsitems);\n    }\n  });\n  return ds\n};\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\nconst writeDeleteSet = (encoder, ds) => {\n  encoding.writeVarUint(encoder.restEncoder, ds.clients.size);\n  ds.clients.forEach((dsitems, client) => {\n    encoder.resetDsCurVal();\n    encoding.writeVarUint(encoder.restEncoder, client);\n    const len = dsitems.length;\n    encoding.writeVarUint(encoder.restEncoder, len);\n    for (let i = 0; i < len; i++) {\n      const item = dsitems[i];\n      encoder.writeDsClock(item.clock);\n      encoder.writeDsLen(item.len);\n    }\n  });\n};\n\n/**\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @return {DeleteSet}\n *\n * @private\n * @function\n */\nconst readDeleteSet = decoder => {\n  const ds = new DeleteSet();\n  const numClients = decoding.readVarUint(decoder.restDecoder);\n  for (let i = 0; i < numClients; i++) {\n    decoder.resetDsCurVal();\n    const client = decoding.readVarUint(decoder.restDecoder);\n    const numberOfDeletes = decoding.readVarUint(decoder.restDecoder);\n    if (numberOfDeletes > 0) {\n      const dsField = map.setIfUndefined(ds.clients, client, () => []);\n      for (let i = 0; i < numberOfDeletes; i++) {\n        dsField.push(new DeleteItem(decoder.readDsClock(), decoder.readDsLen()));\n      }\n    }\n  }\n  return ds\n};\n\n/**\n * @todo YDecoder also contains references to String and other Decoders. Would make sense to exchange YDecoder.toUint8Array for YDecoder.DsToUint8Array()..\n */\n\n/**\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @return {Uint8Array|null} Returns a v2 update containing all deletes that couldn't be applied yet; or null if all deletes were applied successfully.\n *\n * @private\n * @function\n */\nconst readAndApplyDeleteSet = (decoder, transaction, store) => {\n  const unappliedDS = new DeleteSet();\n  const numClients = decoding.readVarUint(decoder.restDecoder);\n  for (let i = 0; i < numClients; i++) {\n    decoder.resetDsCurVal();\n    const client = decoding.readVarUint(decoder.restDecoder);\n    const numberOfDeletes = decoding.readVarUint(decoder.restDecoder);\n    const structs = store.clients.get(client) || [];\n    const state = getState(store, client);\n    for (let i = 0; i < numberOfDeletes; i++) {\n      const clock = decoder.readDsClock();\n      const clockEnd = clock + decoder.readDsLen();\n      if (clock < state) {\n        if (state < clockEnd) {\n          addToDeleteSet(unappliedDS, client, state, clockEnd - state);\n        }\n        let index = findIndexSS(structs, clock);\n        /**\n         * We can ignore the case of GC and Delete structs, because we are going to skip them\n         * @type {Item}\n         */\n        // @ts-ignore\n        let struct = structs[index];\n        // split the first item if necessary\n        if (!struct.deleted && struct.id.clock < clock) {\n          structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock));\n          index++; // increase we now want to use the next struct\n        }\n        while (index < structs.length) {\n          // @ts-ignore\n          struct = structs[index++];\n          if (struct.id.clock < clockEnd) {\n            if (!struct.deleted) {\n              if (clockEnd < struct.id.clock + struct.length) {\n                structs.splice(index, 0, splitItem(transaction, struct, clockEnd - struct.id.clock));\n              }\n              struct.delete(transaction);\n            }\n          } else {\n            break\n          }\n        }\n      } else {\n        addToDeleteSet(unappliedDS, client, clock, clockEnd - clock);\n      }\n    }\n  }\n  if (unappliedDS.clients.size > 0) {\n    const ds = new UpdateEncoderV2();\n    encoding.writeVarUint(ds.restEncoder, 0); // encode 0 structs\n    writeDeleteSet(ds, unappliedDS);\n    return ds.toUint8Array()\n  }\n  return null\n};\n\n/**\n * @module Y\n */\n\nconst generateNewClientId = random.uint32;\n\n/**\n * @typedef {Object} DocOpts\n * @property {boolean} [DocOpts.gc=true] Disable garbage collection (default: gc=true)\n * @property {function(Item):boolean} [DocOpts.gcFilter] Will be called before an Item is garbage collected. Return false to keep the Item.\n * @property {string} [DocOpts.guid] Define a globally unique identifier for this document\n * @property {string | null} [DocOpts.collectionid] Associate this document with a collection. This only plays a role if your provider has a concept of collection.\n * @property {any} [DocOpts.meta] Any kind of meta information you want to associate with this document. If this is a subdocument, remote peers will store the meta information as well.\n * @property {boolean} [DocOpts.autoLoad] If a subdocument, automatically load document. If this is a subdocument, remote peers will load the document as well automatically.\n * @property {boolean} [DocOpts.shouldLoad] Whether the document should be synced by the provider now. This is toggled to true when you call ydoc.load()\n */\n\n/**\n * A Yjs instance handles the state of shared data.\n * @extends Observable<string>\n */\nclass Doc extends Observable {\n  /**\n   * @param {DocOpts} opts configuration\n   */\n  constructor ({ guid = random.uuidv4(), collectionid = null, gc = true, gcFilter = () => true, meta = null, autoLoad = false, shouldLoad = true } = {}) {\n    super();\n    this.gc = gc;\n    this.gcFilter = gcFilter;\n    this.clientID = generateNewClientId();\n    this.guid = guid;\n    this.collectionid = collectionid;\n    /**\n     * @type {Map<string, AbstractType<YEvent<any>>>}\n     */\n    this.share = new Map();\n    this.store = new StructStore();\n    /**\n     * @type {Transaction | null}\n     */\n    this._transaction = null;\n    /**\n     * @type {Array<Transaction>}\n     */\n    this._transactionCleanups = [];\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocs = new Set();\n    /**\n     * If this document is a subdocument - a document integrated into another document - then _item is defined.\n     * @type {Item?}\n     */\n    this._item = null;\n    this.shouldLoad = shouldLoad;\n    this.autoLoad = autoLoad;\n    this.meta = meta;\n    /**\n     * This is set to true when the persistence provider loaded the document from the database or when the `sync` event fires.\n     * Note that not all providers implement this feature. Provider authors are encouraged to fire the `load` event when the doc content is loaded from the database.\n     *\n     * @type {boolean}\n     */\n    this.isLoaded = false;\n    /**\n     * This is set to true when the connection provider has successfully synced with a backend.\n     * Note that when using peer-to-peer providers this event may not provide very useful.\n     * Also note that not all providers implement this feature. Provider authors are encouraged to fire\n     * the `sync` event when the doc has been synced (with `true` as a parameter) or if connection is\n     * lost (with false as a parameter).\n     */\n    this.isSynced = false;\n    /**\n     * Promise that resolves once the document has been loaded from a presistence provider.\n     */\n    this.whenLoaded = promise.create(resolve => {\n      this.on('load', () => {\n        this.isLoaded = true;\n        resolve(this);\n      });\n    });\n    const provideSyncedPromise = () => promise.create(resolve => {\n      /**\n       * @param {boolean} isSynced\n       */\n      const eventHandler = (isSynced) => {\n        if (isSynced === undefined || isSynced === true) {\n          this.off('sync', eventHandler);\n          resolve();\n        }\n      };\n      this.on('sync', eventHandler);\n    });\n    this.on('sync', isSynced => {\n      if (isSynced === false && this.isSynced) {\n        this.whenSynced = provideSyncedPromise();\n      }\n      this.isSynced = isSynced === undefined || isSynced === true;\n      if (!this.isLoaded) {\n        this.emit('load', []);\n      }\n    });\n    /**\n     * Promise that resolves once the document has been synced with a backend.\n     * This promise is recreated when the connection is lost.\n     * Note the documentation about the `isSynced` property.\n     */\n    this.whenSynced = provideSyncedPromise();\n  }\n\n  /**\n   * Notify the parent document that you request to load data into this subdocument (if it is a subdocument).\n   *\n   * `load()` might be used in the future to request any provider to load the most current data.\n   *\n   * It is safe to call `load()` multiple times.\n   */\n  load () {\n    const item = this._item;\n    if (item !== null && !this.shouldLoad) {\n      transact(/** @type {any} */ (item.parent).doc, transaction => {\n        transaction.subdocsLoaded.add(this);\n      }, null, true);\n    }\n    this.shouldLoad = true;\n  }\n\n  getSubdocs () {\n    return this.subdocs\n  }\n\n  getSubdocGuids () {\n    return new Set(Array.from(this.subdocs).map(doc => doc.guid))\n  }\n\n  /**\n   * Changes that happen inside of a transaction are bundled. This means that\n   * the observer fires _after_ the transaction is finished and that all changes\n   * that happened inside of the transaction are sent as one message to the\n   * other peers.\n   *\n   * @param {function(Transaction):void} f The function that should be executed as a transaction\n   * @param {any} [origin] Origin of who started the transaction. Will be stored on transaction.origin\n   *\n   * @public\n   */\n  transact (f, origin = null) {\n    transact(this, f, origin);\n  }\n\n  /**\n   * Define a shared data type.\n   *\n   * Multiple calls of `y.get(name, TypeConstructor)` yield the same result\n   * and do not overwrite each other. I.e.\n   * `y.define(name, Y.Array) === y.define(name, Y.Array)`\n   *\n   * After this method is called, the type is also available on `y.share.get(name)`.\n   *\n   * *Best Practices:*\n   * Define all types right after the Yjs instance is created and store them in a separate object.\n   * Also use the typed methods `getText(name)`, `getArray(name)`, ..\n   *\n   * @example\n   *   const y = new Y(..)\n   *   const appState = {\n   *     document: y.getText('document')\n   *     comments: y.getArray('comments')\n   *   }\n   *\n   * @param {string} name\n   * @param {Function} TypeConstructor The constructor of the type definition. E.g. Y.Text, Y.Array, Y.Map, ...\n   * @return {AbstractType<any>} The created type. Constructed with TypeConstructor\n   *\n   * @public\n   */\n  get (name, TypeConstructor = AbstractType) {\n    const type = map.setIfUndefined(this.share, name, () => {\n      // @ts-ignore\n      const t = new TypeConstructor();\n      t._integrate(this, null);\n      return t\n    });\n    const Constr = type.constructor;\n    if (TypeConstructor !== AbstractType && Constr !== TypeConstructor) {\n      if (Constr === AbstractType) {\n        // @ts-ignore\n        const t = new TypeConstructor();\n        t._map = type._map;\n        type._map.forEach(/** @param {Item?} n */ n => {\n          for (; n !== null; n = n.left) {\n            // @ts-ignore\n            n.parent = t;\n          }\n        });\n        t._start = type._start;\n        for (let n = t._start; n !== null; n = n.right) {\n          n.parent = t;\n        }\n        t._length = type._length;\n        this.share.set(name, t);\n        t._integrate(this, null);\n        return t\n      } else {\n        throw new Error(`Type with the name ${name} has already been defined with a different constructor`)\n      }\n    }\n    return type\n  }\n\n  /**\n   * @template T\n   * @param {string} [name]\n   * @return {YArray<T>}\n   *\n   * @public\n   */\n  getArray (name = '') {\n    // @ts-ignore\n    return this.get(name, YArray)\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YText}\n   *\n   * @public\n   */\n  getText (name = '') {\n    // @ts-ignore\n    return this.get(name, YText)\n  }\n\n  /**\n   * @template T\n   * @param {string} [name]\n   * @return {YMap<T>}\n   *\n   * @public\n   */\n  getMap (name = '') {\n    // @ts-ignore\n    return this.get(name, YMap)\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YXmlFragment}\n   *\n   * @public\n   */\n  getXmlFragment (name = '') {\n    // @ts-ignore\n    return this.get(name, YXmlFragment)\n  }\n\n  /**\n   * Converts the entire document into a js object, recursively traversing each yjs type\n   * Doesn't log types that have not been defined (using ydoc.getType(..)).\n   *\n   * @deprecated Do not use this method and rather call toJSON directly on the shared types.\n   *\n   * @return {Object<string, any>}\n   */\n  toJSON () {\n    /**\n     * @type {Object<string, any>}\n     */\n    const doc = {};\n\n    this.share.forEach((value, key) => {\n      doc[key] = value.toJSON();\n    });\n\n    return doc\n  }\n\n  /**\n   * Emit `destroy` event and unregister all event handlers.\n   */\n  destroy () {\n    array.from(this.subdocs).forEach(subdoc => subdoc.destroy());\n    const item = this._item;\n    if (item !== null) {\n      this._item = null;\n      const content = /** @type {ContentDoc} */ (item.content);\n      content.doc = new Doc({ guid: this.guid, ...content.opts, shouldLoad: false });\n      content.doc._item = item;\n      transact(/** @type {any} */ (item).parent.doc, transaction => {\n        const doc = content.doc;\n        if (!item.deleted) {\n          transaction.subdocsAdded.add(doc);\n        }\n        transaction.subdocsRemoved.add(this);\n      }, null, true);\n    }\n    this.emit('destroyed', [true]);\n    this.emit('destroy', [this]);\n    super.destroy();\n  }\n\n  /**\n   * @param {string} eventName\n   * @param {function(...any):any} f\n   */\n  on (eventName, f) {\n    super.on(eventName, f);\n  }\n\n  /**\n   * @param {string} eventName\n   * @param {function} f\n   */\n  off (eventName, f) {\n    super.off(eventName, f);\n  }\n}\n\nclass DSDecoderV1 {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  constructor (decoder) {\n    this.restDecoder = decoder;\n  }\n\n  resetDsCurVal () {\n    // nop\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsClock () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsLen () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n}\n\nclass UpdateDecoderV1 extends DSDecoderV1 {\n  /**\n   * @return {ID}\n   */\n  readLeftID () {\n    return createID(decoding.readVarUint(this.restDecoder), decoding.readVarUint(this.restDecoder))\n  }\n\n  /**\n   * @return {ID}\n   */\n  readRightID () {\n    return createID(decoding.readVarUint(this.restDecoder), decoding.readVarUint(this.restDecoder))\n  }\n\n  /**\n   * Read the next client id.\n   * Use this in favor of readID whenever possible to reduce the number of objects created.\n   */\n  readClient () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * @return {number} info An unsigned 8-bit integer\n   */\n  readInfo () {\n    return decoding.readUint8(this.restDecoder)\n  }\n\n  /**\n   * @return {string}\n   */\n  readString () {\n    return decoding.readVarString(this.restDecoder)\n  }\n\n  /**\n   * @return {boolean} isKey\n   */\n  readParentInfo () {\n    return decoding.readVarUint(this.restDecoder) === 1\n  }\n\n  /**\n   * @return {number} info An unsigned 8-bit integer\n   */\n  readTypeRef () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @return {number} len\n   */\n  readLen () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * @return {any}\n   */\n  readAny () {\n    return decoding.readAny(this.restDecoder)\n  }\n\n  /**\n   * @return {Uint8Array}\n   */\n  readBuf () {\n    return buffer.copyUint8Array(decoding.readVarUint8Array(this.restDecoder))\n  }\n\n  /**\n   * Legacy implementation uses JSON parse. We use any-decoding in v2.\n   *\n   * @return {any}\n   */\n  readJSON () {\n    return JSON.parse(decoding.readVarString(this.restDecoder))\n  }\n\n  /**\n   * @return {string}\n   */\n  readKey () {\n    return decoding.readVarString(this.restDecoder)\n  }\n}\n\nclass DSDecoderV2 {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  constructor (decoder) {\n    /**\n     * @private\n     */\n    this.dsCurrVal = 0;\n    this.restDecoder = decoder;\n  }\n\n  resetDsCurVal () {\n    this.dsCurrVal = 0;\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsClock () {\n    this.dsCurrVal += decoding.readVarUint(this.restDecoder);\n    return this.dsCurrVal\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsLen () {\n    const diff = decoding.readVarUint(this.restDecoder) + 1;\n    this.dsCurrVal += diff;\n    return diff\n  }\n}\n\nclass UpdateDecoderV2 extends DSDecoderV2 {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  constructor (decoder) {\n    super(decoder);\n    /**\n     * List of cached keys. If the keys[id] does not exist, we read a new key\n     * from stringEncoder and push it to keys.\n     *\n     * @type {Array<string>}\n     */\n    this.keys = [];\n    decoding.readVarUint(decoder); // read feature flag - currently unused\n    this.keyClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder));\n    this.clientDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder));\n    this.leftClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder));\n    this.rightClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder));\n    this.infoDecoder = new decoding.RleDecoder(decoding.readVarUint8Array(decoder), decoding.readUint8);\n    this.stringDecoder = new decoding.StringDecoder(decoding.readVarUint8Array(decoder));\n    this.parentInfoDecoder = new decoding.RleDecoder(decoding.readVarUint8Array(decoder), decoding.readUint8);\n    this.typeRefDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder));\n    this.lenDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder));\n  }\n\n  /**\n   * @return {ID}\n   */\n  readLeftID () {\n    return new ID(this.clientDecoder.read(), this.leftClockDecoder.read())\n  }\n\n  /**\n   * @return {ID}\n   */\n  readRightID () {\n    return new ID(this.clientDecoder.read(), this.rightClockDecoder.read())\n  }\n\n  /**\n   * Read the next client id.\n   * Use this in favor of readID whenever possible to reduce the number of objects created.\n   */\n  readClient () {\n    return this.clientDecoder.read()\n  }\n\n  /**\n   * @return {number} info An unsigned 8-bit integer\n   */\n  readInfo () {\n    return /** @type {number} */ (this.infoDecoder.read())\n  }\n\n  /**\n   * @return {string}\n   */\n  readString () {\n    return this.stringDecoder.read()\n  }\n\n  /**\n   * @return {boolean}\n   */\n  readParentInfo () {\n    return this.parentInfoDecoder.read() === 1\n  }\n\n  /**\n   * @return {number} An unsigned 8-bit integer\n   */\n  readTypeRef () {\n    return this.typeRefDecoder.read()\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @return {number}\n   */\n  readLen () {\n    return this.lenDecoder.read()\n  }\n\n  /**\n   * @return {any}\n   */\n  readAny () {\n    return decoding.readAny(this.restDecoder)\n  }\n\n  /**\n   * @return {Uint8Array}\n   */\n  readBuf () {\n    return decoding.readVarUint8Array(this.restDecoder)\n  }\n\n  /**\n   * This is mainly here for legacy purposes.\n   *\n   * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n   *\n   * @return {any}\n   */\n  readJSON () {\n    return decoding.readAny(this.restDecoder)\n  }\n\n  /**\n   * @return {string}\n   */\n  readKey () {\n    const keyClock = this.keyClockDecoder.read();\n    if (keyClock < this.keys.length) {\n      return this.keys[keyClock]\n    } else {\n      const key = this.stringDecoder.read();\n      this.keys.push(key);\n      return key\n    }\n  }\n}\n\nclass DSEncoderV1 {\n  constructor () {\n    this.restEncoder = encoding.createEncoder();\n  }\n\n  toUint8Array () {\n    return encoding.toUint8Array(this.restEncoder)\n  }\n\n  resetDsCurVal () {\n    // nop\n  }\n\n  /**\n   * @param {number} clock\n   */\n  writeDsClock (clock) {\n    encoding.writeVarUint(this.restEncoder, clock);\n  }\n\n  /**\n   * @param {number} len\n   */\n  writeDsLen (len) {\n    encoding.writeVarUint(this.restEncoder, len);\n  }\n}\n\nclass UpdateEncoderV1 extends DSEncoderV1 {\n  /**\n   * @param {ID} id\n   */\n  writeLeftID (id) {\n    encoding.writeVarUint(this.restEncoder, id.client);\n    encoding.writeVarUint(this.restEncoder, id.clock);\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeRightID (id) {\n    encoding.writeVarUint(this.restEncoder, id.client);\n    encoding.writeVarUint(this.restEncoder, id.clock);\n  }\n\n  /**\n   * Use writeClient and writeClock instead of writeID if possible.\n   * @param {number} client\n   */\n  writeClient (client) {\n    encoding.writeVarUint(this.restEncoder, client);\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeInfo (info) {\n    encoding.writeUint8(this.restEncoder, info);\n  }\n\n  /**\n   * @param {string} s\n   */\n  writeString (s) {\n    encoding.writeVarString(this.restEncoder, s);\n  }\n\n  /**\n   * @param {boolean} isYKey\n   */\n  writeParentInfo (isYKey) {\n    encoding.writeVarUint(this.restEncoder, isYKey ? 1 : 0);\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeTypeRef (info) {\n    encoding.writeVarUint(this.restEncoder, info);\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @param {number} len\n   */\n  writeLen (len) {\n    encoding.writeVarUint(this.restEncoder, len);\n  }\n\n  /**\n   * @param {any} any\n   */\n  writeAny (any) {\n    encoding.writeAny(this.restEncoder, any);\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   */\n  writeBuf (buf) {\n    encoding.writeVarUint8Array(this.restEncoder, buf);\n  }\n\n  /**\n   * @param {any} embed\n   */\n  writeJSON (embed) {\n    encoding.writeVarString(this.restEncoder, JSON.stringify(embed));\n  }\n\n  /**\n   * @param {string} key\n   */\n  writeKey (key) {\n    encoding.writeVarString(this.restEncoder, key);\n  }\n}\n\nclass DSEncoderV2 {\n  constructor () {\n    this.restEncoder = encoding.createEncoder(); // encodes all the rest / non-optimized\n    this.dsCurrVal = 0;\n  }\n\n  toUint8Array () {\n    return encoding.toUint8Array(this.restEncoder)\n  }\n\n  resetDsCurVal () {\n    this.dsCurrVal = 0;\n  }\n\n  /**\n   * @param {number} clock\n   */\n  writeDsClock (clock) {\n    const diff = clock - this.dsCurrVal;\n    this.dsCurrVal = clock;\n    encoding.writeVarUint(this.restEncoder, diff);\n  }\n\n  /**\n   * @param {number} len\n   */\n  writeDsLen (len) {\n    if (len === 0) {\n      error.unexpectedCase();\n    }\n    encoding.writeVarUint(this.restEncoder, len - 1);\n    this.dsCurrVal += len;\n  }\n}\n\nclass UpdateEncoderV2 extends DSEncoderV2 {\n  constructor () {\n    super();\n    /**\n     * @type {Map<string,number>}\n     */\n    this.keyMap = new Map();\n    /**\n     * Refers to the next uniqe key-identifier to me used.\n     * See writeKey method for more information.\n     *\n     * @type {number}\n     */\n    this.keyClock = 0;\n    this.keyClockEncoder = new encoding.IntDiffOptRleEncoder();\n    this.clientEncoder = new encoding.UintOptRleEncoder();\n    this.leftClockEncoder = new encoding.IntDiffOptRleEncoder();\n    this.rightClockEncoder = new encoding.IntDiffOptRleEncoder();\n    this.infoEncoder = new encoding.RleEncoder(encoding.writeUint8);\n    this.stringEncoder = new encoding.StringEncoder();\n    this.parentInfoEncoder = new encoding.RleEncoder(encoding.writeUint8);\n    this.typeRefEncoder = new encoding.UintOptRleEncoder();\n    this.lenEncoder = new encoding.UintOptRleEncoder();\n  }\n\n  toUint8Array () {\n    const encoder = encoding.createEncoder();\n    encoding.writeVarUint(encoder, 0); // this is a feature flag that we might use in the future\n    encoding.writeVarUint8Array(encoder, this.keyClockEncoder.toUint8Array());\n    encoding.writeVarUint8Array(encoder, this.clientEncoder.toUint8Array());\n    encoding.writeVarUint8Array(encoder, this.leftClockEncoder.toUint8Array());\n    encoding.writeVarUint8Array(encoder, this.rightClockEncoder.toUint8Array());\n    encoding.writeVarUint8Array(encoder, encoding.toUint8Array(this.infoEncoder));\n    encoding.writeVarUint8Array(encoder, this.stringEncoder.toUint8Array());\n    encoding.writeVarUint8Array(encoder, encoding.toUint8Array(this.parentInfoEncoder));\n    encoding.writeVarUint8Array(encoder, this.typeRefEncoder.toUint8Array());\n    encoding.writeVarUint8Array(encoder, this.lenEncoder.toUint8Array());\n    // @note The rest encoder is appended! (note the missing var)\n    encoding.writeUint8Array(encoder, encoding.toUint8Array(this.restEncoder));\n    return encoding.toUint8Array(encoder)\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeLeftID (id) {\n    this.clientEncoder.write(id.client);\n    this.leftClockEncoder.write(id.clock);\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeRightID (id) {\n    this.clientEncoder.write(id.client);\n    this.rightClockEncoder.write(id.clock);\n  }\n\n  /**\n   * @param {number} client\n   */\n  writeClient (client) {\n    this.clientEncoder.write(client);\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeInfo (info) {\n    this.infoEncoder.write(info);\n  }\n\n  /**\n   * @param {string} s\n   */\n  writeString (s) {\n    this.stringEncoder.write(s);\n  }\n\n  /**\n   * @param {boolean} isYKey\n   */\n  writeParentInfo (isYKey) {\n    this.parentInfoEncoder.write(isYKey ? 1 : 0);\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeTypeRef (info) {\n    this.typeRefEncoder.write(info);\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @param {number} len\n   */\n  writeLen (len) {\n    this.lenEncoder.write(len);\n  }\n\n  /**\n   * @param {any} any\n   */\n  writeAny (any) {\n    encoding.writeAny(this.restEncoder, any);\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   */\n  writeBuf (buf) {\n    encoding.writeVarUint8Array(this.restEncoder, buf);\n  }\n\n  /**\n   * This is mainly here for legacy purposes.\n   *\n   * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n   *\n   * @param {any} embed\n   */\n  writeJSON (embed) {\n    encoding.writeAny(this.restEncoder, embed);\n  }\n\n  /**\n   * Property keys are often reused. For example, in y-prosemirror the key `bold` might\n   * occur very often. For a 3d application, the key `position` might occur very often.\n   *\n   * We cache these keys in a Map and refer to them via a unique number.\n   *\n   * @param {string} key\n   */\n  writeKey (key) {\n    const clock = this.keyMap.get(key);\n    if (clock === undefined) {\n      /**\n       * @todo uncomment to introduce this feature finally\n       *\n       * Background. The ContentFormat object was always encoded using writeKey, but the decoder used to use readString.\n       * Furthermore, I forgot to set the keyclock. So everything was working fine.\n       *\n       * However, this feature here is basically useless as it is not being used (it actually only consumes extra memory).\n       *\n       * I don't know yet how to reintroduce this feature..\n       *\n       * Older clients won't be able to read updates when we reintroduce this feature. So this should probably be done using a flag.\n       *\n       */\n      // this.keyMap.set(key, this.keyClock)\n      this.keyClockEncoder.write(this.keyClock++);\n      this.stringEncoder.write(key);\n    } else {\n      this.keyClockEncoder.write(clock);\n    }\n  }\n}\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Array<GC|Item>} structs All structs by `client`\n * @param {number} client\n * @param {number} clock write structs starting with `ID(client,clock)`\n *\n * @function\n */\nconst writeStructs = (encoder, structs, client, clock) => {\n  // write first id\n  clock = math.max(clock, structs[0].id.clock); // make sure the first id exists\n  const startNewStructs = findIndexSS(structs, clock);\n  // write # encoded structs\n  encoding.writeVarUint(encoder.restEncoder, structs.length - startNewStructs);\n  encoder.writeClient(client);\n  encoding.writeVarUint(encoder.restEncoder, clock);\n  const firstStruct = structs[startNewStructs];\n  // write first struct with an offset\n  firstStruct.write(encoder, clock - firstStruct.id.clock);\n  for (let i = startNewStructs + 1; i < structs.length; i++) {\n    structs[i].write(encoder, 0);\n  }\n};\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {StructStore} store\n * @param {Map<number,number>} _sm\n *\n * @private\n * @function\n */\nconst writeClientsStructs = (encoder, store, _sm) => {\n  // we filter all valid _sm entries into sm\n  const sm = new Map();\n  _sm.forEach((clock, client) => {\n    // only write if new structs are available\n    if (getState(store, client) > clock) {\n      sm.set(client, clock);\n    }\n  });\n  getStateVector(store).forEach((clock, client) => {\n    if (!_sm.has(client)) {\n      sm.set(client, 0);\n    }\n  });\n  // write # states that were updated\n  encoding.writeVarUint(encoder.restEncoder, sm.size);\n  // Write items with higher client ids first\n  // This heavily improves the conflict algorithm.\n  Array.from(sm.entries()).sort((a, b) => b[0] - a[0]).forEach(([client, clock]) => {\n    // @ts-ignore\n    writeStructs(encoder, store.clients.get(client), client, clock);\n  });\n};\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder The decoder object to read data from.\n * @param {Doc} doc\n * @return {Map<number, { i: number, refs: Array<Item | GC> }>}\n *\n * @private\n * @function\n */\nconst readClientsStructRefs = (decoder, doc) => {\n  /**\n   * @type {Map<number, { i: number, refs: Array<Item | GC> }>}\n   */\n  const clientRefs = map.create();\n  const numOfStateUpdates = decoding.readVarUint(decoder.restDecoder);\n  for (let i = 0; i < numOfStateUpdates; i++) {\n    const numberOfStructs = decoding.readVarUint(decoder.restDecoder);\n    /**\n     * @type {Array<GC|Item>}\n     */\n    const refs = new Array(numberOfStructs);\n    const client = decoder.readClient();\n    let clock = decoding.readVarUint(decoder.restDecoder);\n    // const start = performance.now()\n    clientRefs.set(client, { i: 0, refs });\n    for (let i = 0; i < numberOfStructs; i++) {\n      const info = decoder.readInfo();\n      switch (binary.BITS5 & info) {\n        case 0: { // GC\n          const len = decoder.readLen();\n          refs[i] = new GC(createID(client, clock), len);\n          clock += len;\n          break\n        }\n        case 10: { // Skip Struct (nothing to apply)\n          // @todo we could reduce the amount of checks by adding Skip struct to clientRefs so we know that something is missing.\n          const len = decoding.readVarUint(decoder.restDecoder);\n          refs[i] = new Skip(createID(client, clock), len);\n          clock += len;\n          break\n        }\n        default: { // Item with content\n          /**\n           * The optimized implementation doesn't use any variables because inlining variables is faster.\n           * Below a non-optimized version is shown that implements the basic algorithm with\n           * a few comments\n           */\n          const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0;\n          // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n          // and we read the next string as parentYKey.\n          // It indicates how we store/retrieve parent from `y.share`\n          // @type {string|null}\n          const struct = new Item(\n            createID(client, clock),\n            null, // leftd\n            (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null, // origin\n            null, // right\n            (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null, // right origin\n            cantCopyParentInfo ? (decoder.readParentInfo() ? doc.get(decoder.readString()) : decoder.readLeftID()) : null, // parent\n            cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n            readItemContent(decoder, info) // item content\n          );\n          /* A non-optimized implementation of the above algorithm:\n\n          // The item that was originally to the left of this item.\n          const origin = (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null\n          // The item that was originally to the right of this item.\n          const rightOrigin = (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null\n          const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0\n          const hasParentYKey = cantCopyParentInfo ? decoder.readParentInfo() : false\n          // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n          // and we read the next string as parentYKey.\n          // It indicates how we store/retrieve parent from `y.share`\n          // @type {string|null}\n          const parentYKey = cantCopyParentInfo && hasParentYKey ? decoder.readString() : null\n\n          const struct = new Item(\n            createID(client, clock),\n            null, // leftd\n            origin, // origin\n            null, // right\n            rightOrigin, // right origin\n            cantCopyParentInfo && !hasParentYKey ? decoder.readLeftID() : (parentYKey !== null ? doc.get(parentYKey) : null), // parent\n            cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n            readItemContent(decoder, info) // item content\n          )\n          */\n          refs[i] = struct;\n          clock += struct.length;\n        }\n      }\n    }\n    // console.log('time to read: ', performance.now() - start) // @todo remove\n  }\n  return clientRefs\n};\n\n/**\n * Resume computing structs generated by struct readers.\n *\n * While there is something to do, we integrate structs in this order\n * 1. top element on stack, if stack is not empty\n * 2. next element from current struct reader (if empty, use next struct reader)\n *\n * If struct causally depends on another struct (ref.missing), we put next reader of\n * `ref.id.client` on top of stack.\n *\n * At some point we find a struct that has no causal dependencies,\n * then we start emptying the stack.\n *\n * It is not possible to have circles: i.e. struct1 (from client1) depends on struct2 (from client2)\n * depends on struct3 (from client1). Therefore the max stack size is eqaul to `structReaders.length`.\n *\n * This method is implemented in a way so that we can resume computation if this update\n * causally depends on another update.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {Map<number, { i: number, refs: (GC | Item)[] }>} clientsStructRefs\n * @return { null | { update: Uint8Array, missing: Map<number,number> } }\n *\n * @private\n * @function\n */\nconst integrateStructs = (transaction, store, clientsStructRefs) => {\n  /**\n   * @type {Array<Item | GC>}\n   */\n  const stack = [];\n  // sort them so that we take the higher id first, in case of conflicts the lower id will probably not conflict with the id from the higher user.\n  let clientsStructRefsIds = Array.from(clientsStructRefs.keys()).sort((a, b) => a - b);\n  if (clientsStructRefsIds.length === 0) {\n    return null\n  }\n  const getNextStructTarget = () => {\n    if (clientsStructRefsIds.length === 0) {\n      return null\n    }\n    let nextStructsTarget = /** @type {{i:number,refs:Array<GC|Item>}} */ (clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]));\n    while (nextStructsTarget.refs.length === nextStructsTarget.i) {\n      clientsStructRefsIds.pop();\n      if (clientsStructRefsIds.length > 0) {\n        nextStructsTarget = /** @type {{i:number,refs:Array<GC|Item>}} */ (clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]));\n      } else {\n        return null\n      }\n    }\n    return nextStructsTarget\n  };\n  let curStructsTarget = getNextStructTarget();\n  if (curStructsTarget === null && stack.length === 0) {\n    return null\n  }\n\n  /**\n   * @type {StructStore}\n   */\n  const restStructs = new StructStore();\n  const missingSV = new Map();\n  /**\n   * @param {number} client\n   * @param {number} clock\n   */\n  const updateMissingSv = (client, clock) => {\n    const mclock = missingSV.get(client);\n    if (mclock == null || mclock > clock) {\n      missingSV.set(client, clock);\n    }\n  };\n  /**\n   * @type {GC|Item}\n   */\n  let stackHead = /** @type {any} */ (curStructsTarget).refs[/** @type {any} */ (curStructsTarget).i++];\n  // caching the state because it is used very often\n  const state = new Map();\n\n  const addStackToRestSS = () => {\n    for (const item of stack) {\n      const client = item.id.client;\n      const unapplicableItems = clientsStructRefs.get(client);\n      if (unapplicableItems) {\n        // decrement because we weren't able to apply previous operation\n        unapplicableItems.i--;\n        restStructs.clients.set(client, unapplicableItems.refs.slice(unapplicableItems.i));\n        clientsStructRefs.delete(client);\n        unapplicableItems.i = 0;\n        unapplicableItems.refs = [];\n      } else {\n        // item was the last item on clientsStructRefs and the field was already cleared. Add item to restStructs and continue\n        restStructs.clients.set(client, [item]);\n      }\n      // remove client from clientsStructRefsIds to prevent users from applying the same update again\n      clientsStructRefsIds = clientsStructRefsIds.filter(c => c !== client);\n    }\n    stack.length = 0;\n  };\n\n  // iterate over all struct readers until we are done\n  while (true) {\n    if (stackHead.constructor !== Skip) {\n      const localClock = map.setIfUndefined(state, stackHead.id.client, () => getState(store, stackHead.id.client));\n      const offset = localClock - stackHead.id.clock;\n      if (offset < 0) {\n        // update from the same client is missing\n        stack.push(stackHead);\n        updateMissingSv(stackHead.id.client, stackHead.id.clock - 1);\n        // hid a dead wall, add all items from stack to restSS\n        addStackToRestSS();\n      } else {\n        const missing = stackHead.getMissing(transaction, store);\n        if (missing !== null) {\n          stack.push(stackHead);\n          // get the struct reader that has the missing struct\n          /**\n           * @type {{ refs: Array<GC|Item>, i: number }}\n           */\n          const structRefs = clientsStructRefs.get(/** @type {number} */ (missing)) || { refs: [], i: 0 };\n          if (structRefs.refs.length === structRefs.i) {\n            // This update message causally depends on another update message that doesn't exist yet\n            updateMissingSv(/** @type {number} */ (missing), getState(store, missing));\n            addStackToRestSS();\n          } else {\n            stackHead = structRefs.refs[structRefs.i++];\n            continue\n          }\n        } else if (offset === 0 || offset < stackHead.length) {\n          // all fine, apply the stackhead\n          stackHead.integrate(transaction, offset);\n          state.set(stackHead.id.client, stackHead.id.clock + stackHead.length);\n        }\n      }\n    }\n    // iterate to next stackHead\n    if (stack.length > 0) {\n      stackHead = /** @type {GC|Item} */ (stack.pop());\n    } else if (curStructsTarget !== null && curStructsTarget.i < curStructsTarget.refs.length) {\n      stackHead = /** @type {GC|Item} */ (curStructsTarget.refs[curStructsTarget.i++]);\n    } else {\n      curStructsTarget = getNextStructTarget();\n      if (curStructsTarget === null) {\n        // we are done!\n        break\n      } else {\n        stackHead = /** @type {GC|Item} */ (curStructsTarget.refs[curStructsTarget.i++]);\n      }\n    }\n  }\n  if (restStructs.clients.size > 0) {\n    const encoder = new UpdateEncoderV2();\n    writeClientsStructs(encoder, restStructs, new Map());\n    // write empty deleteset\n    // writeDeleteSet(encoder, new DeleteSet())\n    encoding.writeVarUint(encoder.restEncoder, 0); // => no need for an extra function call, just write 0 deletes\n    return { missing: missingSV, update: encoder.toUint8Array() }\n  }\n  return null\n};\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Transaction} transaction\n *\n * @private\n * @function\n */\nconst writeStructsFromTransaction = (encoder, transaction) => writeClientsStructs(encoder, transaction.doc.store, transaction.beforeState);\n\n/**\n * Read and apply a document update.\n *\n * This function has the same effect as `applyUpdate` but accepts an decoder.\n *\n * @param {decoding.Decoder} decoder\n * @param {Doc} ydoc\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n * @param {UpdateDecoderV1 | UpdateDecoderV2} [structDecoder]\n *\n * @function\n */\nconst readUpdateV2 = (decoder, ydoc, transactionOrigin, structDecoder = new UpdateDecoderV2(decoder)) =>\n  transact(ydoc, transaction => {\n    // force that transaction.local is set to non-local\n    transaction.local = false;\n    let retry = false;\n    const doc = transaction.doc;\n    const store = doc.store;\n    // let start = performance.now()\n    const ss = readClientsStructRefs(structDecoder, doc);\n    // console.log('time to read structs: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    // console.log('time to merge: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    const restStructs = integrateStructs(transaction, store, ss);\n    const pending = store.pendingStructs;\n    if (pending) {\n      // check if we can apply something\n      for (const [client, clock] of pending.missing) {\n        if (clock < getState(store, client)) {\n          retry = true;\n          break\n        }\n      }\n      if (restStructs) {\n        // merge restStructs into store.pending\n        for (const [client, clock] of restStructs.missing) {\n          const mclock = pending.missing.get(client);\n          if (mclock == null || mclock > clock) {\n            pending.missing.set(client, clock);\n          }\n        }\n        pending.update = mergeUpdatesV2([pending.update, restStructs.update]);\n      }\n    } else {\n      store.pendingStructs = restStructs;\n    }\n    // console.log('time to integrate: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    const dsRest = readAndApplyDeleteSet(structDecoder, transaction, store);\n    if (store.pendingDs) {\n      // @todo we could make a lower-bound state-vector check as we do above\n      const pendingDSUpdate = new UpdateDecoderV2(decoding.createDecoder(store.pendingDs));\n      decoding.readVarUint(pendingDSUpdate.restDecoder); // read 0 structs, because we only encode deletes in pendingdsupdate\n      const dsRest2 = readAndApplyDeleteSet(pendingDSUpdate, transaction, store);\n      if (dsRest && dsRest2) {\n        // case 1: ds1 != null && ds2 != null\n        store.pendingDs = mergeUpdatesV2([dsRest, dsRest2]);\n      } else {\n        // case 2: ds1 != null\n        // case 3: ds2 != null\n        // case 4: ds1 == null && ds2 == null\n        store.pendingDs = dsRest || dsRest2;\n      }\n    } else {\n      // Either dsRest == null && pendingDs == null OR dsRest != null\n      store.pendingDs = dsRest;\n    }\n    // console.log('time to cleanup: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n\n    // console.log('time to resume delete readers: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    if (retry) {\n      const update = /** @type {{update: Uint8Array}} */ (store.pendingStructs).update;\n      store.pendingStructs = null;\n      applyUpdateV2(transaction.doc, update);\n    }\n  }, transactionOrigin, false);\n\n/**\n * Read and apply a document update.\n *\n * This function has the same effect as `applyUpdate` but accepts an decoder.\n *\n * @param {decoding.Decoder} decoder\n * @param {Doc} ydoc\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */\nconst readUpdate = (decoder, ydoc, transactionOrigin) => readUpdateV2(decoder, ydoc, transactionOrigin, new UpdateDecoderV1(decoder));\n\n/**\n * Apply a document update created by, for example, `y.on('update', update => ..)` or `update = encodeStateAsUpdate()`.\n *\n * This function has the same effect as `readUpdate` but accepts an Uint8Array instead of a Decoder.\n *\n * @param {Doc} ydoc\n * @param {Uint8Array} update\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n *\n * @function\n */\nconst applyUpdateV2 = (ydoc, update, transactionOrigin, YDecoder = UpdateDecoderV2) => {\n  const decoder = decoding.createDecoder(update);\n  readUpdateV2(decoder, ydoc, transactionOrigin, new YDecoder(decoder));\n};\n\n/**\n * Apply a document update created by, for example, `y.on('update', update => ..)` or `update = encodeStateAsUpdate()`.\n *\n * This function has the same effect as `readUpdate` but accepts an Uint8Array instead of a Decoder.\n *\n * @param {Doc} ydoc\n * @param {Uint8Array} update\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */\nconst applyUpdate = (ydoc, update, transactionOrigin) => applyUpdateV2(ydoc, update, transactionOrigin, UpdateDecoderV1);\n\n/**\n * Write all the document as a single update message. If you specify the state of the remote client (`targetStateVector`) it will\n * only write the operations that are missing.\n *\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Doc} doc\n * @param {Map<number,number>} [targetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n *\n * @function\n */\nconst writeStateAsUpdate = (encoder, doc, targetStateVector = new Map()) => {\n  writeClientsStructs(encoder, doc.store, targetStateVector);\n  writeDeleteSet(encoder, createDeleteSetFromStructStore(doc.store));\n};\n\n/**\n * Write all the document as a single update message that can be applied on the remote document. If you specify the state of the remote client (`targetState`) it will\n * only write the operations that are missing.\n *\n * Use `writeStateAsUpdate` instead if you are working with lib0/encoding.js#Encoder\n *\n * @param {Doc} doc\n * @param {Uint8Array} [encodedTargetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n * @param {UpdateEncoderV1 | UpdateEncoderV2} [encoder]\n * @return {Uint8Array}\n *\n * @function\n */\nconst encodeStateAsUpdateV2 = (doc, encodedTargetStateVector = new Uint8Array([0]), encoder = new UpdateEncoderV2()) => {\n  const targetStateVector = decodeStateVector(encodedTargetStateVector);\n  writeStateAsUpdate(encoder, doc, targetStateVector);\n  const updates = [encoder.toUint8Array()];\n  // also add the pending updates (if there are any)\n  if (doc.store.pendingDs) {\n    updates.push(doc.store.pendingDs);\n  }\n  if (doc.store.pendingStructs) {\n    updates.push(diffUpdateV2(doc.store.pendingStructs.update, encodedTargetStateVector));\n  }\n  if (updates.length > 1) {\n    if (encoder.constructor === UpdateEncoderV1) {\n      return mergeUpdates(updates.map((update, i) => i === 0 ? update : convertUpdateFormatV2ToV1(update)))\n    } else if (encoder.constructor === UpdateEncoderV2) {\n      return mergeUpdatesV2(updates)\n    }\n  }\n  return updates[0]\n};\n\n/**\n * Write all the document as a single update message that can be applied on the remote document. If you specify the state of the remote client (`targetState`) it will\n * only write the operations that are missing.\n *\n * Use `writeStateAsUpdate` instead if you are working with lib0/encoding.js#Encoder\n *\n * @param {Doc} doc\n * @param {Uint8Array} [encodedTargetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n * @return {Uint8Array}\n *\n * @function\n */\nconst encodeStateAsUpdate = (doc, encodedTargetStateVector) => encodeStateAsUpdateV2(doc, encodedTargetStateVector, new UpdateEncoderV1());\n\n/**\n * Read state vector from Decoder and return as Map\n *\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\nconst readStateVector = decoder => {\n  const ss = new Map();\n  const ssLength = decoding.readVarUint(decoder.restDecoder);\n  for (let i = 0; i < ssLength; i++) {\n    const client = decoding.readVarUint(decoder.restDecoder);\n    const clock = decoding.readVarUint(decoder.restDecoder);\n    ss.set(client, clock);\n  }\n  return ss\n};\n\n/**\n * Read decodedState and return State as Map.\n *\n * @param {Uint8Array} decodedState\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\n// export const decodeStateVectorV2 = decodedState => readStateVector(new DSDecoderV2(decoding.createDecoder(decodedState)))\n\n/**\n * Read decodedState and return State as Map.\n *\n * @param {Uint8Array} decodedState\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\nconst decodeStateVector = decodedState => readStateVector(new DSDecoderV1(decoding.createDecoder(decodedState)));\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {Map<number,number>} sv\n * @function\n */\nconst writeStateVector = (encoder, sv) => {\n  encoding.writeVarUint(encoder.restEncoder, sv.size);\n  Array.from(sv.entries()).sort((a, b) => b[0] - a[0]).forEach(([client, clock]) => {\n    encoding.writeVarUint(encoder.restEncoder, client); // @todo use a special client decoder that is based on mapping\n    encoding.writeVarUint(encoder.restEncoder, clock);\n  });\n  return encoder\n};\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {Doc} doc\n *\n * @function\n */\nconst writeDocumentStateVector = (encoder, doc) => writeStateVector(encoder, getStateVector(doc.store));\n\n/**\n * Encode State as Uint8Array.\n *\n * @param {Doc|Map<number,number>} doc\n * @param {DSEncoderV1 | DSEncoderV2} [encoder]\n * @return {Uint8Array}\n *\n * @function\n */\nconst encodeStateVectorV2 = (doc, encoder = new DSEncoderV2()) => {\n  if (doc instanceof Map) {\n    writeStateVector(encoder, doc);\n  } else {\n    writeDocumentStateVector(encoder, doc);\n  }\n  return encoder.toUint8Array()\n};\n\n/**\n * Encode State as Uint8Array.\n *\n * @param {Doc|Map<number,number>} doc\n * @return {Uint8Array}\n *\n * @function\n */\nconst encodeStateVector = doc => encodeStateVectorV2(doc, new DSEncoderV1());\n\n/**\n * General event handler implementation.\n *\n * @template ARG0, ARG1\n *\n * @private\n */\nclass EventHandler {\n  constructor () {\n    /**\n     * @type {Array<function(ARG0, ARG1):void>}\n     */\n    this.l = [];\n  }\n}\n\n/**\n * @template ARG0,ARG1\n * @returns {EventHandler<ARG0,ARG1>}\n *\n * @private\n * @function\n */\nconst createEventHandler = () => new EventHandler();\n\n/**\n * Adds an event listener that is called when\n * {@link EventHandler#callEventListeners} is called.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler.\n *\n * @private\n * @function\n */\nconst addEventHandlerListener = (eventHandler, f) =>\n  eventHandler.l.push(f);\n\n/**\n * Removes an event listener.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler that was added with\n *                     {@link EventHandler#addEventListener}\n *\n * @private\n * @function\n */\nconst removeEventHandlerListener = (eventHandler, f) => {\n  const l = eventHandler.l;\n  const len = l.length;\n  eventHandler.l = l.filter(g => f !== g);\n  if (len === eventHandler.l.length) {\n    console.error('[yjs] Tried to remove event handler that doesn\\'t exist.');\n  }\n};\n\n/**\n * Call all event listeners that were added via\n * {@link EventHandler#addEventListener}.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {ARG0} arg0\n * @param {ARG1} arg1\n *\n * @private\n * @function\n */\nconst callEventHandlerListeners = (eventHandler, arg0, arg1) =>\n  f.callAll(eventHandler.l, [arg0, arg1]);\n\nclass ID {\n  /**\n   * @param {number} client client id\n   * @param {number} clock unique per client id, continuous number\n   */\n  constructor (client, clock) {\n    /**\n     * Client id\n     * @type {number}\n     */\n    this.client = client;\n    /**\n     * unique per client id, continuous number\n     * @type {number}\n     */\n    this.clock = clock;\n  }\n}\n\n/**\n * @param {ID | null} a\n * @param {ID | null} b\n * @return {boolean}\n *\n * @function\n */\nconst compareIDs = (a, b) => a === b || (a !== null && b !== null && a.client === b.client && a.clock === b.clock);\n\n/**\n * @param {number} client\n * @param {number} clock\n *\n * @private\n * @function\n */\nconst createID = (client, clock) => new ID(client, clock);\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {ID} id\n *\n * @private\n * @function\n */\nconst writeID = (encoder, id) => {\n  encoding.writeVarUint(encoder, id.client);\n  encoding.writeVarUint(encoder, id.clock);\n};\n\n/**\n * Read ID.\n * * If first varUint read is 0xFFFFFF a RootID is returned.\n * * Otherwise an ID is returned\n *\n * @param {decoding.Decoder} decoder\n * @return {ID}\n *\n * @private\n * @function\n */\nconst readID = decoder =>\n  createID(decoding.readVarUint(decoder), decoding.readVarUint(decoder));\n\n/**\n * The top types are mapped from y.share.get(keyname) => type.\n * `type` does not store any information about the `keyname`.\n * This function finds the correct `keyname` for `type` and throws otherwise.\n *\n * @param {AbstractType<any>} type\n * @return {string}\n *\n * @private\n * @function\n */\nconst findRootTypeKey = type => {\n  // @ts-ignore _y must be defined, otherwise unexpected case\n  for (const [key, value] of type.doc.share.entries()) {\n    if (value === type) {\n      return key\n    }\n  }\n  throw error.unexpectedCase()\n};\n\n/**\n * Check if `parent` is a parent of `child`.\n *\n * @param {AbstractType<any>} parent\n * @param {Item|null} child\n * @return {Boolean} Whether `parent` is a parent of `child`.\n *\n * @private\n * @function\n */\nconst isParentOf = (parent, child) => {\n  while (child !== null) {\n    if (child.parent === parent) {\n      return true\n    }\n    child = /** @type {AbstractType<any>} */ (child.parent)._item;\n  }\n  return false\n};\n\n/**\n * Convenient helper to log type information.\n *\n * Do not use in productive systems as the output can be immense!\n *\n * @param {AbstractType<any>} type\n */\nconst logType = type => {\n  const res = [];\n  let n = type._start;\n  while (n) {\n    res.push(n);\n    n = n.right;\n  }\n  console.log('Children: ', res);\n  console.log('Children content: ', res.filter(m => !m.deleted).map(m => m.content));\n};\n\nclass PermanentUserData {\n  /**\n   * @param {Doc} doc\n   * @param {YMap<any>} [storeType]\n   */\n  constructor (doc, storeType = doc.getMap('users')) {\n    /**\n     * @type {Map<string,DeleteSet>}\n     */\n    const dss = new Map();\n    this.yusers = storeType;\n    this.doc = doc;\n    /**\n     * Maps from clientid to userDescription\n     *\n     * @type {Map<number,string>}\n     */\n    this.clients = new Map();\n    this.dss = dss;\n    /**\n     * @param {YMap<any>} user\n     * @param {string} userDescription\n     */\n    const initUser = (user, userDescription) => {\n      /**\n       * @type {YArray<Uint8Array>}\n       */\n      const ds = user.get('ds');\n      const ids = user.get('ids');\n      const addClientId = /** @param {number} clientid */ clientid => this.clients.set(clientid, userDescription);\n      ds.observe(/** @param {YArrayEvent<any>} event */ event => {\n        event.changes.added.forEach(item => {\n          item.content.getContent().forEach(encodedDs => {\n            if (encodedDs instanceof Uint8Array) {\n              this.dss.set(userDescription, mergeDeleteSets([this.dss.get(userDescription) || createDeleteSet(), readDeleteSet(new DSDecoderV1(decoding.createDecoder(encodedDs)))]));\n            }\n          });\n        });\n      });\n      this.dss.set(userDescription, mergeDeleteSets(ds.map(encodedDs => readDeleteSet(new DSDecoderV1(decoding.createDecoder(encodedDs))))));\n      ids.observe(/** @param {YArrayEvent<any>} event */ event =>\n        event.changes.added.forEach(item => item.content.getContent().forEach(addClientId))\n      );\n      ids.forEach(addClientId);\n    };\n    // observe users\n    storeType.observe(event => {\n      event.keysChanged.forEach(userDescription =>\n        initUser(storeType.get(userDescription), userDescription)\n      );\n    });\n    // add intial data\n    storeType.forEach(initUser);\n  }\n\n  /**\n   * @param {Doc} doc\n   * @param {number} clientid\n   * @param {string} userDescription\n   * @param {Object} conf\n   * @param {function(Transaction, DeleteSet):boolean} [conf.filter]\n   */\n  setUserMapping (doc, clientid, userDescription, { filter = () => true } = {}) {\n    const users = this.yusers;\n    let user = users.get(userDescription);\n    if (!user) {\n      user = new YMap();\n      user.set('ids', new YArray());\n      user.set('ds', new YArray());\n      users.set(userDescription, user);\n    }\n    user.get('ids').push([clientid]);\n    users.observe(_event => {\n      setTimeout(() => {\n        const userOverwrite = users.get(userDescription);\n        if (userOverwrite !== user) {\n          // user was overwritten, port all data over to the next user object\n          // @todo Experiment with Y.Sets here\n          user = userOverwrite;\n          // @todo iterate over old type\n          this.clients.forEach((_userDescription, clientid) => {\n            if (userDescription === _userDescription) {\n              user.get('ids').push([clientid]);\n            }\n          });\n          const encoder = new DSEncoderV1();\n          const ds = this.dss.get(userDescription);\n          if (ds) {\n            writeDeleteSet(encoder, ds);\n            user.get('ds').push([encoder.toUint8Array()]);\n          }\n        }\n      }, 0);\n    });\n    doc.on('afterTransaction', /** @param {Transaction} transaction */ transaction => {\n      setTimeout(() => {\n        const yds = user.get('ds');\n        const ds = transaction.deleteSet;\n        if (transaction.local && ds.clients.size > 0 && filter(transaction, ds)) {\n          const encoder = new DSEncoderV1();\n          writeDeleteSet(encoder, ds);\n          yds.push([encoder.toUint8Array()]);\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {number} clientid\n   * @return {any}\n   */\n  getUserByClientId (clientid) {\n    return this.clients.get(clientid) || null\n  }\n\n  /**\n   * @param {ID} id\n   * @return {string | null}\n   */\n  getUserByDeletedId (id) {\n    for (const [userDescription, ds] of this.dss.entries()) {\n      if (isDeleted(ds, id)) {\n        return userDescription\n      }\n    }\n    return null\n  }\n}\n\n/**\n * A relative position is based on the Yjs model and is not affected by document changes.\n * E.g. If you place a relative position before a certain character, it will always point to this character.\n * If you place a relative position at the end of a type, it will always point to the end of the type.\n *\n * A numeric position is often unsuited for user selections, because it does not change when content is inserted\n * before or after.\n *\n * ```Insert(0, 'x')('a|bc') = 'xa|bc'``` Where | is the relative position.\n *\n * One of the properties must be defined.\n *\n * @example\n *   // Current cursor position is at position 10\n *   const relativePosition = createRelativePositionFromIndex(yText, 10)\n *   // modify yText\n *   yText.insert(0, 'abc')\n *   yText.delete(3, 10)\n *   // Compute the cursor position\n *   const absolutePosition = createAbsolutePositionFromRelativePosition(y, relativePosition)\n *   absolutePosition.type === yText // => true\n *   console.log('cursor location is ' + absolutePosition.index) // => cursor location is 3\n *\n */\nclass RelativePosition {\n  /**\n   * @param {ID|null} type\n   * @param {string|null} tname\n   * @param {ID|null} item\n   * @param {number} assoc\n   */\n  constructor (type, tname, item, assoc = 0) {\n    /**\n     * @type {ID|null}\n     */\n    this.type = type;\n    /**\n     * @type {string|null}\n     */\n    this.tname = tname;\n    /**\n     * @type {ID | null}\n     */\n    this.item = item;\n    /**\n     * A relative position is associated to a specific character. By default\n     * assoc >= 0, the relative position is associated to the character\n     * after the meant position.\n     * I.e. position 1 in 'ab' is associated to character 'b'.\n     *\n     * If assoc < 0, then the relative position is associated to the caharacter\n     * before the meant position.\n     *\n     * @type {number}\n     */\n    this.assoc = assoc;\n  }\n}\n\n/**\n * @param {RelativePosition} rpos\n * @return {any}\n */\nconst relativePositionToJSON = rpos => {\n  const json = {};\n  if (rpos.type) {\n    json.type = rpos.type;\n  }\n  if (rpos.tname) {\n    json.tname = rpos.tname;\n  }\n  if (rpos.item) {\n    json.item = rpos.item;\n  }\n  if (rpos.assoc != null) {\n    json.assoc = rpos.assoc;\n  }\n  return json\n};\n\n/**\n * @param {any} json\n * @return {RelativePosition}\n *\n * @function\n */\nconst createRelativePositionFromJSON = json => new RelativePosition(json.type == null ? null : createID(json.type.client, json.type.clock), json.tname || null, json.item == null ? null : createID(json.item.client, json.item.clock), json.assoc == null ? 0 : json.assoc);\n\nclass AbsolutePosition {\n  /**\n   * @param {AbstractType<any>} type\n   * @param {number} index\n   * @param {number} [assoc]\n   */\n  constructor (type, index, assoc = 0) {\n    /**\n     * @type {AbstractType<any>}\n     */\n    this.type = type;\n    /**\n     * @type {number}\n     */\n    this.index = index;\n    this.assoc = assoc;\n  }\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @param {number} [assoc]\n *\n * @function\n */\nconst createAbsolutePosition = (type, index, assoc = 0) => new AbsolutePosition(type, index, assoc);\n\n/**\n * @param {AbstractType<any>} type\n * @param {ID|null} item\n * @param {number} [assoc]\n *\n * @function\n */\nconst createRelativePosition = (type, item, assoc) => {\n  let typeid = null;\n  let tname = null;\n  if (type._item === null) {\n    tname = findRootTypeKey(type);\n  } else {\n    typeid = createID(type._item.id.client, type._item.id.clock);\n  }\n  return new RelativePosition(typeid, tname, item, assoc)\n};\n\n/**\n * Create a relativePosition based on a absolute position.\n *\n * @param {AbstractType<any>} type The base type (e.g. YText or YArray).\n * @param {number} index The absolute position.\n * @param {number} [assoc]\n * @return {RelativePosition}\n *\n * @function\n */\nconst createRelativePositionFromTypeIndex = (type, index, assoc = 0) => {\n  let t = type._start;\n  if (assoc < 0) {\n    // associated to the left character or the beginning of a type, increment index if possible.\n    if (index === 0) {\n      return createRelativePosition(type, null, assoc)\n    }\n    index--;\n  }\n  while (t !== null) {\n    if (!t.deleted && t.countable) {\n      if (t.length > index) {\n        // case 1: found position somewhere in the linked list\n        return createRelativePosition(type, createID(t.id.client, t.id.clock + index), assoc)\n      }\n      index -= t.length;\n    }\n    if (t.right === null && assoc < 0) {\n      // left-associated position, return last available id\n      return createRelativePosition(type, t.lastId, assoc)\n    }\n    t = t.right;\n  }\n  return createRelativePosition(type, null, assoc)\n};\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {RelativePosition} rpos\n *\n * @function\n */\nconst writeRelativePosition = (encoder, rpos) => {\n  const { type, tname, item, assoc } = rpos;\n  if (item !== null) {\n    encoding.writeVarUint(encoder, 0);\n    writeID(encoder, item);\n  } else if (tname !== null) {\n    // case 2: found position at the end of the list and type is stored in y.share\n    encoding.writeUint8(encoder, 1);\n    encoding.writeVarString(encoder, tname);\n  } else if (type !== null) {\n    // case 3: found position at the end of the list and type is attached to an item\n    encoding.writeUint8(encoder, 2);\n    writeID(encoder, type);\n  } else {\n    throw error.unexpectedCase()\n  }\n  encoding.writeVarInt(encoder, assoc);\n  return encoder\n};\n\n/**\n * @param {RelativePosition} rpos\n * @return {Uint8Array}\n */\nconst encodeRelativePosition = rpos => {\n  const encoder = encoding.createEncoder();\n  writeRelativePosition(encoder, rpos);\n  return encoding.toUint8Array(encoder)\n};\n\n/**\n * @param {decoding.Decoder} decoder\n * @return {RelativePosition}\n *\n * @function\n */\nconst readRelativePosition = decoder => {\n  let type = null;\n  let tname = null;\n  let itemID = null;\n  switch (decoding.readVarUint(decoder)) {\n    case 0:\n      // case 1: found position somewhere in the linked list\n      itemID = readID(decoder);\n      break\n    case 1:\n      // case 2: found position at the end of the list and type is stored in y.share\n      tname = decoding.readVarString(decoder);\n      break\n    case 2: {\n      // case 3: found position at the end of the list and type is attached to an item\n      type = readID(decoder);\n    }\n  }\n  const assoc = decoding.hasContent(decoder) ? decoding.readVarInt(decoder) : 0;\n  return new RelativePosition(type, tname, itemID, assoc)\n};\n\n/**\n * @param {Uint8Array} uint8Array\n * @return {RelativePosition}\n */\nconst decodeRelativePosition = uint8Array => readRelativePosition(decoding.createDecoder(uint8Array));\n\n/**\n * @param {RelativePosition} rpos\n * @param {Doc} doc\n * @return {AbsolutePosition|null}\n *\n * @function\n */\nconst createAbsolutePositionFromRelativePosition = (rpos, doc) => {\n  const store = doc.store;\n  const rightID = rpos.item;\n  const typeID = rpos.type;\n  const tname = rpos.tname;\n  const assoc = rpos.assoc;\n  let type = null;\n  let index = 0;\n  if (rightID !== null) {\n    if (getState(store, rightID.client) <= rightID.clock) {\n      return null\n    }\n    const res = followRedone(store, rightID);\n    const right = res.item;\n    if (!(right instanceof Item)) {\n      return null\n    }\n    type = /** @type {AbstractType<any>} */ (right.parent);\n    if (type._item === null || !type._item.deleted) {\n      index = (right.deleted || !right.countable) ? 0 : (res.diff + (assoc >= 0 ? 0 : 1)); // adjust position based on left association if necessary\n      let n = right.left;\n      while (n !== null) {\n        if (!n.deleted && n.countable) {\n          index += n.length;\n        }\n        n = n.left;\n      }\n    }\n  } else {\n    if (tname !== null) {\n      type = doc.get(tname);\n    } else if (typeID !== null) {\n      if (getState(store, typeID.client) <= typeID.clock) {\n        // type does not exist yet\n        return null\n      }\n      const { item } = followRedone(store, typeID);\n      if (item instanceof Item && item.content instanceof ContentType) {\n        type = item.content.type;\n      } else {\n        // struct is garbage collected\n        return null\n      }\n    } else {\n      throw error.unexpectedCase()\n    }\n    if (assoc >= 0) {\n      index = type._length;\n    } else {\n      index = 0;\n    }\n  }\n  return createAbsolutePosition(type, index, rpos.assoc)\n};\n\n/**\n * @param {RelativePosition|null} a\n * @param {RelativePosition|null} b\n * @return {boolean}\n *\n * @function\n */\nconst compareRelativePositions = (a, b) => a === b || (\n  a !== null && b !== null && a.tname === b.tname && compareIDs(a.item, b.item) && compareIDs(a.type, b.type) && a.assoc === b.assoc\n);\n\nclass Snapshot {\n  /**\n   * @param {DeleteSet} ds\n   * @param {Map<number,number>} sv state map\n   */\n  constructor (ds, sv) {\n    /**\n     * @type {DeleteSet}\n     */\n    this.ds = ds;\n    /**\n     * State Map\n     * @type {Map<number,number>}\n     */\n    this.sv = sv;\n  }\n}\n\n/**\n * @param {Snapshot} snap1\n * @param {Snapshot} snap2\n * @return {boolean}\n */\nconst equalSnapshots = (snap1, snap2) => {\n  const ds1 = snap1.ds.clients;\n  const ds2 = snap2.ds.clients;\n  const sv1 = snap1.sv;\n  const sv2 = snap2.sv;\n  if (sv1.size !== sv2.size || ds1.size !== ds2.size) {\n    return false\n  }\n  for (const [key, value] of sv1.entries()) {\n    if (sv2.get(key) !== value) {\n      return false\n    }\n  }\n  for (const [client, dsitems1] of ds1.entries()) {\n    const dsitems2 = ds2.get(client) || [];\n    if (dsitems1.length !== dsitems2.length) {\n      return false\n    }\n    for (let i = 0; i < dsitems1.length; i++) {\n      const dsitem1 = dsitems1[i];\n      const dsitem2 = dsitems2[i];\n      if (dsitem1.clock !== dsitem2.clock || dsitem1.len !== dsitem2.len) {\n        return false\n      }\n    }\n  }\n  return true\n};\n\n/**\n * @param {Snapshot} snapshot\n * @param {DSEncoderV1 | DSEncoderV2} [encoder]\n * @return {Uint8Array}\n */\nconst encodeSnapshotV2 = (snapshot, encoder = new DSEncoderV2()) => {\n  writeDeleteSet(encoder, snapshot.ds);\n  writeStateVector(encoder, snapshot.sv);\n  return encoder.toUint8Array()\n};\n\n/**\n * @param {Snapshot} snapshot\n * @return {Uint8Array}\n */\nconst encodeSnapshot = snapshot => encodeSnapshotV2(snapshot, new DSEncoderV1());\n\n/**\n * @param {Uint8Array} buf\n * @param {DSDecoderV1 | DSDecoderV2} [decoder]\n * @return {Snapshot}\n */\nconst decodeSnapshotV2 = (buf, decoder = new DSDecoderV2(decoding.createDecoder(buf))) => {\n  return new Snapshot(readDeleteSet(decoder), readStateVector(decoder))\n};\n\n/**\n * @param {Uint8Array} buf\n * @return {Snapshot}\n */\nconst decodeSnapshot = buf => decodeSnapshotV2(buf, new DSDecoderV1(decoding.createDecoder(buf)));\n\n/**\n * @param {DeleteSet} ds\n * @param {Map<number,number>} sm\n * @return {Snapshot}\n */\nconst createSnapshot = (ds, sm) => new Snapshot(ds, sm);\n\nconst emptySnapshot = createSnapshot(createDeleteSet(), new Map());\n\n/**\n * @param {Doc} doc\n * @return {Snapshot}\n */\nconst snapshot = doc => createSnapshot(createDeleteSetFromStructStore(doc.store), getStateVector(doc.store));\n\n/**\n * @param {Item} item\n * @param {Snapshot|undefined} snapshot\n *\n * @protected\n * @function\n */\nconst isVisible = (item, snapshot) => snapshot === undefined\n  ? !item.deleted\n  : snapshot.sv.has(item.id.client) && (snapshot.sv.get(item.id.client) || 0) > item.id.clock && !isDeleted(snapshot.ds, item.id);\n\n/**\n * @param {Transaction} transaction\n * @param {Snapshot} snapshot\n */\nconst splitSnapshotAffectedStructs = (transaction, snapshot) => {\n  const meta = map.setIfUndefined(transaction.meta, splitSnapshotAffectedStructs, set.create);\n  const store = transaction.doc.store;\n  // check if we already split for this snapshot\n  if (!meta.has(snapshot)) {\n    snapshot.sv.forEach((clock, client) => {\n      if (clock < getState(store, client)) {\n        getItemCleanStart(transaction, createID(client, clock));\n      }\n    });\n    iterateDeletedStructs(transaction, snapshot.ds, item => {});\n    meta.add(snapshot);\n  }\n};\n\n/**\n * @param {Doc} originDoc\n * @param {Snapshot} snapshot\n * @param {Doc} [newDoc] Optionally, you may define the Yjs document that receives the data from originDoc\n * @return {Doc}\n */\nconst createDocFromSnapshot = (originDoc, snapshot, newDoc = new Doc()) => {\n  if (originDoc.gc) {\n    // we should not try to restore a GC-ed document, because some of the restored items might have their content deleted\n    throw new Error('originDoc must not be garbage collected')\n  }\n  const { sv, ds } = snapshot;\n\n  const encoder = new UpdateEncoderV2();\n  originDoc.transact(transaction => {\n    let size = 0;\n    sv.forEach(clock => {\n      if (clock > 0) {\n        size++;\n      }\n    });\n    encoding.writeVarUint(encoder.restEncoder, size);\n    // splitting the structs before writing them to the encoder\n    for (const [client, clock] of sv) {\n      if (clock === 0) {\n        continue\n      }\n      if (clock < getState(originDoc.store, client)) {\n        getItemCleanStart(transaction, createID(client, clock));\n      }\n      const structs = originDoc.store.clients.get(client) || [];\n      const lastStructIndex = findIndexSS(structs, clock - 1);\n      // write # encoded structs\n      encoding.writeVarUint(encoder.restEncoder, lastStructIndex + 1);\n      encoder.writeClient(client);\n      // first clock written is 0\n      encoding.writeVarUint(encoder.restEncoder, 0);\n      for (let i = 0; i <= lastStructIndex; i++) {\n        structs[i].write(encoder, 0);\n      }\n    }\n    writeDeleteSet(encoder, ds);\n  });\n\n  applyUpdateV2(newDoc, encoder.toUint8Array(), 'snapshot');\n  return newDoc\n};\n\nclass StructStore {\n  constructor () {\n    /**\n     * @type {Map<number,Array<GC|Item>>}\n     */\n    this.clients = new Map();\n    /**\n     * @type {null | { missing: Map<number, number>, update: Uint8Array }}\n     */\n    this.pendingStructs = null;\n    /**\n     * @type {null | Uint8Array}\n     */\n    this.pendingDs = null;\n  }\n}\n\n/**\n * Return the states as a Map<client,clock>.\n * Note that clock refers to the next expected clock id.\n *\n * @param {StructStore} store\n * @return {Map<number,number>}\n *\n * @public\n * @function\n */\nconst getStateVector = store => {\n  const sm = new Map();\n  store.clients.forEach((structs, client) => {\n    const struct = structs[structs.length - 1];\n    sm.set(client, struct.id.clock + struct.length);\n  });\n  return sm\n};\n\n/**\n * @param {StructStore} store\n * @param {number} client\n * @return {number}\n *\n * @public\n * @function\n */\nconst getState = (store, client) => {\n  const structs = store.clients.get(client);\n  if (structs === undefined) {\n    return 0\n  }\n  const lastStruct = structs[structs.length - 1];\n  return lastStruct.id.clock + lastStruct.length\n};\n\n/**\n * @param {StructStore} store\n * @param {GC|Item} struct\n *\n * @private\n * @function\n */\nconst addStruct = (store, struct) => {\n  let structs = store.clients.get(struct.id.client);\n  if (structs === undefined) {\n    structs = [];\n    store.clients.set(struct.id.client, structs);\n  } else {\n    const lastStruct = structs[structs.length - 1];\n    if (lastStruct.id.clock + lastStruct.length !== struct.id.clock) {\n      throw error.unexpectedCase()\n    }\n  }\n  structs.push(struct);\n};\n\n/**\n * Perform a binary search on a sorted array\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n * @return {number}\n *\n * @private\n * @function\n */\nconst findIndexSS = (structs, clock) => {\n  let left = 0;\n  let right = structs.length - 1;\n  let mid = structs[right];\n  let midclock = mid.id.clock;\n  if (midclock === clock) {\n    return right\n  }\n  // @todo does it even make sense to pivot the search?\n  // If a good split misses, it might actually increase the time to find the correct item.\n  // Currently, the only advantage is that search with pivoting might find the item on the first try.\n  let midindex = math.floor((clock / (midclock + mid.length - 1)) * right); // pivoting the search\n  while (left <= right) {\n    mid = structs[midindex];\n    midclock = mid.id.clock;\n    if (midclock <= clock) {\n      if (clock < midclock + mid.length) {\n        return midindex\n      }\n      left = midindex + 1;\n    } else {\n      right = midindex - 1;\n    }\n    midindex = math.floor((left + right) / 2);\n  }\n  // Always check state before looking for a struct in StructStore\n  // Therefore the case of not finding a struct is unexpected\n  throw error.unexpectedCase()\n};\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {GC|Item}\n *\n * @private\n * @function\n */\nconst find = (store, id) => {\n  /**\n   * @type {Array<GC|Item>}\n   */\n  // @ts-ignore\n  const structs = store.clients.get(id.client);\n  return structs[findIndexSS(structs, id.clock)]\n};\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n * @private\n * @function\n */\nconst getItem = /** @type {function(StructStore,ID):Item} */ (find);\n\n/**\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n */\nconst findIndexCleanStart = (transaction, structs, clock) => {\n  const index = findIndexSS(structs, clock);\n  const struct = structs[index];\n  if (struct.id.clock < clock && struct instanceof Item) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock));\n    return index + 1\n  }\n  return index\n};\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\nconst getItemCleanStart = (transaction, id) => {\n  const structs = /** @type {Array<Item>} */ (transaction.doc.store.clients.get(id.client));\n  return structs[findIndexCleanStart(transaction, structs, id.clock)]\n};\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\nconst getItemCleanEnd = (transaction, store, id) => {\n  /**\n   * @type {Array<Item>}\n   */\n  // @ts-ignore\n  const structs = store.clients.get(id.client);\n  const index = findIndexSS(structs, id.clock);\n  const struct = structs[index];\n  if (id.clock !== struct.id.clock + struct.length - 1 && struct.constructor !== GC) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, id.clock - struct.id.clock + 1));\n  }\n  return struct\n};\n\n/**\n * Replace `item` with `newitem` in store\n * @param {StructStore} store\n * @param {GC|Item} struct\n * @param {GC|Item} newStruct\n *\n * @private\n * @function\n */\nconst replaceStruct = (store, struct, newStruct) => {\n  const structs = /** @type {Array<GC|Item>} */ (store.clients.get(struct.id.client));\n  structs[findIndexSS(structs, struct.id.clock)] = newStruct;\n};\n\n/**\n * Iterate over a range of structs\n *\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clockStart Inclusive start\n * @param {number} len\n * @param {function(GC|Item):void} f\n *\n * @function\n */\nconst iterateStructs = (transaction, structs, clockStart, len, f) => {\n  if (len === 0) {\n    return\n  }\n  const clockEnd = clockStart + len;\n  let index = findIndexCleanStart(transaction, structs, clockStart);\n  let struct;\n  do {\n    struct = structs[index++];\n    if (clockEnd < struct.id.clock + struct.length) {\n      findIndexCleanStart(transaction, structs, clockEnd);\n    }\n    f(struct);\n  } while (index < structs.length && structs[index].id.clock < clockEnd)\n};\n\n/**\n * A transaction is created for every change on the Yjs model. It is possible\n * to bundle changes on the Yjs model in a single transaction to\n * minimize the number on messages sent and the number of observer calls.\n * If possible the user of this library should bundle as many changes as\n * possible. Here is an example to illustrate the advantages of bundling:\n *\n * @example\n * const map = y.define('map', YMap)\n * // Log content when change is triggered\n * map.observe(() => {\n *   console.log('change triggered')\n * })\n * // Each change on the map type triggers a log message:\n * map.set('a', 0) // => \"change triggered\"\n * map.set('b', 0) // => \"change triggered\"\n * // When put in a transaction, it will trigger the log after the transaction:\n * y.transact(() => {\n *   map.set('a', 1)\n *   map.set('b', 1)\n * }) // => \"change triggered\"\n *\n * @public\n */\nclass Transaction {\n  /**\n   * @param {Doc} doc\n   * @param {any} origin\n   * @param {boolean} local\n   */\n  constructor (doc, origin, local) {\n    /**\n     * The Yjs instance.\n     * @type {Doc}\n     */\n    this.doc = doc;\n    /**\n     * Describes the set of deleted items by ids\n     * @type {DeleteSet}\n     */\n    this.deleteSet = new DeleteSet();\n    /**\n     * Holds the state before the transaction started.\n     * @type {Map<Number,Number>}\n     */\n    this.beforeState = getStateVector(doc.store);\n    /**\n     * Holds the state after the transaction.\n     * @type {Map<Number,Number>}\n     */\n    this.afterState = new Map();\n    /**\n     * All types that were directly modified (property added or child\n     * inserted/deleted). New types are not included in this Set.\n     * Maps from type to parentSubs (`item.parentSub = null` for YArray)\n     * @type {Map<AbstractType<YEvent<any>>,Set<String|null>>}\n     */\n    this.changed = new Map();\n    /**\n     * Stores the events for the types that observe also child elements.\n     * It is mainly used by `observeDeep`.\n     * @type {Map<AbstractType<YEvent<any>>,Array<YEvent<any>>>}\n     */\n    this.changedParentTypes = new Map();\n    /**\n     * @type {Array<AbstractStruct>}\n     */\n    this._mergeStructs = [];\n    /**\n     * @type {any}\n     */\n    this.origin = origin;\n    /**\n     * Stores meta information on the transaction\n     * @type {Map<any,any>}\n     */\n    this.meta = new Map();\n    /**\n     * Whether this change originates from this doc.\n     * @type {boolean}\n     */\n    this.local = local;\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsAdded = new Set();\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsRemoved = new Set();\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsLoaded = new Set();\n  }\n}\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Transaction} transaction\n * @return {boolean} Whether data was written.\n */\nconst writeUpdateMessageFromTransaction = (encoder, transaction) => {\n  if (transaction.deleteSet.clients.size === 0 && !map.any(transaction.afterState, (clock, client) => transaction.beforeState.get(client) !== clock)) {\n    return false\n  }\n  sortAndMergeDeleteSet(transaction.deleteSet);\n  writeStructsFromTransaction(encoder, transaction);\n  writeDeleteSet(encoder, transaction.deleteSet);\n  return true\n};\n\n/**\n * If `type.parent` was added in current transaction, `type` technically\n * did not change, it was just added and we should not fire events for `type`.\n *\n * @param {Transaction} transaction\n * @param {AbstractType<YEvent<any>>} type\n * @param {string|null} parentSub\n */\nconst addChangedTypeToTransaction = (transaction, type, parentSub) => {\n  const item = type._item;\n  if (item === null || (item.id.clock < (transaction.beforeState.get(item.id.client) || 0) && !item.deleted)) {\n    map.setIfUndefined(transaction.changed, type, set.create).add(parentSub);\n  }\n};\n\n/**\n * @param {Array<AbstractStruct>} structs\n * @param {number} pos\n */\nconst tryToMergeWithLeft = (structs, pos) => {\n  const left = structs[pos - 1];\n  const right = structs[pos];\n  if (left.deleted === right.deleted && left.constructor === right.constructor) {\n    if (left.mergeWith(right)) {\n      structs.splice(pos, 1);\n      if (right instanceof Item && right.parentSub !== null && /** @type {AbstractType<any>} */ (right.parent)._map.get(right.parentSub) === right) {\n        /** @type {AbstractType<any>} */ (right.parent)._map.set(right.parentSub, /** @type {Item} */ (left));\n      }\n    }\n  }\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\nconst tryGcDeleteSet = (ds, store, gcFilter) => {\n  for (const [client, deleteItems] of ds.clients.entries()) {\n    const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client));\n    for (let di = deleteItems.length - 1; di >= 0; di--) {\n      const deleteItem = deleteItems[di];\n      const endDeleteItemClock = deleteItem.clock + deleteItem.len;\n      for (\n        let si = findIndexSS(structs, deleteItem.clock), struct = structs[si];\n        si < structs.length && struct.id.clock < endDeleteItemClock;\n        struct = structs[++si]\n      ) {\n        const struct = structs[si];\n        if (deleteItem.clock + deleteItem.len <= struct.id.clock) {\n          break\n        }\n        if (struct instanceof Item && struct.deleted && !struct.keep && gcFilter(struct)) {\n          struct.gc(store, false);\n        }\n      }\n    }\n  }\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n */\nconst tryMergeDeleteSet = (ds, store) => {\n  // try to merge deleted / gc'd items\n  // merge from right to left for better efficiecy and so we don't miss any merge targets\n  ds.clients.forEach((deleteItems, client) => {\n    const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client));\n    for (let di = deleteItems.length - 1; di >= 0; di--) {\n      const deleteItem = deleteItems[di];\n      // start with merging the item next to the last deleted item\n      const mostRightIndexToCheck = math.min(structs.length - 1, 1 + findIndexSS(structs, deleteItem.clock + deleteItem.len - 1));\n      for (\n        let si = mostRightIndexToCheck, struct = structs[si];\n        si > 0 && struct.id.clock >= deleteItem.clock;\n        struct = structs[--si]\n      ) {\n        tryToMergeWithLeft(structs, si);\n      }\n    }\n  });\n};\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\nconst tryGc = (ds, store, gcFilter) => {\n  tryGcDeleteSet(ds, store, gcFilter);\n  tryMergeDeleteSet(ds, store);\n};\n\n/**\n * @param {Array<Transaction>} transactionCleanups\n * @param {number} i\n */\nconst cleanupTransactions = (transactionCleanups, i) => {\n  if (i < transactionCleanups.length) {\n    const transaction = transactionCleanups[i];\n    const doc = transaction.doc;\n    const store = doc.store;\n    const ds = transaction.deleteSet;\n    const mergeStructs = transaction._mergeStructs;\n    try {\n      sortAndMergeDeleteSet(ds);\n      transaction.afterState = getStateVector(transaction.doc.store);\n      doc.emit('beforeObserverCalls', [transaction, doc]);\n      /**\n       * An array of event callbacks.\n       *\n       * Each callback is called even if the other ones throw errors.\n       *\n       * @type {Array<function():void>}\n       */\n      const fs = [];\n      // observe events on changed types\n      transaction.changed.forEach((subs, itemtype) =>\n        fs.push(() => {\n          if (itemtype._item === null || !itemtype._item.deleted) {\n            itemtype._callObserver(transaction, subs);\n          }\n        })\n      );\n      fs.push(() => {\n        // deep observe events\n        transaction.changedParentTypes.forEach((events, type) =>\n          fs.push(() => {\n            // We need to think about the possibility that the user transforms the\n            // Y.Doc in the event.\n            if (type._item === null || !type._item.deleted) {\n              events = events\n                .filter(event =>\n                  event.target._item === null || !event.target._item.deleted\n                );\n              events\n                .forEach(event => {\n                  event.currentTarget = type;\n                });\n              // sort events by path length so that top-level events are fired first.\n              events\n                .sort((event1, event2) => event1.path.length - event2.path.length);\n              // We don't need to check for events.length\n              // because we know it has at least one element\n              callEventHandlerListeners(type._dEH, events, transaction);\n            }\n          })\n        );\n        fs.push(() => doc.emit('afterTransaction', [transaction, doc]));\n      });\n      callAll(fs, []);\n    } finally {\n      // Replace deleted items with ItemDeleted / GC.\n      // This is where content is actually remove from the Yjs Doc.\n      if (doc.gc) {\n        tryGcDeleteSet(ds, store, doc.gcFilter);\n      }\n      tryMergeDeleteSet(ds, store);\n\n      // on all affected store.clients props, try to merge\n      transaction.afterState.forEach((clock, client) => {\n        const beforeClock = transaction.beforeState.get(client) || 0;\n        if (beforeClock !== clock) {\n          const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client));\n          // we iterate from right to left so we can safely remove entries\n          const firstChangePos = math.max(findIndexSS(structs, beforeClock), 1);\n          for (let i = structs.length - 1; i >= firstChangePos; i--) {\n            tryToMergeWithLeft(structs, i);\n          }\n        }\n      });\n      // try to merge mergeStructs\n      // @todo: it makes more sense to transform mergeStructs to a DS, sort it, and merge from right to left\n      //        but at the moment DS does not handle duplicates\n      for (let i = 0; i < mergeStructs.length; i++) {\n        const { client, clock } = mergeStructs[i].id;\n        const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client));\n        const replacedStructPos = findIndexSS(structs, clock);\n        if (replacedStructPos + 1 < structs.length) {\n          tryToMergeWithLeft(structs, replacedStructPos + 1);\n        }\n        if (replacedStructPos > 0) {\n          tryToMergeWithLeft(structs, replacedStructPos);\n        }\n      }\n      if (!transaction.local && transaction.afterState.get(doc.clientID) !== transaction.beforeState.get(doc.clientID)) {\n        logging.print(logging.ORANGE, logging.BOLD, '[yjs] ', logging.UNBOLD, logging.RED, 'Changed the client-id because another client seems to be using it.');\n        doc.clientID = generateNewClientId();\n      }\n      // @todo Merge all the transactions into one and provide send the data as a single update message\n      doc.emit('afterTransactionCleanup', [transaction, doc]);\n      if (doc._observers.has('update')) {\n        const encoder = new UpdateEncoderV1();\n        const hasContent = writeUpdateMessageFromTransaction(encoder, transaction);\n        if (hasContent) {\n          doc.emit('update', [encoder.toUint8Array(), transaction.origin, doc, transaction]);\n        }\n      }\n      if (doc._observers.has('updateV2')) {\n        const encoder = new UpdateEncoderV2();\n        const hasContent = writeUpdateMessageFromTransaction(encoder, transaction);\n        if (hasContent) {\n          doc.emit('updateV2', [encoder.toUint8Array(), transaction.origin, doc, transaction]);\n        }\n      }\n      const { subdocsAdded, subdocsLoaded, subdocsRemoved } = transaction;\n      if (subdocsAdded.size > 0 || subdocsRemoved.size > 0 || subdocsLoaded.size > 0) {\n        subdocsAdded.forEach(subdoc => {\n          subdoc.clientID = doc.clientID;\n          if (subdoc.collectionid == null) {\n            subdoc.collectionid = doc.collectionid;\n          }\n          doc.subdocs.add(subdoc);\n        });\n        subdocsRemoved.forEach(subdoc => doc.subdocs.delete(subdoc));\n        doc.emit('subdocs', [{ loaded: subdocsLoaded, added: subdocsAdded, removed: subdocsRemoved }, doc, transaction]);\n        subdocsRemoved.forEach(subdoc => subdoc.destroy());\n      }\n\n      if (transactionCleanups.length <= i + 1) {\n        doc._transactionCleanups = [];\n        doc.emit('afterAllTransactions', [doc, transactionCleanups]);\n      } else {\n        cleanupTransactions(transactionCleanups, i + 1);\n      }\n    }\n  }\n};\n\n/**\n * Implements the functionality of `y.transact(()=>{..})`\n *\n * @param {Doc} doc\n * @param {function(Transaction):void} f\n * @param {any} [origin=true]\n *\n * @function\n */\nconst transact = (doc, f, origin = null, local = true) => {\n  const transactionCleanups = doc._transactionCleanups;\n  let initialCall = false;\n  if (doc._transaction === null) {\n    initialCall = true;\n    doc._transaction = new Transaction(doc, origin, local);\n    transactionCleanups.push(doc._transaction);\n    if (transactionCleanups.length === 1) {\n      doc.emit('beforeAllTransactions', [doc]);\n    }\n    doc.emit('beforeTransaction', [doc._transaction, doc]);\n  }\n  try {\n    f(doc._transaction);\n  } finally {\n    if (initialCall) {\n      const finishCleanup = doc._transaction === transactionCleanups[0];\n      doc._transaction = null;\n      if (finishCleanup) {\n        // The first transaction ended, now process observer calls.\n        // Observer call may create new transactions for which we need to call the observers and do cleanup.\n        // We don't want to nest these calls, so we execute these calls one after\n        // another.\n        // Also we need to ensure that all cleanups are called, even if the\n        // observes throw errors.\n        // This file is full of hacky try {} finally {} blocks to ensure that an\n        // event can throw errors and also that the cleanup is called.\n        cleanupTransactions(transactionCleanups, 0);\n      }\n    }\n  }\n};\n\nclass StackItem {\n  /**\n   * @param {DeleteSet} deletions\n   * @param {DeleteSet} insertions\n   */\n  constructor (deletions, insertions) {\n    this.insertions = insertions;\n    this.deletions = deletions;\n    /**\n     * Use this to save and restore metadata like selection range\n     */\n    this.meta = new Map();\n  }\n}\n/**\n * @param {Transaction} tr\n * @param {UndoManager} um\n * @param {StackItem} stackItem\n */\nconst clearUndoManagerStackItem = (tr, um, stackItem) => {\n  iterateDeletedStructs(tr, stackItem.deletions, item => {\n    if (item instanceof Item && um.scope.some(type => isParentOf(type, item))) {\n      keepItem(item, false);\n    }\n  });\n};\n\n/**\n * @param {UndoManager} undoManager\n * @param {Array<StackItem>} stack\n * @param {string} eventType\n * @return {StackItem?}\n */\nconst popStackItem = (undoManager, stack, eventType) => {\n  /**\n   * Whether a change happened\n   * @type {StackItem?}\n   */\n  let result = null;\n  /**\n   * Keep a reference to the transaction so we can fire the event with the changedParentTypes\n   * @type {any}\n   */\n  let _tr = null;\n  const doc = undoManager.doc;\n  const scope = undoManager.scope;\n  transact(doc, transaction => {\n    while (stack.length > 0 && result === null) {\n      const store = doc.store;\n      const stackItem = /** @type {StackItem} */ (stack.pop());\n      /**\n       * @type {Set<Item>}\n       */\n      const itemsToRedo = new Set();\n      /**\n       * @type {Array<Item>}\n       */\n      const itemsToDelete = [];\n      let performedChange = false;\n      iterateDeletedStructs(transaction, stackItem.insertions, struct => {\n        if (struct instanceof Item) {\n          if (struct.redone !== null) {\n            let { item, diff } = followRedone(store, struct.id);\n            if (diff > 0) {\n              item = getItemCleanStart(transaction, createID(item.id.client, item.id.clock + diff));\n            }\n            struct = item;\n          }\n          if (!struct.deleted && scope.some(type => isParentOf(type, /** @type {Item} */ (struct)))) {\n            itemsToDelete.push(struct);\n          }\n        }\n      });\n      iterateDeletedStructs(transaction, stackItem.deletions, struct => {\n        if (\n          struct instanceof Item &&\n          scope.some(type => isParentOf(type, struct)) &&\n          // Never redo structs in stackItem.insertions because they were created and deleted in the same capture interval.\n          !isDeleted(stackItem.insertions, struct.id)\n        ) {\n          itemsToRedo.add(struct);\n        }\n      });\n      itemsToRedo.forEach(struct => {\n        performedChange = redoItem(transaction, struct, itemsToRedo, stackItem.insertions, undoManager.ignoreRemoteMapChanges) !== null || performedChange;\n      });\n      // We want to delete in reverse order so that children are deleted before\n      // parents, so we have more information available when items are filtered.\n      for (let i = itemsToDelete.length - 1; i >= 0; i--) {\n        const item = itemsToDelete[i];\n        if (undoManager.deleteFilter(item)) {\n          item.delete(transaction);\n          performedChange = true;\n        }\n      }\n      result = performedChange ? stackItem : null;\n    }\n    transaction.changed.forEach((subProps, type) => {\n      // destroy search marker if necessary\n      if (subProps.has(null) && type._searchMarker) {\n        type._searchMarker.length = 0;\n      }\n    });\n    _tr = transaction;\n  }, undoManager);\n  if (result != null) {\n    const changedParentTypes = _tr.changedParentTypes;\n    undoManager.emit('stack-item-popped', [{ stackItem: result, type: eventType, changedParentTypes }, undoManager]);\n  }\n  return result\n};\n\n/**\n * @typedef {Object} UndoManagerOptions\n * @property {number} [UndoManagerOptions.captureTimeout=500]\n * @property {function(Transaction):boolean} [UndoManagerOptions.captureTransaction] Do not capture changes of a Transaction if result false.\n * @property {function(Item):boolean} [UndoManagerOptions.deleteFilter=()=>true] Sometimes\n * it is necessary to filter what an Undo/Redo operation can delete. If this\n * filter returns false, the type/item won't be deleted even it is in the\n * undo/redo scope.\n * @property {Set<any>} [UndoManagerOptions.trackedOrigins=new Set([null])]\n * @property {boolean} [ignoreRemoteMapChanges] Experimental. By default, the UndoManager will never overwrite remote changes. Enable this property to enable overwriting remote changes on key-value changes (Y.Map, properties on Y.Xml, etc..).\n * @property {Doc} [doc] The document that this UndoManager operates on. Only needed if typeScope is empty.\n */\n\n/**\n * Fires 'stack-item-added' event when a stack item was added to either the undo- or\n * the redo-stack. You may store additional stack information via the\n * metadata property on `event.stackItem.meta` (it is a `Map` of metadata properties).\n * Fires 'stack-item-popped' event when a stack item was popped from either the\n * undo- or the redo-stack. You may restore the saved stack information from `event.stackItem.meta`.\n *\n * @extends {Observable<'stack-item-added'|'stack-item-popped'|'stack-cleared'|'stack-item-updated'>}\n */\nclass UndoManager extends Observable {\n  /**\n   * @param {AbstractType<any>|Array<AbstractType<any>>} typeScope Accepts either a single type, or an array of types\n   * @param {UndoManagerOptions} options\n   */\n  constructor (typeScope, {\n    captureTimeout = 500,\n    captureTransaction = tr => true,\n    deleteFilter = () => true,\n    trackedOrigins = new Set([null]),\n    ignoreRemoteMapChanges = false,\n    doc = /** @type {Doc} */ (array.isArray(typeScope) ? typeScope[0].doc : typeScope.doc)\n  } = {}) {\n    super();\n    /**\n     * @type {Array<AbstractType<any>>}\n     */\n    this.scope = [];\n    this.addToScope(typeScope);\n    this.deleteFilter = deleteFilter;\n    trackedOrigins.add(this);\n    this.trackedOrigins = trackedOrigins;\n    this.captureTransaction = captureTransaction;\n    /**\n     * @type {Array<StackItem>}\n     */\n    this.undoStack = [];\n    /**\n     * @type {Array<StackItem>}\n     */\n    this.redoStack = [];\n    /**\n     * Whether the client is currently undoing (calling UndoManager.undo)\n     *\n     * @type {boolean}\n     */\n    this.undoing = false;\n    this.redoing = false;\n    this.doc = doc;\n    this.lastChange = 0;\n    this.ignoreRemoteMapChanges = ignoreRemoteMapChanges;\n    this.captureTimeout = captureTimeout;\n    /**\n     * @param {Transaction} transaction\n     */\n    this.afterTransactionHandler = transaction => {\n      // Only track certain transactions\n      if (\n        !this.captureTransaction(transaction) ||\n        !this.scope.some(type => transaction.changedParentTypes.has(type)) ||\n        (!this.trackedOrigins.has(transaction.origin) && (!transaction.origin || !this.trackedOrigins.has(transaction.origin.constructor)))\n      ) {\n        return\n      }\n      const undoing = this.undoing;\n      const redoing = this.redoing;\n      const stack = undoing ? this.redoStack : this.undoStack;\n      if (undoing) {\n        this.stopCapturing(); // next undo should not be appended to last stack item\n      } else if (!redoing) {\n        // neither undoing nor redoing: delete redoStack\n        this.clear(false, true);\n      }\n      const insertions = new DeleteSet();\n      transaction.afterState.forEach((endClock, client) => {\n        const startClock = transaction.beforeState.get(client) || 0;\n        const len = endClock - startClock;\n        if (len > 0) {\n          addToDeleteSet(insertions, client, startClock, len);\n        }\n      });\n      const now = time.getUnixTime();\n      let didAdd = false;\n      if (this.lastChange > 0 && now - this.lastChange < this.captureTimeout && stack.length > 0 && !undoing && !redoing) {\n        // append change to last stack op\n        const lastOp = stack[stack.length - 1];\n        lastOp.deletions = mergeDeleteSets([lastOp.deletions, transaction.deleteSet]);\n        lastOp.insertions = mergeDeleteSets([lastOp.insertions, insertions]);\n      } else {\n        // create a new stack op\n        stack.push(new StackItem(transaction.deleteSet, insertions));\n        didAdd = true;\n      }\n      if (!undoing && !redoing) {\n        this.lastChange = now;\n      }\n      // make sure that deleted structs are not gc'd\n      iterateDeletedStructs(transaction, transaction.deleteSet, /** @param {Item|GC} item */ item => {\n        if (item instanceof Item && this.scope.some(type => isParentOf(type, item))) {\n          keepItem(item, true);\n        }\n      });\n      const changeEvent = [{ stackItem: stack[stack.length - 1], origin: transaction.origin, type: undoing ? 'redo' : 'undo', changedParentTypes: transaction.changedParentTypes }, this];\n      if (didAdd) {\n        this.emit('stack-item-added', changeEvent);\n      } else {\n        this.emit('stack-item-updated', changeEvent);\n      }\n    };\n    this.doc.on('afterTransaction', this.afterTransactionHandler);\n    this.doc.on('destroy', () => {\n      this.destroy();\n    });\n  }\n\n  /**\n   * @param {Array<AbstractType<any>> | AbstractType<any>} ytypes\n   */\n  addToScope (ytypes) {\n    ytypes = array.isArray(ytypes) ? ytypes : [ytypes];\n    ytypes.forEach(ytype => {\n      if (this.scope.every(yt => yt !== ytype)) {\n        this.scope.push(ytype);\n      }\n    });\n  }\n\n  /**\n   * @param {any} origin\n   */\n  addTrackedOrigin (origin) {\n    this.trackedOrigins.add(origin);\n  }\n\n  /**\n   * @param {any} origin\n   */\n  removeTrackedOrigin (origin) {\n    this.trackedOrigins.delete(origin);\n  }\n\n  clear (clearUndoStack = true, clearRedoStack = true) {\n    if ((clearUndoStack && this.canUndo()) || (clearRedoStack && this.canRedo())) {\n      this.doc.transact(tr => {\n        if (clearUndoStack) {\n          this.undoStack.forEach(item => clearUndoManagerStackItem(tr, this, item));\n          this.undoStack = [];\n        }\n        if (clearRedoStack) {\n          this.redoStack.forEach(item => clearUndoManagerStackItem(tr, this, item));\n          this.redoStack = [];\n        }\n        this.emit('stack-cleared', [{ undoStackCleared: clearUndoStack, redoStackCleared: clearRedoStack }]);\n      });\n    }\n  }\n\n  /**\n   * UndoManager merges Undo-StackItem if they are created within time-gap\n   * smaller than `options.captureTimeout`. Call `um.stopCapturing()` so that the next\n   * StackItem won't be merged.\n   *\n   *\n   * @example\n   *     // without stopCapturing\n   *     ytext.insert(0, 'a')\n   *     ytext.insert(1, 'b')\n   *     um.undo()\n   *     ytext.toString() // => '' (note that 'ab' was removed)\n   *     // with stopCapturing\n   *     ytext.insert(0, 'a')\n   *     um.stopCapturing()\n   *     ytext.insert(0, 'b')\n   *     um.undo()\n   *     ytext.toString() // => 'a' (note that only 'b' was removed)\n   *\n   */\n  stopCapturing () {\n    this.lastChange = 0;\n  }\n\n  /**\n   * Undo last changes on type.\n   *\n   * @return {StackItem?} Returns StackItem if a change was applied\n   */\n  undo () {\n    this.undoing = true;\n    let res;\n    try {\n      res = popStackItem(this, this.undoStack, 'undo');\n    } finally {\n      this.undoing = false;\n    }\n    return res\n  }\n\n  /**\n   * Redo last undo operation.\n   *\n   * @return {StackItem?} Returns StackItem if a change was applied\n   */\n  redo () {\n    this.redoing = true;\n    let res;\n    try {\n      res = popStackItem(this, this.redoStack, 'redo');\n    } finally {\n      this.redoing = false;\n    }\n    return res\n  }\n\n  /**\n   * Are undo steps available?\n   *\n   * @return {boolean} `true` if undo is possible\n   */\n  canUndo () {\n    return this.undoStack.length > 0\n  }\n\n  /**\n   * Are redo steps available?\n   *\n   * @return {boolean} `true` if redo is possible\n   */\n  canRedo () {\n    return this.redoStack.length > 0\n  }\n\n  destroy () {\n    this.trackedOrigins.delete(this);\n    this.doc.off('afterTransaction', this.afterTransactionHandler);\n    super.destroy();\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n */\nfunction * lazyStructReaderGenerator (decoder) {\n  const numOfStateUpdates = decoding.readVarUint(decoder.restDecoder);\n  for (let i = 0; i < numOfStateUpdates; i++) {\n    const numberOfStructs = decoding.readVarUint(decoder.restDecoder);\n    const client = decoder.readClient();\n    let clock = decoding.readVarUint(decoder.restDecoder);\n    for (let i = 0; i < numberOfStructs; i++) {\n      const info = decoder.readInfo();\n      // @todo use switch instead of ifs\n      if (info === 10) {\n        const len = decoding.readVarUint(decoder.restDecoder);\n        yield new Skip(createID(client, clock), len);\n        clock += len;\n      } else if ((binary.BITS5 & info) !== 0) {\n        const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0;\n        // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n        // and we read the next string as parentYKey.\n        // It indicates how we store/retrieve parent from `y.share`\n        // @type {string|null}\n        const struct = new Item(\n          createID(client, clock),\n          null, // left\n          (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null, // origin\n          null, // right\n          (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null, // right origin\n          // @ts-ignore Force writing a string here.\n          cantCopyParentInfo ? (decoder.readParentInfo() ? decoder.readString() : decoder.readLeftID()) : null, // parent\n          cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n          readItemContent(decoder, info) // item content\n        );\n        yield struct;\n        clock += struct.length;\n      } else {\n        const len = decoder.readLen();\n        yield new GC(createID(client, clock), len);\n        clock += len;\n      }\n    }\n  }\n}\n\nclass LazyStructReader {\n  /**\n   * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n   * @param {boolean} filterSkips\n   */\n  constructor (decoder, filterSkips) {\n    this.gen = lazyStructReaderGenerator(decoder);\n    /**\n     * @type {null | Item | Skip | GC}\n     */\n    this.curr = null;\n    this.done = false;\n    this.filterSkips = filterSkips;\n    this.next();\n  }\n\n  /**\n   * @return {Item | GC | Skip |null}\n   */\n  next () {\n    // ignore \"Skip\" structs\n    do {\n      this.curr = this.gen.next().value || null;\n    } while (this.filterSkips && this.curr !== null && this.curr.constructor === Skip)\n    return this.curr\n  }\n}\n\n/**\n * @param {Uint8Array} update\n *\n */\nconst logUpdate = update => logUpdateV2(update, UpdateDecoderV1);\n\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} [YDecoder]\n *\n */\nconst logUpdateV2 = (update, YDecoder = UpdateDecoderV2) => {\n  const structs = [];\n  const updateDecoder = new YDecoder(decoding.createDecoder(update));\n  const lazyDecoder = new LazyStructReader(updateDecoder, false);\n  for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {\n    structs.push(curr);\n  }\n  logging.print('Structs: ', structs);\n  const ds = readDeleteSet(updateDecoder);\n  logging.print('DeleteSet: ', ds);\n};\n\n/**\n * @param {Uint8Array} update\n *\n */\nconst decodeUpdate = (update) => decodeUpdateV2(update, UpdateDecoderV1);\n\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} [YDecoder]\n *\n */\nconst decodeUpdateV2 = (update, YDecoder = UpdateDecoderV2) => {\n  const structs = [];\n  const updateDecoder = new YDecoder(decoding.createDecoder(update));\n  const lazyDecoder = new LazyStructReader(updateDecoder, false);\n  for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {\n    structs.push(curr);\n  }\n  return {\n    structs,\n    ds: readDeleteSet(updateDecoder)\n  }\n};\n\nclass LazyStructWriter {\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  constructor (encoder) {\n    this.currClient = 0;\n    this.startClock = 0;\n    this.written = 0;\n    this.encoder = encoder;\n    /**\n     * We want to write operations lazily, but also we need to know beforehand how many operations we want to write for each client.\n     *\n     * This kind of meta-information (#clients, #structs-per-client-written) is written to the restEncoder.\n     *\n     * We fragment the restEncoder and store a slice of it per-client until we know how many clients there are.\n     * When we flush (toUint8Array) we write the restEncoder using the fragments and the meta-information.\n     *\n     * @type {Array<{ written: number, restEncoder: Uint8Array }>}\n     */\n    this.clientStructs = [];\n  }\n}\n\n/**\n * @param {Array<Uint8Array>} updates\n * @return {Uint8Array}\n */\nconst mergeUpdates = updates => mergeUpdatesV2(updates, UpdateDecoderV1, UpdateEncoderV1);\n\n/**\n * @param {Uint8Array} update\n * @param {typeof DSEncoderV1 | typeof DSEncoderV2} YEncoder\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} YDecoder\n * @return {Uint8Array}\n */\nconst encodeStateVectorFromUpdateV2 = (update, YEncoder = DSEncoderV2, YDecoder = UpdateDecoderV2) => {\n  const encoder = new YEncoder();\n  const updateDecoder = new LazyStructReader(new YDecoder(decoding.createDecoder(update)), false);\n  let curr = updateDecoder.curr;\n  if (curr !== null) {\n    let size = 0;\n    let currClient = curr.id.client;\n    let stopCounting = curr.id.clock !== 0; // must start at 0\n    let currClock = stopCounting ? 0 : curr.id.clock + curr.length;\n    for (; curr !== null; curr = updateDecoder.next()) {\n      if (currClient !== curr.id.client) {\n        if (currClock !== 0) {\n          size++;\n          // We found a new client\n          // write what we have to the encoder\n          encoding.writeVarUint(encoder.restEncoder, currClient);\n          encoding.writeVarUint(encoder.restEncoder, currClock);\n        }\n        currClient = curr.id.client;\n        currClock = 0;\n        stopCounting = curr.id.clock !== 0;\n      }\n      // we ignore skips\n      if (curr.constructor === Skip) {\n        stopCounting = true;\n      }\n      if (!stopCounting) {\n        currClock = curr.id.clock + curr.length;\n      }\n    }\n    // write what we have\n    if (currClock !== 0) {\n      size++;\n      encoding.writeVarUint(encoder.restEncoder, currClient);\n      encoding.writeVarUint(encoder.restEncoder, currClock);\n    }\n    // prepend the size of the state vector\n    const enc = encoding.createEncoder();\n    encoding.writeVarUint(enc, size);\n    encoding.writeBinaryEncoder(enc, encoder.restEncoder);\n    encoder.restEncoder = enc;\n    return encoder.toUint8Array()\n  } else {\n    encoding.writeVarUint(encoder.restEncoder, 0);\n    return encoder.toUint8Array()\n  }\n};\n\n/**\n * @param {Uint8Array} update\n * @return {Uint8Array}\n */\nconst encodeStateVectorFromUpdate = update => encodeStateVectorFromUpdateV2(update, DSEncoderV1, UpdateDecoderV1);\n\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} YDecoder\n * @return {{ from: Map<number,number>, to: Map<number,number> }}\n */\nconst parseUpdateMetaV2 = (update, YDecoder = UpdateDecoderV2) => {\n  /**\n   * @type {Map<number, number>}\n   */\n  const from = new Map();\n  /**\n   * @type {Map<number, number>}\n   */\n  const to = new Map();\n  const updateDecoder = new LazyStructReader(new YDecoder(decoding.createDecoder(update)), false);\n  let curr = updateDecoder.curr;\n  if (curr !== null) {\n    let currClient = curr.id.client;\n    let currClock = curr.id.clock;\n    // write the beginning to `from`\n    from.set(currClient, currClock);\n    for (; curr !== null; curr = updateDecoder.next()) {\n      if (currClient !== curr.id.client) {\n        // We found a new client\n        // write the end to `to`\n        to.set(currClient, currClock);\n        // write the beginning to `from`\n        from.set(curr.id.client, curr.id.clock);\n        // update currClient\n        currClient = curr.id.client;\n      }\n      currClock = curr.id.clock + curr.length;\n    }\n    // write the end to `to`\n    to.set(currClient, currClock);\n  }\n  return { from, to }\n};\n\n/**\n * @param {Uint8Array} update\n * @return {{ from: Map<number,number>, to: Map<number,number> }}\n */\nconst parseUpdateMeta = update => parseUpdateMetaV2(update, UpdateDecoderV1);\n\n/**\n * This method is intended to slice any kind of struct and retrieve the right part.\n * It does not handle side-effects, so it should only be used by the lazy-encoder.\n *\n * @param {Item | GC | Skip} left\n * @param {number} diff\n * @return {Item | GC}\n */\nconst sliceStruct = (left, diff) => {\n  if (left.constructor === GC) {\n    const { client, clock } = left.id;\n    return new GC(createID(client, clock + diff), left.length - diff)\n  } else if (left.constructor === Skip) {\n    const { client, clock } = left.id;\n    return new Skip(createID(client, clock + diff), left.length - diff)\n  } else {\n    const leftItem = /** @type {Item} */ (left);\n    const { client, clock } = leftItem.id;\n    return new Item(\n      createID(client, clock + diff),\n      null,\n      createID(client, clock + diff - 1),\n      null,\n      leftItem.rightOrigin,\n      leftItem.parent,\n      leftItem.parentSub,\n      leftItem.content.splice(diff)\n    )\n  }\n};\n\n/**\n *\n * This function works similarly to `readUpdateV2`.\n *\n * @param {Array<Uint8Array>} updates\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n * @param {typeof UpdateEncoderV1 | typeof UpdateEncoderV2} [YEncoder]\n * @return {Uint8Array}\n */\nconst mergeUpdatesV2 = (updates, YDecoder = UpdateDecoderV2, YEncoder = UpdateEncoderV2) => {\n  if (updates.length === 1) {\n    return updates[0]\n  }\n  const updateDecoders = updates.map(update => new YDecoder(decoding.createDecoder(update)));\n  let lazyStructDecoders = updateDecoders.map(decoder => new LazyStructReader(decoder, true));\n\n  /**\n   * @todo we don't need offset because we always slice before\n   * @type {null | { struct: Item | GC | Skip, offset: number }}\n   */\n  let currWrite = null;\n\n  const updateEncoder = new YEncoder();\n  // write structs lazily\n  const lazyStructEncoder = new LazyStructWriter(updateEncoder);\n\n  // Note: We need to ensure that all lazyStructDecoders are fully consumed\n  // Note: Should merge document updates whenever possible - even from different updates\n  // Note: Should handle that some operations cannot be applied yet ()\n\n  while (true) {\n    // Write higher clients first ⇒ sort by clientID & clock and remove decoders without content\n    lazyStructDecoders = lazyStructDecoders.filter(dec => dec.curr !== null);\n    lazyStructDecoders.sort(\n      /** @type {function(any,any):number} */ (dec1, dec2) => {\n        if (dec1.curr.id.client === dec2.curr.id.client) {\n          const clockDiff = dec1.curr.id.clock - dec2.curr.id.clock;\n          if (clockDiff === 0) {\n            // @todo remove references to skip since the structDecoders must filter Skips.\n            return dec1.curr.constructor === dec2.curr.constructor\n              ? 0\n              : dec1.curr.constructor === Skip ? 1 : -1 // we are filtering skips anyway.\n          } else {\n            return clockDiff\n          }\n        } else {\n          return dec2.curr.id.client - dec1.curr.id.client\n        }\n      }\n    );\n    if (lazyStructDecoders.length === 0) {\n      break\n    }\n    const currDecoder = lazyStructDecoders[0];\n    // write from currDecoder until the next operation is from another client or if filler-struct\n    // then we need to reorder the decoders and find the next operation to write\n    const firstClient = /** @type {Item | GC} */ (currDecoder.curr).id.client;\n\n    if (currWrite !== null) {\n      let curr = /** @type {Item | GC | null} */ (currDecoder.curr);\n      let iterated = false;\n\n      // iterate until we find something that we haven't written already\n      // remember: first the high client-ids are written\n      while (curr !== null && curr.id.clock + curr.length <= currWrite.struct.id.clock + currWrite.struct.length && curr.id.client >= currWrite.struct.id.client) {\n        curr = currDecoder.next();\n        iterated = true;\n      }\n      if (\n        curr === null || // current decoder is empty\n        curr.id.client !== firstClient || // check whether there is another decoder that has has updates from `firstClient`\n        (iterated && curr.id.clock > currWrite.struct.id.clock + currWrite.struct.length) // the above while loop was used and we are potentially missing updates\n      ) {\n        continue\n      }\n\n      if (firstClient !== currWrite.struct.id.client) {\n        writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n        currWrite = { struct: curr, offset: 0 };\n        currDecoder.next();\n      } else {\n        if (currWrite.struct.id.clock + currWrite.struct.length < curr.id.clock) {\n          // @todo write currStruct & set currStruct = Skip(clock = currStruct.id.clock + currStruct.length, length = curr.id.clock - self.clock)\n          if (currWrite.struct.constructor === Skip) {\n            // extend existing skip\n            currWrite.struct.length = curr.id.clock + curr.length - currWrite.struct.id.clock;\n          } else {\n            writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n            const diff = curr.id.clock - currWrite.struct.id.clock - currWrite.struct.length;\n            /**\n             * @type {Skip}\n             */\n            const struct = new Skip(createID(firstClient, currWrite.struct.id.clock + currWrite.struct.length), diff);\n            currWrite = { struct, offset: 0 };\n          }\n        } else { // if (currWrite.struct.id.clock + currWrite.struct.length >= curr.id.clock) {\n          const diff = currWrite.struct.id.clock + currWrite.struct.length - curr.id.clock;\n          if (diff > 0) {\n            if (currWrite.struct.constructor === Skip) {\n              // prefer to slice Skip because the other struct might contain more information\n              currWrite.struct.length -= diff;\n            } else {\n              curr = sliceStruct(curr, diff);\n            }\n          }\n          if (!currWrite.struct.mergeWith(/** @type {any} */ (curr))) {\n            writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n            currWrite = { struct: curr, offset: 0 };\n            currDecoder.next();\n          }\n        }\n      }\n    } else {\n      currWrite = { struct: /** @type {Item | GC} */ (currDecoder.curr), offset: 0 };\n      currDecoder.next();\n    }\n    for (\n      let next = currDecoder.curr;\n      next !== null && next.id.client === firstClient && next.id.clock === currWrite.struct.id.clock + currWrite.struct.length && next.constructor !== Skip;\n      next = currDecoder.next()\n    ) {\n      writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n      currWrite = { struct: next, offset: 0 };\n    }\n  }\n  if (currWrite !== null) {\n    writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);\n    currWrite = null;\n  }\n  finishLazyStructWriting(lazyStructEncoder);\n\n  const dss = updateDecoders.map(decoder => readDeleteSet(decoder));\n  const ds = mergeDeleteSets(dss);\n  writeDeleteSet(updateEncoder, ds);\n  return updateEncoder.toUint8Array()\n};\n\n/**\n * @param {Uint8Array} update\n * @param {Uint8Array} sv\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n * @param {typeof UpdateEncoderV1 | typeof UpdateEncoderV2} [YEncoder]\n */\nconst diffUpdateV2 = (update, sv, YDecoder = UpdateDecoderV2, YEncoder = UpdateEncoderV2) => {\n  const state = decodeStateVector(sv);\n  const encoder = new YEncoder();\n  const lazyStructWriter = new LazyStructWriter(encoder);\n  const decoder = new YDecoder(decoding.createDecoder(update));\n  const reader = new LazyStructReader(decoder, false);\n  while (reader.curr) {\n    const curr = reader.curr;\n    const currClient = curr.id.client;\n    const svClock = state.get(currClient) || 0;\n    if (reader.curr.constructor === Skip) {\n      // the first written struct shouldn't be a skip\n      reader.next();\n      continue\n    }\n    if (curr.id.clock + curr.length > svClock) {\n      writeStructToLazyStructWriter(lazyStructWriter, curr, math.max(svClock - curr.id.clock, 0));\n      reader.next();\n      while (reader.curr && reader.curr.id.client === currClient) {\n        writeStructToLazyStructWriter(lazyStructWriter, reader.curr, 0);\n        reader.next();\n      }\n    } else {\n      // read until something new comes up\n      while (reader.curr && reader.curr.id.client === currClient && reader.curr.id.clock + reader.curr.length <= svClock) {\n        reader.next();\n      }\n    }\n  }\n  finishLazyStructWriting(lazyStructWriter);\n  // write ds\n  const ds = readDeleteSet(decoder);\n  writeDeleteSet(encoder, ds);\n  return encoder.toUint8Array()\n};\n\n/**\n * @param {Uint8Array} update\n * @param {Uint8Array} sv\n */\nconst diffUpdate = (update, sv) => diffUpdateV2(update, sv, UpdateDecoderV1, UpdateEncoderV1);\n\n/**\n * @param {LazyStructWriter} lazyWriter\n */\nconst flushLazyStructWriter = lazyWriter => {\n  if (lazyWriter.written > 0) {\n    lazyWriter.clientStructs.push({ written: lazyWriter.written, restEncoder: encoding.toUint8Array(lazyWriter.encoder.restEncoder) });\n    lazyWriter.encoder.restEncoder = encoding.createEncoder();\n    lazyWriter.written = 0;\n  }\n};\n\n/**\n * @param {LazyStructWriter} lazyWriter\n * @param {Item | GC} struct\n * @param {number} offset\n */\nconst writeStructToLazyStructWriter = (lazyWriter, struct, offset) => {\n  // flush curr if we start another client\n  if (lazyWriter.written > 0 && lazyWriter.currClient !== struct.id.client) {\n    flushLazyStructWriter(lazyWriter);\n  }\n  if (lazyWriter.written === 0) {\n    lazyWriter.currClient = struct.id.client;\n    // write next client\n    lazyWriter.encoder.writeClient(struct.id.client);\n    // write startClock\n    encoding.writeVarUint(lazyWriter.encoder.restEncoder, struct.id.clock + offset);\n  }\n  struct.write(lazyWriter.encoder, offset);\n  lazyWriter.written++;\n};\n/**\n * Call this function when we collected all parts and want to\n * put all the parts together. After calling this method,\n * you can continue using the UpdateEncoder.\n *\n * @param {LazyStructWriter} lazyWriter\n */\nconst finishLazyStructWriting = (lazyWriter) => {\n  flushLazyStructWriter(lazyWriter);\n\n  // this is a fresh encoder because we called flushCurr\n  const restEncoder = lazyWriter.encoder.restEncoder;\n\n  /**\n   * Now we put all the fragments together.\n   * This works similarly to `writeClientsStructs`\n   */\n\n  // write # states that were updated - i.e. the clients\n  encoding.writeVarUint(restEncoder, lazyWriter.clientStructs.length);\n\n  for (let i = 0; i < lazyWriter.clientStructs.length; i++) {\n    const partStructs = lazyWriter.clientStructs[i];\n    /**\n     * Works similarly to `writeStructs`\n     */\n    // write # encoded structs\n    encoding.writeVarUint(restEncoder, partStructs.written);\n    // write the rest of the fragment\n    encoding.writeUint8Array(restEncoder, partStructs.restEncoder);\n  }\n};\n\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} YDecoder\n * @param {typeof UpdateEncoderV2 | typeof UpdateEncoderV1 } YEncoder\n */\nconst convertUpdateFormat = (update, YDecoder, YEncoder) => {\n  const updateDecoder = new YDecoder(decoding.createDecoder(update));\n  const lazyDecoder = new LazyStructReader(updateDecoder, false);\n  const updateEncoder = new YEncoder();\n  const lazyWriter = new LazyStructWriter(updateEncoder);\n\n  for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {\n    writeStructToLazyStructWriter(lazyWriter, curr, 0);\n  }\n  finishLazyStructWriting(lazyWriter);\n  const ds = readDeleteSet(updateDecoder);\n  writeDeleteSet(updateEncoder, ds);\n  return updateEncoder.toUint8Array()\n};\n\n/**\n * @param {Uint8Array} update\n */\nconst convertUpdateFormatV1ToV2 = update => convertUpdateFormat(update, UpdateDecoderV1, UpdateEncoderV2);\n\n/**\n * @param {Uint8Array} update\n */\nconst convertUpdateFormatV2ToV1 = update => convertUpdateFormat(update, UpdateDecoderV2, UpdateEncoderV1);\n\n/**\n * @template {AbstractType<any>} T\n * YEvent describes the changes on a YType.\n */\nclass YEvent {\n  /**\n   * @param {T} target The changed type.\n   * @param {Transaction} transaction\n   */\n  constructor (target, transaction) {\n    /**\n     * The type on which this event was created on.\n     * @type {T}\n     */\n    this.target = target;\n    /**\n     * The current target on which the observe callback is called.\n     * @type {AbstractType<any>}\n     */\n    this.currentTarget = target;\n    /**\n     * The transaction that triggered this event.\n     * @type {Transaction}\n     */\n    this.transaction = transaction;\n    /**\n     * @type {Object|null}\n     */\n    this._changes = null;\n    /**\n     * @type {null | Map<string, { action: 'add' | 'update' | 'delete', oldValue: any, newValue: any }>}\n     */\n    this._keys = null;\n    /**\n     * @type {null | Array<{ insert?: string | Array<any> | object | AbstractType<any>, retain?: number, delete?: number, attributes?: Object<string, any> }>}\n     */\n    this._delta = null;\n  }\n\n  /**\n   * Computes the path from `y` to the changed type.\n   *\n   * @todo v14 should standardize on path: Array<{parent, index}> because that is easier to work with.\n   *\n   * The following property holds:\n   * @example\n   *   let type = y\n   *   event.path.forEach(dir => {\n   *     type = type.get(dir)\n   *   })\n   *   type === event.target // => true\n   */\n  get path () {\n    // @ts-ignore _item is defined because target is integrated\n    return getPathTo(this.currentTarget, this.target)\n  }\n\n  /**\n   * Check if a struct is deleted by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */\n  deletes (struct) {\n    return isDeleted(this.transaction.deleteSet, struct.id)\n  }\n\n  /**\n   * @type {Map<string, { action: 'add' | 'update' | 'delete', oldValue: any, newValue: any }>}\n   */\n  get keys () {\n    if (this._keys === null) {\n      const keys = new Map();\n      const target = this.target;\n      const changed = /** @type Set<string|null> */ (this.transaction.changed.get(target));\n      changed.forEach(key => {\n        if (key !== null) {\n          const item = /** @type {Item} */ (target._map.get(key));\n          /**\n           * @type {'delete' | 'add' | 'update'}\n           */\n          let action;\n          let oldValue;\n          if (this.adds(item)) {\n            let prev = item.left;\n            while (prev !== null && this.adds(prev)) {\n              prev = prev.left;\n            }\n            if (this.deletes(item)) {\n              if (prev !== null && this.deletes(prev)) {\n                action = 'delete';\n                oldValue = array.last(prev.content.getContent());\n              } else {\n                return\n              }\n            } else {\n              if (prev !== null && this.deletes(prev)) {\n                action = 'update';\n                oldValue = array.last(prev.content.getContent());\n              } else {\n                action = 'add';\n                oldValue = undefined;\n              }\n            }\n          } else {\n            if (this.deletes(item)) {\n              action = 'delete';\n              oldValue = array.last(/** @type {Item} */ item.content.getContent());\n            } else {\n              return // nop\n            }\n          }\n          keys.set(key, { action, oldValue });\n        }\n      });\n      this._keys = keys;\n    }\n    return this._keys\n  }\n\n  /**\n   * @type {Array<{insert?: string | Array<any> | object | AbstractType<any>, retain?: number, delete?: number, attributes?: Object<string, any>}>}\n   */\n  get delta () {\n    return this.changes.delta\n  }\n\n  /**\n   * Check if a struct is added by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */\n  adds (struct) {\n    return struct.id.clock >= (this.transaction.beforeState.get(struct.id.client) || 0)\n  }\n\n  /**\n   * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string, delete?:number, retain?:number}>}}\n   */\n  get changes () {\n    let changes = this._changes;\n    if (changes === null) {\n      const target = this.target;\n      const added = set.create();\n      const deleted = set.create();\n      /**\n       * @type {Array<{insert:Array<any>}|{delete:number}|{retain:number}>}\n       */\n      const delta = [];\n      changes = {\n        added,\n        deleted,\n        delta,\n        keys: this.keys\n      };\n      const changed = /** @type Set<string|null> */ (this.transaction.changed.get(target));\n      if (changed.has(null)) {\n        /**\n         * @type {any}\n         */\n        let lastOp = null;\n        const packOp = () => {\n          if (lastOp) {\n            delta.push(lastOp);\n          }\n        };\n        for (let item = target._start; item !== null; item = item.right) {\n          if (item.deleted) {\n            if (this.deletes(item) && !this.adds(item)) {\n              if (lastOp === null || lastOp.delete === undefined) {\n                packOp();\n                lastOp = { delete: 0 };\n              }\n              lastOp.delete += item.length;\n              deleted.add(item);\n            } // else nop\n          } else {\n            if (this.adds(item)) {\n              if (lastOp === null || lastOp.insert === undefined) {\n                packOp();\n                lastOp = { insert: [] };\n              }\n              lastOp.insert = lastOp.insert.concat(item.content.getContent());\n              added.add(item);\n            } else {\n              if (lastOp === null || lastOp.retain === undefined) {\n                packOp();\n                lastOp = { retain: 0 };\n              }\n              lastOp.retain += item.length;\n            }\n          }\n        }\n        if (lastOp !== null && lastOp.retain === undefined) {\n          packOp();\n        }\n      }\n      this._changes = changes;\n    }\n    return /** @type {any} */ (changes)\n  }\n}\n\n/**\n * Compute the path from this type to the specified target.\n *\n * @example\n *   // `child` should be accessible via `type.get(path[0]).get(path[1])..`\n *   const path = type.getPathTo(child)\n *   // assuming `type instanceof YArray`\n *   console.log(path) // might look like => [2, 'key1']\n *   child === type.get(path[0]).get(path[1])\n *\n * @param {AbstractType<any>} parent\n * @param {AbstractType<any>} child target\n * @return {Array<string|number>} Path to the target\n *\n * @private\n * @function\n */\nconst getPathTo = (parent, child) => {\n  const path = [];\n  while (child._item !== null && child !== parent) {\n    if (child._item.parentSub !== null) {\n      // parent is map-ish\n      path.unshift(child._item.parentSub);\n    } else {\n      // parent is array-ish\n      let i = 0;\n      let c = /** @type {AbstractType<any>} */ (child._item.parent)._start;\n      while (c !== child._item && c !== null) {\n        if (!c.deleted) {\n          i++;\n        }\n        c = c.right;\n      }\n      path.unshift(i);\n    }\n    child = /** @type {AbstractType<any>} */ (child._item.parent);\n  }\n  return path\n};\n\nconst maxSearchMarker = 80;\n\n/**\n * A unique timestamp that identifies each marker.\n *\n * Time is relative,.. this is more like an ever-increasing clock.\n *\n * @type {number}\n */\nlet globalSearchMarkerTimestamp = 0;\n\nclass ArraySearchMarker {\n  /**\n   * @param {Item} p\n   * @param {number} index\n   */\n  constructor (p, index) {\n    p.marker = true;\n    this.p = p;\n    this.index = index;\n    this.timestamp = globalSearchMarkerTimestamp++;\n  }\n}\n\n/**\n * @param {ArraySearchMarker} marker\n */\nconst refreshMarkerTimestamp = marker => { marker.timestamp = globalSearchMarkerTimestamp++; };\n\n/**\n * This is rather complex so this function is the only thing that should overwrite a marker\n *\n * @param {ArraySearchMarker} marker\n * @param {Item} p\n * @param {number} index\n */\nconst overwriteMarker = (marker, p, index) => {\n  marker.p.marker = false;\n  marker.p = p;\n  p.marker = true;\n  marker.index = index;\n  marker.timestamp = globalSearchMarkerTimestamp++;\n};\n\n/**\n * @param {Array<ArraySearchMarker>} searchMarker\n * @param {Item} p\n * @param {number} index\n */\nconst markPosition = (searchMarker, p, index) => {\n  if (searchMarker.length >= maxSearchMarker) {\n    // override oldest marker (we don't want to create more objects)\n    const marker = searchMarker.reduce((a, b) => a.timestamp < b.timestamp ? a : b);\n    overwriteMarker(marker, p, index);\n    return marker\n  } else {\n    // create new marker\n    const pm = new ArraySearchMarker(p, index);\n    searchMarker.push(pm);\n    return pm\n  }\n};\n\n/**\n * Search marker help us to find positions in the associative array faster.\n *\n * They speed up the process of finding a position without much bookkeeping.\n *\n * A maximum of `maxSearchMarker` objects are created.\n *\n * This function always returns a refreshed marker (updated timestamp)\n *\n * @param {AbstractType<any>} yarray\n * @param {number} index\n */\nconst findMarker = (yarray, index) => {\n  if (yarray._start === null || index === 0 || yarray._searchMarker === null) {\n    return null\n  }\n  const marker = yarray._searchMarker.length === 0 ? null : yarray._searchMarker.reduce((a, b) => math.abs(index - a.index) < math.abs(index - b.index) ? a : b);\n  let p = yarray._start;\n  let pindex = 0;\n  if (marker !== null) {\n    p = marker.p;\n    pindex = marker.index;\n    refreshMarkerTimestamp(marker); // we used it, we might need to use it again\n  }\n  // iterate to right if possible\n  while (p.right !== null && pindex < index) {\n    if (!p.deleted && p.countable) {\n      if (index < pindex + p.length) {\n        break\n      }\n      pindex += p.length;\n    }\n    p = p.right;\n  }\n  // iterate to left if necessary (might be that pindex > index)\n  while (p.left !== null && pindex > index) {\n    p = p.left;\n    if (!p.deleted && p.countable) {\n      pindex -= p.length;\n    }\n  }\n  // we want to make sure that p can't be merged with left, because that would screw up everything\n  // in that cas just return what we have (it is most likely the best marker anyway)\n  // iterate to left until p can't be merged with left\n  while (p.left !== null && p.left.id.client === p.id.client && p.left.id.clock + p.left.length === p.id.clock) {\n    p = p.left;\n    if (!p.deleted && p.countable) {\n      pindex -= p.length;\n    }\n  }\n\n  // @todo remove!\n  // assure position\n  // {\n  //   let start = yarray._start\n  //   let pos = 0\n  //   while (start !== p) {\n  //     if (!start.deleted && start.countable) {\n  //       pos += start.length\n  //     }\n  //     start = /** @type {Item} */ (start.right)\n  //   }\n  //   if (pos !== pindex) {\n  //     debugger\n  //     throw new Error('Gotcha position fail!')\n  //   }\n  // }\n  // if (marker) {\n  //   if (window.lengthes == null) {\n  //     window.lengthes = []\n  //     window.getLengthes = () => window.lengthes.sort((a, b) => a - b)\n  //   }\n  //   window.lengthes.push(marker.index - pindex)\n  //   console.log('distance', marker.index - pindex, 'len', p && p.parent.length)\n  // }\n  if (marker !== null && math.abs(marker.index - pindex) < /** @type {YText|YArray<any>} */ (p.parent).length / maxSearchMarker) {\n    // adjust existing marker\n    overwriteMarker(marker, p, pindex);\n    return marker\n  } else {\n    // create new marker\n    return markPosition(yarray._searchMarker, p, pindex)\n  }\n};\n\n/**\n * Update markers when a change happened.\n *\n * This should be called before doing a deletion!\n *\n * @param {Array<ArraySearchMarker>} searchMarker\n * @param {number} index\n * @param {number} len If insertion, len is positive. If deletion, len is negative.\n */\nconst updateMarkerChanges = (searchMarker, index, len) => {\n  for (let i = searchMarker.length - 1; i >= 0; i--) {\n    const m = searchMarker[i];\n    if (len > 0) {\n      /**\n       * @type {Item|null}\n       */\n      let p = m.p;\n      p.marker = false;\n      // Ideally we just want to do a simple position comparison, but this will only work if\n      // search markers don't point to deleted items for formats.\n      // Iterate marker to prev undeleted countable position so we know what to do when updating a position\n      while (p && (p.deleted || !p.countable)) {\n        p = p.left;\n        if (p && !p.deleted && p.countable) {\n          // adjust position. the loop should break now\n          m.index -= p.length;\n        }\n      }\n      if (p === null || p.marker === true) {\n        // remove search marker if updated position is null or if position is already marked\n        searchMarker.splice(i, 1);\n        continue\n      }\n      m.p = p;\n      p.marker = true;\n    }\n    if (index < m.index || (len > 0 && index === m.index)) { // a simple index <= m.index check would actually suffice\n      m.index = math.max(index, m.index + len);\n    }\n  }\n};\n\n/**\n * Accumulate all (list) children of a type and return them as an Array.\n *\n * @param {AbstractType<any>} t\n * @return {Array<Item>}\n */\nconst getTypeChildren = t => {\n  let s = t._start;\n  const arr = [];\n  while (s) {\n    arr.push(s);\n    s = s.right;\n  }\n  return arr\n};\n\n/**\n * Call event listeners with an event. This will also add an event to all\n * parents (for `.observeDeep` handlers).\n *\n * @template EventType\n * @param {AbstractType<EventType>} type\n * @param {Transaction} transaction\n * @param {EventType} event\n */\nconst callTypeObservers = (type, transaction, event) => {\n  const changedType = type;\n  const changedParentTypes = transaction.changedParentTypes;\n  while (true) {\n    // @ts-ignore\n    map.setIfUndefined(changedParentTypes, type, () => []).push(event);\n    if (type._item === null) {\n      break\n    }\n    type = /** @type {AbstractType<any>} */ (type._item.parent);\n  }\n  callEventHandlerListeners(changedType._eH, event, transaction);\n};\n\n/**\n * @template EventType\n * Abstract Yjs Type class\n */\nclass AbstractType {\n  constructor () {\n    /**\n     * @type {Item|null}\n     */\n    this._item = null;\n    /**\n     * @type {Map<string,Item>}\n     */\n    this._map = new Map();\n    /**\n     * @type {Item|null}\n     */\n    this._start = null;\n    /**\n     * @type {Doc|null}\n     */\n    this.doc = null;\n    this._length = 0;\n    /**\n     * Event handlers\n     * @type {EventHandler<EventType,Transaction>}\n     */\n    this._eH = createEventHandler();\n    /**\n     * Deep event handlers\n     * @type {EventHandler<Array<YEvent<any>>,Transaction>}\n     */\n    this._dEH = createEventHandler();\n    /**\n     * @type {null | Array<ArraySearchMarker>}\n     */\n    this._searchMarker = null;\n  }\n\n  /**\n   * @return {AbstractType<any>|null}\n   */\n  get parent () {\n    return this._item ? /** @type {AbstractType<any>} */ (this._item.parent) : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item|null} item\n   */\n  _integrate (y, item) {\n    this.doc = y;\n    this._item = item;\n  }\n\n  /**\n   * @return {AbstractType<EventType>}\n   */\n  _copy () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @return {AbstractType<EventType>}\n   */\n  clone () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} _encoder\n   */\n  _write (_encoder) { }\n\n  /**\n   * The first non-deleted item\n   */\n  get _first () {\n    let n = this._start;\n    while (n !== null && n.deleted) {\n      n = n.right;\n    }\n    return n\n  }\n\n  /**\n   * Creates YEvent and calls all type observers.\n   * Must be implemented by each type.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} _parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, _parentSubs) {\n    if (!transaction.local && this._searchMarker) {\n      this._searchMarker.length = 0;\n    }\n  }\n\n  /**\n   * Observe all events that are created on this type.\n   *\n   * @param {function(EventType, Transaction):void} f Observer function\n   */\n  observe (f) {\n    addEventHandlerListener(this._eH, f);\n  }\n\n  /**\n   * Observe all events that are created by this type and its children.\n   *\n   * @param {function(Array<YEvent<any>>,Transaction):void} f Observer function\n   */\n  observeDeep (f) {\n    addEventHandlerListener(this._dEH, f);\n  }\n\n  /**\n   * Unregister an observer function.\n   *\n   * @param {function(EventType,Transaction):void} f Observer function\n   */\n  unobserve (f) {\n    removeEventHandlerListener(this._eH, f);\n  }\n\n  /**\n   * Unregister an observer function.\n   *\n   * @param {function(Array<YEvent<any>>,Transaction):void} f Observer function\n   */\n  unobserveDeep (f) {\n    removeEventHandlerListener(this._dEH, f);\n  }\n\n  /**\n   * @abstract\n   * @return {any}\n   */\n  toJSON () {}\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} start\n * @param {number} end\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nconst typeListSlice = (type, start, end) => {\n  if (start < 0) {\n    start = type._length + start;\n  }\n  if (end < 0) {\n    end = type._length + end;\n  }\n  let len = end - start;\n  const cs = [];\n  let n = type._start;\n  while (n !== null && len > 0) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent();\n      if (c.length <= start) {\n        start -= c.length;\n      } else {\n        for (let i = start; i < c.length && len > 0; i++) {\n          cs.push(c[i]);\n          len--;\n        }\n        start = 0;\n      }\n    }\n    n = n.right;\n  }\n  return cs\n};\n\n/**\n * @param {AbstractType<any>} type\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nconst typeListToArray = type => {\n  const cs = [];\n  let n = type._start;\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent();\n      for (let i = 0; i < c.length; i++) {\n        cs.push(c[i]);\n      }\n    }\n    n = n.right;\n  }\n  return cs\n};\n\n/**\n * @param {AbstractType<any>} type\n * @param {Snapshot} snapshot\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nconst typeListToArraySnapshot = (type, snapshot) => {\n  const cs = [];\n  let n = type._start;\n  while (n !== null) {\n    if (n.countable && isVisible(n, snapshot)) {\n      const c = n.content.getContent();\n      for (let i = 0; i < c.length; i++) {\n        cs.push(c[i]);\n      }\n    }\n    n = n.right;\n  }\n  return cs\n};\n\n/**\n * Executes a provided function on once on overy element of this YArray.\n *\n * @param {AbstractType<any>} type\n * @param {function(any,number,any):void} f A function to execute on every element of this YArray.\n *\n * @private\n * @function\n */\nconst typeListForEach = (type, f) => {\n  let index = 0;\n  let n = type._start;\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent();\n      for (let i = 0; i < c.length; i++) {\n        f(c[i], index++, type);\n      }\n    }\n    n = n.right;\n  }\n};\n\n/**\n * @template C,R\n * @param {AbstractType<any>} type\n * @param {function(C,number,AbstractType<any>):R} f\n * @return {Array<R>}\n *\n * @private\n * @function\n */\nconst typeListMap = (type, f) => {\n  /**\n   * @type {Array<any>}\n   */\n  const result = [];\n  typeListForEach(type, (c, i) => {\n    result.push(f(c, i, type));\n  });\n  return result\n};\n\n/**\n * @param {AbstractType<any>} type\n * @return {IterableIterator<any>}\n *\n * @private\n * @function\n */\nconst typeListCreateIterator = type => {\n  let n = type._start;\n  /**\n   * @type {Array<any>|null}\n   */\n  let currentContent = null;\n  let currentContentIndex = 0;\n  return {\n    [Symbol.iterator] () {\n      return this\n    },\n    next: () => {\n      // find some content\n      if (currentContent === null) {\n        while (n !== null && n.deleted) {\n          n = n.right;\n        }\n        // check if we reached the end, no need to check currentContent, because it does not exist\n        if (n === null) {\n          return {\n            done: true,\n            value: undefined\n          }\n        }\n        // we found n, so we can set currentContent\n        currentContent = n.content.getContent();\n        currentContentIndex = 0;\n        n = n.right; // we used the content of n, now iterate to next\n      }\n      const value = currentContent[currentContentIndex++];\n      // check if we need to empty currentContent\n      if (currentContent.length <= currentContentIndex) {\n        currentContent = null;\n      }\n      return {\n        done: false,\n        value\n      }\n    }\n  }\n};\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @return {any}\n *\n * @private\n * @function\n */\nconst typeListGet = (type, index) => {\n  const marker = findMarker(type, index);\n  let n = type._start;\n  if (marker !== null) {\n    n = marker.p;\n    index -= marker.index;\n  }\n  for (; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        return n.content.getContent()[index]\n      }\n      index -= n.length;\n    }\n  }\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {Item?} referenceItem\n * @param {Array<Object<string,any>|Array<any>|boolean|number|null|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nconst typeListInsertGenericsAfter = (transaction, parent, referenceItem, content) => {\n  let left = referenceItem;\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  const store = doc.store;\n  const right = referenceItem === null ? parent._start : referenceItem.right;\n  /**\n   * @type {Array<Object|Array<any>|number|null>}\n   */\n  let jsonContent = [];\n  const packJsonContent = () => {\n    if (jsonContent.length > 0) {\n      left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentAny(jsonContent));\n      left.integrate(transaction, 0);\n      jsonContent = [];\n    }\n  };\n  content.forEach(c => {\n    if (c === null) {\n      jsonContent.push(c);\n    } else {\n      switch (c.constructor) {\n        case Number:\n        case Object:\n        case Boolean:\n        case Array:\n        case String:\n          jsonContent.push(c);\n          break\n        default:\n          packJsonContent();\n          switch (c.constructor) {\n            case Uint8Array:\n            case ArrayBuffer:\n              left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentBinary(new Uint8Array(/** @type {Uint8Array} */ (c))));\n              left.integrate(transaction, 0);\n              break\n            case Doc:\n              left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentDoc(/** @type {Doc} */ (c)));\n              left.integrate(transaction, 0);\n              break\n            default:\n              if (c instanceof AbstractType) {\n                left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentType(c));\n                left.integrate(transaction, 0);\n              } else {\n                throw new Error('Unexpected content type in insert operation')\n              }\n          }\n      }\n    }\n  });\n  packJsonContent();\n};\n\nconst lengthExceeded = error.create('Length exceeded!');\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {Array<Object<string,any>|Array<any>|number|null|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nconst typeListInsertGenerics = (transaction, parent, index, content) => {\n  if (index > parent._length) {\n    throw lengthExceeded\n  }\n  if (index === 0) {\n    if (parent._searchMarker) {\n      updateMarkerChanges(parent._searchMarker, index, content.length);\n    }\n    return typeListInsertGenericsAfter(transaction, parent, null, content)\n  }\n  const startIndex = index;\n  const marker = findMarker(parent, index);\n  let n = parent._start;\n  if (marker !== null) {\n    n = marker.p;\n    index -= marker.index;\n    // we need to iterate one to the left so that the algorithm works\n    if (index === 0) {\n      // @todo refactor this as it actually doesn't consider formats\n      n = n.prev; // important! get the left undeleted item so that we can actually decrease index\n      index += (n && n.countable && !n.deleted) ? n.length : 0;\n    }\n  }\n  for (; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index <= n.length) {\n        if (index < n.length) {\n          // insert in-between\n          getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index));\n        }\n        break\n      }\n      index -= n.length;\n    }\n  }\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, startIndex, content.length);\n  }\n  return typeListInsertGenericsAfter(transaction, parent, n, content)\n};\n\n/**\n * Pushing content is special as we generally want to push after the last item. So we don't have to update\n * the serach marker.\n *\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {Array<Object<string,any>|Array<any>|number|null|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nconst typeListPushGenerics = (transaction, parent, content) => {\n  // Use the marker with the highest index and iterate to the right.\n  const marker = (parent._searchMarker || []).reduce((maxMarker, currMarker) => currMarker.index > maxMarker.index ? currMarker : maxMarker, { index: 0, p: parent._start });\n  let n = marker.p;\n  if (n) {\n    while (n.right) {\n      n = n.right;\n    }\n  }\n  return typeListInsertGenericsAfter(transaction, parent, n, content)\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {number} length\n *\n * @private\n * @function\n */\nconst typeListDelete = (transaction, parent, index, length) => {\n  if (length === 0) { return }\n  const startIndex = index;\n  const startLength = length;\n  const marker = findMarker(parent, index);\n  let n = parent._start;\n  if (marker !== null) {\n    n = marker.p;\n    index -= marker.index;\n  }\n  // compute the first item to be deleted\n  for (; n !== null && index > 0; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index));\n      }\n      index -= n.length;\n    }\n  }\n  // delete all items until done\n  while (length > 0 && n !== null) {\n    if (!n.deleted) {\n      if (length < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + length));\n      }\n      n.delete(transaction);\n      length -= n.length;\n    }\n    n = n.right;\n  }\n  if (length > 0) {\n    throw lengthExceeded\n  }\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, startIndex, -startLength + length /* in case we remove the above exception */);\n  }\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n *\n * @private\n * @function\n */\nconst typeMapDelete = (transaction, parent, key) => {\n  const c = parent._map.get(key);\n  if (c !== undefined) {\n    c.delete(transaction);\n  }\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Object|number|null|Array<any>|string|Uint8Array|AbstractType<any>} value\n *\n * @private\n * @function\n */\nconst typeMapSet = (transaction, parent, key, value) => {\n  const left = parent._map.get(key) || null;\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  let content;\n  if (value == null) {\n    content = new ContentAny([value]);\n  } else {\n    switch (value.constructor) {\n      case Number:\n      case Object:\n      case Boolean:\n      case Array:\n      case String:\n        content = new ContentAny([value]);\n        break\n      case Uint8Array:\n        content = new ContentBinary(/** @type {Uint8Array} */ (value));\n        break\n      case Doc:\n        content = new ContentDoc(/** @type {Doc} */ (value));\n        break\n      default:\n        if (value instanceof AbstractType) {\n          content = new ContentType(value);\n        } else {\n          throw new Error('Unexpected content type')\n        }\n    }\n  }\n  new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, null, null, parent, key, content).integrate(transaction, 0);\n};\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {Object<string,any>|number|null|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\nconst typeMapGet = (parent, key) => {\n  const val = parent._map.get(key);\n  return val !== undefined && !val.deleted ? val.content.getContent()[val.length - 1] : undefined\n};\n\n/**\n * @param {AbstractType<any>} parent\n * @return {Object<string,Object<string,any>|number|null|Array<any>|string|Uint8Array|AbstractType<any>|undefined>}\n *\n * @private\n * @function\n */\nconst typeMapGetAll = (parent) => {\n  /**\n   * @type {Object<string,any>}\n   */\n  const res = {};\n  parent._map.forEach((value, key) => {\n    if (!value.deleted) {\n      res[key] = value.content.getContent()[value.length - 1];\n    }\n  });\n  return res\n};\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {boolean}\n *\n * @private\n * @function\n */\nconst typeMapHas = (parent, key) => {\n  const val = parent._map.get(key);\n  return val !== undefined && !val.deleted\n};\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Snapshot} snapshot\n * @return {Object<string,any>|number|null|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\nconst typeMapGetSnapshot = (parent, key, snapshot) => {\n  let v = parent._map.get(key) || null;\n  while (v !== null && (!snapshot.sv.has(v.id.client) || v.id.clock >= (snapshot.sv.get(v.id.client) || 0))) {\n    v = v.left;\n  }\n  return v !== null && isVisible(v, snapshot) ? v.content.getContent()[v.length - 1] : undefined\n};\n\n/**\n * @param {Map<string,Item>} map\n * @return {IterableIterator<Array<any>>}\n *\n * @private\n * @function\n */\nconst createMapIterator = map => iterator.iteratorFilter(map.entries(), /** @param {any} entry */ entry => !entry[1].deleted);\n\n/**\n * @module YArray\n */\n\n/**\n * Event that describes the changes on a YArray\n * @template T\n * @extends YEvent<YArray<T>>\n */\nclass YArrayEvent extends YEvent {\n  /**\n   * @param {YArray<T>} yarray The changed type\n   * @param {Transaction} transaction The transaction object\n   */\n  constructor (yarray, transaction) {\n    super(yarray, transaction);\n    this._transaction = transaction;\n  }\n}\n\n/**\n * A shared Array implementation.\n * @template T\n * @extends AbstractType<YArrayEvent<T>>\n * @implements {Iterable<T>}\n */\nclass YArray extends AbstractType {\n  constructor () {\n    super();\n    /**\n     * @type {Array<any>?}\n     * @private\n     */\n    this._prelimContent = [];\n    /**\n     * @type {Array<ArraySearchMarker>}\n     */\n    this._searchMarker = [];\n  }\n\n  /**\n   * Construct a new YArray containing the specified items.\n   * @template {Object<string,any>|Array<any>|number|null|string|Uint8Array} T\n   * @param {Array<T>} items\n   * @return {YArray<T>}\n   */\n  static from (items) {\n    /**\n     * @type {YArray<T>}\n     */\n    const a = new YArray();\n    a.push(items);\n    return a\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item);\n    this.insert(0, /** @type {Array<any>} */ (this._prelimContent));\n    this._prelimContent = null;\n  }\n\n  /**\n   * @return {YArray<T>}\n   */\n  _copy () {\n    return new YArray()\n  }\n\n  /**\n   * @return {YArray<T>}\n   */\n  clone () {\n    /**\n     * @type {YArray<T>}\n     */\n    const arr = new YArray();\n    arr.insert(0, this.toArray().map(el =>\n      el instanceof AbstractType ? /** @type {typeof el} */ (el.clone()) : el\n    ));\n    return arr\n  }\n\n  get length () {\n    return this._prelimContent === null ? this._length : this._prelimContent.length\n  }\n\n  /**\n   * Creates YArrayEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    super._callObserver(transaction, parentSubs);\n    callTypeObservers(this, transaction, new YArrayEvent(this, transaction));\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * Important: This function expects an array of content. Not just a content\n   * object. The reason for this \"weirdness\" is that inserting several elements\n   * is very efficient when it is done as a single operation.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  yarray.insert(0, ['a'])\n   *  // Insert numbers 1, 2 at position 1\n   *  yarray.insert(1, [1, 2])\n   *\n   * @param {number} index The index to insert content at.\n   * @param {Array<T>} content The array of content\n   */\n  insert (index, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListInsertGenerics(transaction, this, index, /** @type {any} */ (content));\n      });\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).splice(index, 0, ...content);\n    }\n  }\n\n  /**\n   * Appends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to append.\n   *\n   * @todo Use the following implementation in all types.\n   */\n  push (content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListPushGenerics(transaction, this, /** @type {any} */ (content));\n      });\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).push(...content);\n    }\n  }\n\n  /**\n   * Preppends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to preppend.\n   */\n  unshift (content) {\n    this.insert(0, content);\n  }\n\n  /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} length The number of elements to remove. Defaults to 1.\n   */\n  delete (index, length = 1) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListDelete(transaction, this, index, length);\n      });\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).splice(index, length);\n    }\n  }\n\n  /**\n   * Returns the i-th element from a YArray.\n   *\n   * @param {number} index The index of the element to return from the YArray\n   * @return {T}\n   */\n  get (index) {\n    return typeListGet(this, index)\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<T>}\n   */\n  toArray () {\n    return typeListToArray(this)\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @return {Array<T>}\n   */\n  slice (start = 0, end = this.length) {\n    return typeListSlice(this, start, end)\n  }\n\n  /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Array<any>}\n   */\n  toJSON () {\n    return this.map(c => c instanceof AbstractType ? c.toJSON() : c)\n  }\n\n  /**\n   * Returns an Array with the result of calling a provided function on every\n   * element of this YArray.\n   *\n   * @template M\n   * @param {function(T,number,YArray<T>):M} f Function that produces an element of the new Array\n   * @return {Array<M>} A new array with each element being the result of the\n   *                 callback function\n   */\n  map (f) {\n    return typeListMap(this, /** @type {any} */ (f))\n  }\n\n  /**\n   * Executes a provided function on once on overy element of this YArray.\n   *\n   * @param {function(T,number,YArray<T>):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    typeListForEach(this, f);\n  }\n\n  /**\n   * @return {IterableIterator<T>}\n   */\n  [Symbol.iterator] () {\n    return typeListCreateIterator(this)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YArrayRefID);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} _decoder\n *\n * @private\n * @function\n */\nconst readYArray = _decoder => new YArray();\n\n/**\n * @template T\n * @extends YEvent<YMap<T>>\n * Event that describes the changes on a YMap.\n */\nclass YMapEvent extends YEvent {\n  /**\n   * @param {YMap<T>} ymap The YArray that changed.\n   * @param {Transaction} transaction\n   * @param {Set<any>} subs The keys that changed.\n   */\n  constructor (ymap, transaction, subs) {\n    super(ymap, transaction);\n    this.keysChanged = subs;\n  }\n}\n\n/**\n * @template MapType\n * A shared Map implementation.\n *\n * @extends AbstractType<YMapEvent<MapType>>\n * @implements {Iterable<MapType>}\n */\nclass YMap extends AbstractType {\n  /**\n   *\n   * @param {Iterable<readonly [string, any]>=} entries - an optional iterable to initialize the YMap\n   */\n  constructor (entries) {\n    super();\n    /**\n     * @type {Map<string,any>?}\n     * @private\n     */\n    this._prelimContent = null;\n\n    if (entries === undefined) {\n      this._prelimContent = new Map();\n    } else {\n      this._prelimContent = new Map(entries);\n    }\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    ;/** @type {Map<string, any>} */ (this._prelimContent).forEach((value, key) => {\n      this.set(key, value);\n    });\n    this._prelimContent = null;\n  }\n\n  /**\n   * @return {YMap<MapType>}\n   */\n  _copy () {\n    return new YMap()\n  }\n\n  /**\n   * @return {YMap<MapType>}\n   */\n  clone () {\n    /**\n     * @type {YMap<MapType>}\n     */\n    const map = new YMap();\n    this.forEach((value, key) => {\n      map.set(key, value instanceof AbstractType ? /** @type {typeof value} */ (value.clone()) : value);\n    });\n    return map\n  }\n\n  /**\n   * Creates YMapEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YMapEvent(this, transaction, parentSubs));\n  }\n\n  /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Object<string,any>}\n   */\n  toJSON () {\n    /**\n     * @type {Object<string,MapType>}\n     */\n    const map = {};\n    this._map.forEach((item, key) => {\n      if (!item.deleted) {\n        const v = item.content.getContent()[item.length - 1];\n        map[key] = v instanceof AbstractType ? v.toJSON() : v;\n      }\n    });\n    return map\n  }\n\n  /**\n   * Returns the size of the YMap (count of key/value pairs)\n   *\n   * @return {number}\n   */\n  get size () {\n    return [...createMapIterator(this._map)].length\n  }\n\n  /**\n   * Returns the keys for each element in the YMap Type.\n   *\n   * @return {IterableIterator<string>}\n   */\n  keys () {\n    return iterator.iteratorMap(createMapIterator(this._map), /** @param {any} v */ v => v[0])\n  }\n\n  /**\n   * Returns the values for each element in the YMap Type.\n   *\n   * @return {IterableIterator<any>}\n   */\n  values () {\n    return iterator.iteratorMap(createMapIterator(this._map), /** @param {any} v */ v => v[1].content.getContent()[v[1].length - 1])\n  }\n\n  /**\n   * Returns an Iterator of [key, value] pairs\n   *\n   * @return {IterableIterator<any>}\n   */\n  entries () {\n    return iterator.iteratorMap(createMapIterator(this._map), /** @param {any} v */ v => [v[0], v[1].content.getContent()[v[1].length - 1]])\n  }\n\n  /**\n   * Executes a provided function on once on every key-value pair.\n   *\n   * @param {function(MapType,string,YMap<MapType>):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    this._map.forEach((item, key) => {\n      if (!item.deleted) {\n        f(item.content.getContent()[item.length - 1], key, this);\n      }\n    });\n  }\n\n  /**\n   * Returns an Iterator of [key, value] pairs\n   *\n   * @return {IterableIterator<any>}\n   */\n  [Symbol.iterator] () {\n    return this.entries()\n  }\n\n  /**\n   * Remove a specified element from this YMap.\n   *\n   * @param {string} key The key of the element to remove.\n   */\n  delete (key) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, key);\n      });\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).delete(key);\n    }\n  }\n\n  /**\n   * Adds or updates an element with a specified key and value.\n   *\n   * @param {string} key The key of the element to add to this YMap\n   * @param {MapType} value The value of the element to add\n   */\n  set (key, value) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, key, /** @type {any} */ (value));\n      });\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).set(key, value);\n    }\n    return value\n  }\n\n  /**\n   * Returns a specified element from this YMap.\n   *\n   * @param {string} key\n   * @return {MapType|undefined}\n   */\n  get (key) {\n    return /** @type {any} */ (typeMapGet(this, key))\n  }\n\n  /**\n   * Returns a boolean indicating whether the specified key exists or not.\n   *\n   * @param {string} key The key to test.\n   * @return {boolean}\n   */\n  has (key) {\n    return typeMapHas(this, key)\n  }\n\n  /**\n   * Removes all elements from this YMap.\n   */\n  clear () {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        this.forEach(function (_value, key, map) {\n          typeMapDelete(transaction, map, key);\n        });\n      });\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).clear();\n    }\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YMapRefID);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} _decoder\n *\n * @private\n * @function\n */\nconst readYMap = _decoder => new YMap();\n\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\nconst equalAttrs = (a, b) => a === b || (typeof a === 'object' && typeof b === 'object' && a && b && object.equalFlat(a, b));\n\nclass ItemTextListPosition {\n  /**\n   * @param {Item|null} left\n   * @param {Item|null} right\n   * @param {number} index\n   * @param {Map<string,any>} currentAttributes\n   */\n  constructor (left, right, index, currentAttributes) {\n    this.left = left;\n    this.right = right;\n    this.index = index;\n    this.currentAttributes = currentAttributes;\n  }\n\n  /**\n   * Only call this if you know that this.right is defined\n   */\n  forward () {\n    if (this.right === null) {\n      error.unexpectedCase();\n    }\n    switch (this.right.content.constructor) {\n      case ContentFormat:\n        if (!this.right.deleted) {\n          updateCurrentAttributes(this.currentAttributes, /** @type {ContentFormat} */ (this.right.content));\n        }\n        break\n      default:\n        if (!this.right.deleted) {\n          this.index += this.right.length;\n        }\n        break\n    }\n    this.left = this.right;\n    this.right = this.right.right;\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {ItemTextListPosition} pos\n * @param {number} count steps to move forward\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst findNextPosition = (transaction, pos, count) => {\n  while (pos.right !== null && count > 0) {\n    switch (pos.right.content.constructor) {\n      case ContentFormat:\n        if (!pos.right.deleted) {\n          updateCurrentAttributes(pos.currentAttributes, /** @type {ContentFormat} */ (pos.right.content));\n        }\n        break\n      default:\n        if (!pos.right.deleted) {\n          if (count < pos.right.length) {\n            // split right\n            getItemCleanStart(transaction, createID(pos.right.id.client, pos.right.id.clock + count));\n          }\n          pos.index += pos.right.length;\n          count -= pos.right.length;\n        }\n        break\n    }\n    pos.left = pos.right;\n    pos.right = pos.right.right;\n    // pos.forward() - we don't forward because that would halve the performance because we already do the checks above\n  }\n  return pos\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst findPosition = (transaction, parent, index) => {\n  const currentAttributes = new Map();\n  const marker = findMarker(parent, index);\n  if (marker) {\n    const pos = new ItemTextListPosition(marker.p.left, marker.p, marker.index, currentAttributes);\n    return findNextPosition(transaction, pos, index - marker.index)\n  } else {\n    const pos = new ItemTextListPosition(null, parent._start, 0, currentAttributes);\n    return findNextPosition(transaction, pos, index)\n  }\n};\n\n/**\n * Negate applied formats\n *\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {Map<string,any>} negatedAttributes\n *\n * @private\n * @function\n */\nconst insertNegatedAttributes = (transaction, parent, currPos, negatedAttributes) => {\n  // check if we really need to remove attributes\n  while (\n    currPos.right !== null && (\n      currPos.right.deleted === true || (\n        currPos.right.content.constructor === ContentFormat &&\n        equalAttrs(negatedAttributes.get(/** @type {ContentFormat} */ (currPos.right.content).key), /** @type {ContentFormat} */ (currPos.right.content).value)\n      )\n    )\n  ) {\n    if (!currPos.right.deleted) {\n      negatedAttributes.delete(/** @type {ContentFormat} */ (currPos.right.content).key);\n    }\n    currPos.forward();\n  }\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  negatedAttributes.forEach((val, key) => {\n    const left = currPos.left;\n    const right = currPos.right;\n    const nextFormat = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val));\n    nextFormat.integrate(transaction, 0);\n    currPos.right = nextFormat;\n    currPos.forward();\n  });\n};\n\n/**\n * @param {Map<string,any>} currentAttributes\n * @param {ContentFormat} format\n *\n * @private\n * @function\n */\nconst updateCurrentAttributes = (currentAttributes, format) => {\n  const { key, value } = format;\n  if (value === null) {\n    currentAttributes.delete(key);\n  } else {\n    currentAttributes.set(key, value);\n  }\n};\n\n/**\n * @param {ItemTextListPosition} currPos\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\nconst minimizeAttributeChanges = (currPos, attributes) => {\n  // go right while attributes[right.key] === right.value (or right is deleted)\n  while (true) {\n    if (currPos.right === null) {\n      break\n    } else if (currPos.right.deleted || (currPos.right.content.constructor === ContentFormat && equalAttrs(attributes[(/** @type {ContentFormat} */ (currPos.right.content)).key] || null, /** @type {ContentFormat} */ (currPos.right.content).value))) ; else {\n      break\n    }\n    currPos.forward();\n  }\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {Object<string,any>} attributes\n * @return {Map<string,any>}\n *\n * @private\n * @function\n **/\nconst insertAttributes = (transaction, parent, currPos, attributes) => {\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  const negatedAttributes = new Map();\n  // insert format-start items\n  for (const key in attributes) {\n    const val = attributes[key];\n    const currentVal = currPos.currentAttributes.get(key) || null;\n    if (!equalAttrs(currentVal, val)) {\n      // save negated attribute (set null if currentVal undefined)\n      negatedAttributes.set(key, currentVal);\n      const { left, right } = currPos;\n      currPos.right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val));\n      currPos.right.integrate(transaction, 0);\n      currPos.forward();\n    }\n  }\n  return negatedAttributes\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {string|object|AbstractType<any>} text\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n **/\nconst insertText = (transaction, parent, currPos, text, attributes) => {\n  currPos.currentAttributes.forEach((_val, key) => {\n    if (attributes[key] === undefined) {\n      attributes[key] = null;\n    }\n  });\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  minimizeAttributeChanges(currPos, attributes);\n  const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes);\n  // insert content\n  const content = text.constructor === String ? new ContentString(/** @type {string} */ (text)) : (text instanceof AbstractType ? new ContentType(text) : new ContentEmbed(text));\n  let { left, right, index } = currPos;\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, currPos.index, content.getLength());\n  }\n  right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, content);\n  right.integrate(transaction, 0);\n  currPos.right = right;\n  currPos.index = index;\n  currPos.forward();\n  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);\n};\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {number} length\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\nconst formatText = (transaction, parent, currPos, length, attributes) => {\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  minimizeAttributeChanges(currPos, attributes);\n  const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes);\n  // iterate until first non-format or null is found\n  // delete all formats with attributes[format.key] != null\n  // also check the attributes after the first non-format as we do not want to insert redundant negated attributes there\n  // eslint-disable-next-line no-labels\n  iterationLoop: while (\n    currPos.right !== null &&\n    (length > 0 ||\n      (\n        negatedAttributes.size > 0 &&\n        (currPos.right.deleted || currPos.right.content.constructor === ContentFormat)\n      )\n    )\n  ) {\n    if (!currPos.right.deleted) {\n      switch (currPos.right.content.constructor) {\n        case ContentFormat: {\n          const { key, value } = /** @type {ContentFormat} */ (currPos.right.content);\n          const attr = attributes[key];\n          if (attr !== undefined) {\n            if (equalAttrs(attr, value)) {\n              negatedAttributes.delete(key);\n            } else {\n              if (length === 0) {\n                // no need to further extend negatedAttributes\n                // eslint-disable-next-line no-labels\n                break iterationLoop\n              }\n              negatedAttributes.set(key, value);\n            }\n            currPos.right.delete(transaction);\n          } else {\n            currPos.currentAttributes.set(key, value);\n          }\n          break\n        }\n        default:\n          if (length < currPos.right.length) {\n            getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length));\n          }\n          length -= currPos.right.length;\n          break\n      }\n    }\n    currPos.forward();\n  }\n  // Quill just assumes that the editor starts with a newline and that it always\n  // ends with a newline. We only insert that newline when a new newline is\n  // inserted - i.e when length is bigger than type.length\n  if (length > 0) {\n    let newlines = '';\n    for (; length > 0; length--) {\n      newlines += '\\n';\n    }\n    currPos.right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), currPos.left, currPos.left && currPos.left.lastId, currPos.right, currPos.right && currPos.right.id, parent, null, new ContentString(newlines));\n    currPos.right.integrate(transaction, 0);\n    currPos.forward();\n  }\n  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);\n};\n\n/**\n * Call this function after string content has been deleted in order to\n * clean up formatting Items.\n *\n * @param {Transaction} transaction\n * @param {Item} start\n * @param {Item|null} curr exclusive end, automatically iterates to the next Content Item\n * @param {Map<string,any>} startAttributes\n * @param {Map<string,any>} currAttributes\n * @return {number} The amount of formatting Items deleted.\n *\n * @function\n */\nconst cleanupFormattingGap = (transaction, start, curr, startAttributes, currAttributes) => {\n  let end = curr;\n  const endAttributes = map.copy(currAttributes);\n  while (end && (!end.countable || end.deleted)) {\n    if (!end.deleted && end.content.constructor === ContentFormat) {\n      updateCurrentAttributes(endAttributes, /** @type {ContentFormat} */ (end.content));\n    }\n    end = end.right;\n  }\n  let cleanups = 0;\n  let reachedEndOfCurr = false;\n  while (start !== end) {\n    if (curr === start) {\n      reachedEndOfCurr = true;\n    }\n    if (!start.deleted) {\n      const content = start.content;\n      switch (content.constructor) {\n        case ContentFormat: {\n          const { key, value } = /** @type {ContentFormat} */ (content);\n          const startAttrValue = startAttributes.get(key) || null;\n          if ((endAttributes.get(key) || null) !== value || startAttrValue === value) {\n            // Either this format is overwritten or it is not necessary because the attribute already existed.\n            start.delete(transaction);\n            cleanups++;\n            if (!reachedEndOfCurr && (currAttributes.get(key) || null) === value && (startAttributes.get(key) || null) !== value) {\n              if (startAttrValue === null) {\n                currAttributes.delete(key);\n              } else {\n                currAttributes.set(key, startAttrValue);\n              }\n            }\n          }\n          break\n        }\n      }\n    }\n    start = /** @type {Item} */ (start.right);\n  }\n  return cleanups\n};\n\n/**\n * @param {Transaction} transaction\n * @param {Item | null} item\n */\nconst cleanupContextlessFormattingGap = (transaction, item) => {\n  // iterate until item.right is null or content\n  while (item && item.right && (item.right.deleted || !item.right.countable)) {\n    item = item.right;\n  }\n  const attrs = new Set();\n  // iterate back until a content item is found\n  while (item && (item.deleted || !item.countable)) {\n    if (!item.deleted && item.content.constructor === ContentFormat) {\n      const key = /** @type {ContentFormat} */ (item.content).key;\n      if (attrs.has(key)) {\n        item.delete(transaction);\n      } else {\n        attrs.add(key);\n      }\n    }\n    item = item.left;\n  }\n};\n\n/**\n * This function is experimental and subject to change / be removed.\n *\n * Ideally, we don't need this function at all. Formatting attributes should be cleaned up\n * automatically after each change. This function iterates twice over the complete YText type\n * and removes unnecessary formatting attributes. This is also helpful for testing.\n *\n * This function won't be exported anymore as soon as there is confidence that the YText type works as intended.\n *\n * @param {YText} type\n * @return {number} How many formatting attributes have been cleaned up.\n */\nconst cleanupYTextFormatting = type => {\n  let res = 0;\n  transact(/** @type {Doc} */ (type.doc), transaction => {\n    let start = /** @type {Item} */ (type._start);\n    let end = type._start;\n    let startAttributes = map.create();\n    const currentAttributes = map.copy(startAttributes);\n    while (end) {\n      if (end.deleted === false) {\n        switch (end.content.constructor) {\n          case ContentFormat:\n            updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (end.content));\n            break\n          default:\n            res += cleanupFormattingGap(transaction, start, end, startAttributes, currentAttributes);\n            startAttributes = map.copy(currentAttributes);\n            start = end;\n            break\n        }\n      }\n      end = end.right;\n    }\n  });\n  return res\n};\n\n/**\n * @param {Transaction} transaction\n * @param {ItemTextListPosition} currPos\n * @param {number} length\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst deleteText = (transaction, currPos, length) => {\n  const startLength = length;\n  const startAttrs = map.copy(currPos.currentAttributes);\n  const start = currPos.right;\n  while (length > 0 && currPos.right !== null) {\n    if (currPos.right.deleted === false) {\n      switch (currPos.right.content.constructor) {\n        case ContentType:\n        case ContentEmbed:\n        case ContentString:\n          if (length < currPos.right.length) {\n            getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length));\n          }\n          length -= currPos.right.length;\n          currPos.right.delete(transaction);\n          break\n      }\n    }\n    currPos.forward();\n  }\n  if (start) {\n    cleanupFormattingGap(transaction, start, currPos.right, startAttrs, currPos.currentAttributes);\n  }\n  const parent = /** @type {AbstractType<any>} */ (/** @type {Item} */ (currPos.left || currPos.right).parent);\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, currPos.index, -startLength + length);\n  }\n  return currPos\n};\n\n/**\n * The Quill Delta format represents changes on a text document with\n * formatting information. For mor information visit {@link https://quilljs.com/docs/delta/|Quill Delta}\n *\n * @example\n *   {\n *     ops: [\n *       { insert: 'Gandalf', attributes: { bold: true } },\n *       { insert: ' the ' },\n *       { insert: 'Grey', attributes: { color: '#cccccc' } }\n *     ]\n *   }\n *\n */\n\n/**\n  * Attributes that can be assigned to a selection of text.\n  *\n  * @example\n  *   {\n  *     bold: true,\n  *     font-size: '40px'\n  *   }\n  *\n  * @typedef {Object} TextAttributes\n  */\n\n/**\n * @extends YEvent<YText>\n * Event that describes the changes on a YText type.\n */\nclass YTextEvent extends YEvent {\n  /**\n   * @param {YText} ytext\n   * @param {Transaction} transaction\n   * @param {Set<any>} subs The keys that changed\n   */\n  constructor (ytext, transaction, subs) {\n    super(ytext, transaction);\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n    this.childListChanged = false;\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string>}\n     */\n    this.keysChanged = new Set();\n    subs.forEach((sub) => {\n      if (sub === null) {\n        this.childListChanged = true;\n      } else {\n        this.keysChanged.add(sub);\n      }\n    });\n  }\n\n  /**\n   * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string, delete?:number, retain?:number}>}}\n   */\n  get changes () {\n    if (this._changes === null) {\n      /**\n       * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string|AbstractType<any>|object, delete?:number, retain?:number}>}}\n       */\n      const changes = {\n        keys: this.keys,\n        delta: this.delta,\n        added: new Set(),\n        deleted: new Set()\n      };\n      this._changes = changes;\n    }\n    return /** @type {any} */ (this._changes)\n  }\n\n  /**\n   * Compute the changes in the delta format.\n   * A {@link https://quilljs.com/docs/delta/|Quill Delta}) that represents the changes on the document.\n   *\n   * @type {Array<{insert?:string|object|AbstractType<any>, delete?:number, retain?:number, attributes?: Object<string,any>}>}\n   *\n   * @public\n   */\n  get delta () {\n    if (this._delta === null) {\n      const y = /** @type {Doc} */ (this.target.doc);\n      /**\n       * @type {Array<{insert?:string|object|AbstractType<any>, delete?:number, retain?:number, attributes?: Object<string,any>}>}\n       */\n      const delta = [];\n      transact(y, transaction => {\n        const currentAttributes = new Map(); // saves all current attributes for insert\n        const oldAttributes = new Map();\n        let item = this.target._start;\n        /**\n         * @type {string?}\n         */\n        let action = null;\n        /**\n         * @type {Object<string,any>}\n         */\n        const attributes = {}; // counts added or removed new attributes for retain\n        /**\n         * @type {string|object}\n         */\n        let insert = '';\n        let retain = 0;\n        let deleteLen = 0;\n        const addOp = () => {\n          if (action !== null) {\n            /**\n             * @type {any}\n             */\n            let op;\n            switch (action) {\n              case 'delete':\n                op = { delete: deleteLen };\n                deleteLen = 0;\n                break\n              case 'insert':\n                op = { insert };\n                if (currentAttributes.size > 0) {\n                  op.attributes = {};\n                  currentAttributes.forEach((value, key) => {\n                    if (value !== null) {\n                      op.attributes[key] = value;\n                    }\n                  });\n                }\n                insert = '';\n                break\n              case 'retain':\n                op = { retain };\n                if (Object.keys(attributes).length > 0) {\n                  op.attributes = {};\n                  for (const key in attributes) {\n                    op.attributes[key] = attributes[key];\n                  }\n                }\n                retain = 0;\n                break\n            }\n            delta.push(op);\n            action = null;\n          }\n        };\n        while (item !== null) {\n          switch (item.content.constructor) {\n            case ContentType:\n            case ContentEmbed:\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  addOp();\n                  action = 'insert';\n                  insert = item.content.getContent()[0];\n                  addOp();\n                }\n              } else if (this.deletes(item)) {\n                if (action !== 'delete') {\n                  addOp();\n                  action = 'delete';\n                }\n                deleteLen += 1;\n              } else if (!item.deleted) {\n                if (action !== 'retain') {\n                  addOp();\n                  action = 'retain';\n                }\n                retain += 1;\n              }\n              break\n            case ContentString:\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  if (action !== 'insert') {\n                    addOp();\n                    action = 'insert';\n                  }\n                  insert += /** @type {ContentString} */ (item.content).str;\n                }\n              } else if (this.deletes(item)) {\n                if (action !== 'delete') {\n                  addOp();\n                  action = 'delete';\n                }\n                deleteLen += item.length;\n              } else if (!item.deleted) {\n                if (action !== 'retain') {\n                  addOp();\n                  action = 'retain';\n                }\n                retain += item.length;\n              }\n              break\n            case ContentFormat: {\n              const { key, value } = /** @type {ContentFormat} */ (item.content);\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  const curVal = currentAttributes.get(key) || null;\n                  if (!equalAttrs(curVal, value)) {\n                    if (action === 'retain') {\n                      addOp();\n                    }\n                    if (equalAttrs(value, (oldAttributes.get(key) || null))) {\n                      delete attributes[key];\n                    } else {\n                      attributes[key] = value;\n                    }\n                  } else if (value !== null) {\n                    item.delete(transaction);\n                  }\n                }\n              } else if (this.deletes(item)) {\n                oldAttributes.set(key, value);\n                const curVal = currentAttributes.get(key) || null;\n                if (!equalAttrs(curVal, value)) {\n                  if (action === 'retain') {\n                    addOp();\n                  }\n                  attributes[key] = curVal;\n                }\n              } else if (!item.deleted) {\n                oldAttributes.set(key, value);\n                const attr = attributes[key];\n                if (attr !== undefined) {\n                  if (!equalAttrs(attr, value)) {\n                    if (action === 'retain') {\n                      addOp();\n                    }\n                    if (value === null) {\n                      delete attributes[key];\n                    } else {\n                      attributes[key] = value;\n                    }\n                  } else if (attr !== null) { // this will be cleaned up automatically by the contextless cleanup function\n                    item.delete(transaction);\n                  }\n                }\n              }\n              if (!item.deleted) {\n                if (action === 'insert') {\n                  addOp();\n                }\n                updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (item.content));\n              }\n              break\n            }\n          }\n          item = item.right;\n        }\n        addOp();\n        while (delta.length > 0) {\n          const lastOp = delta[delta.length - 1];\n          if (lastOp.retain !== undefined && lastOp.attributes === undefined) {\n            // retain delta's if they don't assign attributes\n            delta.pop();\n          } else {\n            break\n          }\n        }\n      });\n      this._delta = delta;\n    }\n    return /** @type {any} */ (this._delta)\n  }\n}\n\n/**\n * Type that represents text with formatting information.\n *\n * This type replaces y-richtext as this implementation is able to handle\n * block formats (format information on a paragraph), embeds (complex elements\n * like pictures and videos), and text formats (**bold**, *italic*).\n *\n * @extends AbstractType<YTextEvent>\n */\nclass YText extends AbstractType {\n  /**\n   * @param {String} [string] The initial value of the YText.\n   */\n  constructor (string) {\n    super();\n    /**\n     * Array of pending operations on this type\n     * @type {Array<function():void>?}\n     */\n    this._pending = string !== undefined ? [() => this.insert(0, string)] : [];\n    /**\n     * @type {Array<ArraySearchMarker>}\n     */\n    this._searchMarker = [];\n  }\n\n  /**\n   * Number of characters of this text type.\n   *\n   * @type {number}\n   */\n  get length () {\n    return this._length\n  }\n\n  /**\n   * @param {Doc} y\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item);\n    try {\n      /** @type {Array<function>} */ (this._pending).forEach(f => f());\n    } catch (e) {\n      console.error(e);\n    }\n    this._pending = null;\n  }\n\n  _copy () {\n    return new YText()\n  }\n\n  /**\n   * @return {YText}\n   */\n  clone () {\n    const text = new YText();\n    text.applyDelta(this.toDelta());\n    return text\n  }\n\n  /**\n   * Creates YTextEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    super._callObserver(transaction, parentSubs);\n    const event = new YTextEvent(this, transaction, parentSubs);\n    const doc = transaction.doc;\n    callTypeObservers(this, transaction, event);\n    // If a remote change happened, we try to cleanup potential formatting duplicates.\n    if (!transaction.local) {\n      // check if another formatting item was inserted\n      let foundFormattingItem = false;\n      for (const [client, afterClock] of transaction.afterState.entries()) {\n        const clock = transaction.beforeState.get(client) || 0;\n        if (afterClock === clock) {\n          continue\n        }\n        iterateStructs(transaction, /** @type {Array<Item|GC>} */ (doc.store.clients.get(client)), clock, afterClock, item => {\n          if (!item.deleted && /** @type {Item} */ (item).content.constructor === ContentFormat) {\n            foundFormattingItem = true;\n          }\n        });\n        if (foundFormattingItem) {\n          break\n        }\n      }\n      if (!foundFormattingItem) {\n        iterateDeletedStructs(transaction, transaction.deleteSet, item => {\n          if (item instanceof GC || foundFormattingItem) {\n            return\n          }\n          if (item.parent === this && item.content.constructor === ContentFormat) {\n            foundFormattingItem = true;\n          }\n        });\n      }\n      transact(doc, (t) => {\n        if (foundFormattingItem) {\n          // If a formatting item was inserted, we simply clean the whole type.\n          // We need to compute currentAttributes for the current position anyway.\n          cleanupYTextFormatting(this);\n        } else {\n          // If no formatting attribute was inserted, we can make due with contextless\n          // formatting cleanups.\n          // Contextless: it is not necessary to compute currentAttributes for the affected position.\n          iterateDeletedStructs(t, t.deleteSet, item => {\n            if (item instanceof GC) {\n              return\n            }\n            if (item.parent === this) {\n              cleanupContextlessFormattingGap(t, item);\n            }\n          });\n        }\n      });\n    }\n  }\n\n  /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @public\n   */\n  toString () {\n    let str = '';\n    /**\n     * @type {Item|null}\n     */\n    let n = this._start;\n    while (n !== null) {\n      if (!n.deleted && n.countable && n.content.constructor === ContentString) {\n        str += /** @type {ContentString} */ (n.content).str;\n      }\n      n = n.right;\n    }\n    return str\n  }\n\n  /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @return {string}\n   * @public\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Apply a {@link Delta} on this shared YText type.\n   *\n   * @param {any} delta The changes to apply on this element.\n   * @param {object}  opts\n   * @param {boolean} [opts.sanitize] Sanitize input delta. Removes ending newlines if set to true.\n   *\n   *\n   * @public\n   */\n  applyDelta (delta, { sanitize = true } = {}) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        const currPos = new ItemTextListPosition(null, this._start, 0, new Map());\n        for (let i = 0; i < delta.length; i++) {\n          const op = delta[i];\n          if (op.insert !== undefined) {\n            // Quill assumes that the content starts with an empty paragraph.\n            // Yjs/Y.Text assumes that it starts empty. We always hide that\n            // there is a newline at the end of the content.\n            // If we omit this step, clients will see a different number of\n            // paragraphs, but nothing bad will happen.\n            const ins = (!sanitize && typeof op.insert === 'string' && i === delta.length - 1 && currPos.right === null && op.insert.slice(-1) === '\\n') ? op.insert.slice(0, -1) : op.insert;\n            if (typeof ins !== 'string' || ins.length > 0) {\n              insertText(transaction, this, currPos, ins, op.attributes || {});\n            }\n          } else if (op.retain !== undefined) {\n            formatText(transaction, this, currPos, op.retain, op.attributes || {});\n          } else if (op.delete !== undefined) {\n            deleteText(transaction, currPos, op.delete);\n          }\n        }\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.applyDelta(delta));\n    }\n  }\n\n  /**\n   * Returns the Delta representation of this YText type.\n   *\n   * @param {Snapshot} [snapshot]\n   * @param {Snapshot} [prevSnapshot]\n   * @param {function('removed' | 'added', ID):any} [computeYChange]\n   * @return {any} The Delta representation of this type.\n   *\n   * @public\n   */\n  toDelta (snapshot, prevSnapshot, computeYChange) {\n    /**\n     * @type{Array<any>}\n     */\n    const ops = [];\n    const currentAttributes = new Map();\n    const doc = /** @type {Doc} */ (this.doc);\n    let str = '';\n    let n = this._start;\n    function packStr () {\n      if (str.length > 0) {\n        // pack str with attributes to ops\n        /**\n         * @type {Object<string,any>}\n         */\n        const attributes = {};\n        let addAttributes = false;\n        currentAttributes.forEach((value, key) => {\n          addAttributes = true;\n          attributes[key] = value;\n        });\n        /**\n         * @type {Object<string,any>}\n         */\n        const op = { insert: str };\n        if (addAttributes) {\n          op.attributes = attributes;\n        }\n        ops.push(op);\n        str = '';\n      }\n    }\n    // snapshots are merged again after the transaction, so we need to keep the\n    // transalive until we are done\n    transact(doc, transaction => {\n      if (snapshot) {\n        splitSnapshotAffectedStructs(transaction, snapshot);\n      }\n      if (prevSnapshot) {\n        splitSnapshotAffectedStructs(transaction, prevSnapshot);\n      }\n      while (n !== null) {\n        if (isVisible(n, snapshot) || (prevSnapshot !== undefined && isVisible(n, prevSnapshot))) {\n          switch (n.content.constructor) {\n            case ContentString: {\n              const cur = currentAttributes.get('ychange');\n              if (snapshot !== undefined && !isVisible(n, snapshot)) {\n                if (cur === undefined || cur.user !== n.id.client || cur.type !== 'removed') {\n                  packStr();\n                  currentAttributes.set('ychange', computeYChange ? computeYChange('removed', n.id) : { type: 'removed' });\n                }\n              } else if (prevSnapshot !== undefined && !isVisible(n, prevSnapshot)) {\n                if (cur === undefined || cur.user !== n.id.client || cur.type !== 'added') {\n                  packStr();\n                  currentAttributes.set('ychange', computeYChange ? computeYChange('added', n.id) : { type: 'added' });\n                }\n              } else if (cur !== undefined) {\n                packStr();\n                currentAttributes.delete('ychange');\n              }\n              str += /** @type {ContentString} */ (n.content).str;\n              break\n            }\n            case ContentType:\n            case ContentEmbed: {\n              packStr();\n              /**\n               * @type {Object<string,any>}\n               */\n              const op = {\n                insert: n.content.getContent()[0]\n              };\n              if (currentAttributes.size > 0) {\n                const attrs = /** @type {Object<string,any>} */ ({});\n                op.attributes = attrs;\n                currentAttributes.forEach((value, key) => {\n                  attrs[key] = value;\n                });\n              }\n              ops.push(op);\n              break\n            }\n            case ContentFormat:\n              if (isVisible(n, snapshot)) {\n                packStr();\n                updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (n.content));\n              }\n              break\n          }\n        }\n        n = n.right;\n      }\n      packStr();\n    }, 'cleanup');\n    return ops\n  }\n\n  /**\n   * Insert text at a given index.\n   *\n   * @param {number} index The index at which to start inserting.\n   * @param {String} text The text to insert at the specified position.\n   * @param {TextAttributes} [attributes] Optionally define some formatting\n   *                                    information to apply on the inserted\n   *                                    Text.\n   * @public\n   */\n  insert (index, text, attributes) {\n    if (text.length <= 0) {\n      return\n    }\n    const y = this.doc;\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index);\n        if (!attributes) {\n          attributes = {};\n          // @ts-ignore\n          pos.currentAttributes.forEach((v, k) => { attributes[k] = v; });\n        }\n        insertText(transaction, this, pos, text, attributes);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.insert(index, text, attributes));\n    }\n  }\n\n  /**\n   * Inserts an embed at a index.\n   *\n   * @param {number} index The index to insert the embed at.\n   * @param {Object | AbstractType<any>} embed The Object that represents the embed.\n   * @param {TextAttributes} attributes Attribute information to apply on the\n   *                                    embed\n   *\n   * @public\n   */\n  insertEmbed (index, embed, attributes = {}) {\n    const y = this.doc;\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index);\n        insertText(transaction, this, pos, embed, attributes);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.insertEmbed(index, embed, attributes));\n    }\n  }\n\n  /**\n   * Deletes text starting from an index.\n   *\n   * @param {number} index Index at which to start deleting.\n   * @param {number} length The number of characters to remove. Defaults to 1.\n   *\n   * @public\n   */\n  delete (index, length) {\n    if (length === 0) {\n      return\n    }\n    const y = this.doc;\n    if (y !== null) {\n      transact(y, transaction => {\n        deleteText(transaction, findPosition(transaction, this, index), length);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.delete(index, length));\n    }\n  }\n\n  /**\n   * Assigns properties to a range of text.\n   *\n   * @param {number} index The position where to start formatting.\n   * @param {number} length The amount of characters to assign properties to.\n   * @param {TextAttributes} attributes Attribute information to apply on the\n   *                                    text.\n   *\n   * @public\n   */\n  format (index, length, attributes) {\n    if (length === 0) {\n      return\n    }\n    const y = this.doc;\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index);\n        if (pos.right === null) {\n          return\n        }\n        formatText(transaction, this, pos, length, attributes);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.format(index, length, attributes));\n    }\n  }\n\n  /**\n   * Removes an attribute.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that is to be removed.\n   *\n   * @public\n   */\n  removeAttribute (attributeName) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, attributeName);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.removeAttribute(attributeName));\n    }\n  }\n\n  /**\n   * Sets or updates an attribute.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that is to be set.\n   * @param {any} attributeValue The attribute value that is to be set.\n   *\n   * @public\n   */\n  setAttribute (attributeName, attributeValue) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, attributeName, attributeValue);\n      });\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.setAttribute(attributeName, attributeValue));\n    }\n  }\n\n  /**\n   * Returns an attribute value that belongs to the attribute name.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that identifies the\n   *                               queried value.\n   * @return {any} The queried attribute value.\n   *\n   * @public\n   */\n  getAttribute (attributeName) {\n    return /** @type {any} */ (typeMapGet(this, attributeName))\n  }\n\n  /**\n   * Returns all attribute name/value pairs in a JSON Object.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @return {Object<string, any>} A JSON Object that describes the attributes.\n   *\n   * @public\n   */\n  getAttributes () {\n    return typeMapGetAll(this)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YTextRefID);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} _decoder\n * @return {YText}\n *\n * @private\n * @function\n */\nconst readYText = _decoder => new YText();\n\n/**\n * @module YXml\n */\n\n/**\n * Define the elements to which a set of CSS queries apply.\n * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}\n *\n * @example\n *   query = '.classSelector'\n *   query = 'nodeSelector'\n *   query = '#idSelector'\n *\n * @typedef {string} CSS_Selector\n */\n\n/**\n * Dom filter function.\n *\n * @callback domFilter\n * @param {string} nodeName The nodeName of the element\n * @param {Map} attributes The map of attributes.\n * @return {boolean} Whether to include the Dom node in the YXmlElement.\n */\n\n/**\n * Represents a subset of the nodes of a YXmlElement / YXmlFragment and a\n * position within them.\n *\n * Can be created with {@link YXmlFragment#createTreeWalker}\n *\n * @public\n * @implements {Iterable<YXmlElement|YXmlText|YXmlElement|YXmlHook>}\n */\nclass YXmlTreeWalker {\n  /**\n   * @param {YXmlFragment | YXmlElement} root\n   * @param {function(AbstractType<any>):boolean} [f]\n   */\n  constructor (root, f = () => true) {\n    this._filter = f;\n    this._root = root;\n    /**\n     * @type {Item}\n     */\n    this._currentNode = /** @type {Item} */ (root._start);\n    this._firstCall = true;\n  }\n\n  [Symbol.iterator] () {\n    return this\n  }\n\n  /**\n   * Get the next node.\n   *\n   * @return {IteratorResult<YXmlElement|YXmlText|YXmlHook>} The next node.\n   *\n   * @public\n   */\n  next () {\n    /**\n     * @type {Item|null}\n     */\n    let n = this._currentNode;\n    let type = n && n.content && /** @type {any} */ (n.content).type;\n    if (n !== null && (!this._firstCall || n.deleted || !this._filter(type))) { // if first call, we check if we can use the first item\n      do {\n        type = /** @type {any} */ (n.content).type;\n        if (!n.deleted && (type.constructor === YXmlElement || type.constructor === YXmlFragment) && type._start !== null) {\n          // walk down in the tree\n          n = type._start;\n        } else {\n          // walk right or up in the tree\n          while (n !== null) {\n            if (n.right !== null) {\n              n = n.right;\n              break\n            } else if (n.parent === this._root) {\n              n = null;\n            } else {\n              n = /** @type {AbstractType<any>} */ (n.parent)._item;\n            }\n          }\n        }\n      } while (n !== null && (n.deleted || !this._filter(/** @type {ContentType} */ (n.content).type)))\n    }\n    this._firstCall = false;\n    if (n === null) {\n      // @ts-ignore\n      return { value: undefined, done: true }\n    }\n    this._currentNode = n;\n    return { value: /** @type {any} */ (n.content).type, done: false }\n  }\n}\n\n/**\n * Represents a list of {@link YXmlElement}.and {@link YXmlText} types.\n * A YxmlFragment is similar to a {@link YXmlElement}, but it does not have a\n * nodeName and it does not have attributes. Though it can be bound to a DOM\n * element - in this case the attributes and the nodeName are not shared.\n *\n * @public\n * @extends AbstractType<YXmlEvent>\n */\nclass YXmlFragment extends AbstractType {\n  constructor () {\n    super();\n    /**\n     * @type {Array<any>|null}\n     */\n    this._prelimContent = [];\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get firstChild () {\n    const first = this._first;\n    return first ? first.content.getContent()[0] : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item);\n    this.insert(0, /** @type {Array<any>} */ (this._prelimContent));\n    this._prelimContent = null;\n  }\n\n  _copy () {\n    return new YXmlFragment()\n  }\n\n  /**\n   * @return {YXmlFragment}\n   */\n  clone () {\n    const el = new YXmlFragment();\n    // @ts-ignore\n    el.insert(0, this.toArray().map(item => item instanceof AbstractType ? item.clone() : item));\n    return el\n  }\n\n  get length () {\n    return this._prelimContent === null ? this._length : this._prelimContent.length\n  }\n\n  /**\n   * Create a subtree of childNodes.\n   *\n   * @example\n   * const walker = elem.createTreeWalker(dom => dom.nodeName === 'div')\n   * for (let node in walker) {\n   *   // `node` is a div node\n   *   nop(node)\n   * }\n   *\n   * @param {function(AbstractType<any>):boolean} filter Function that is called on each child element and\n   *                          returns a Boolean indicating whether the child\n   *                          is to be included in the subtree.\n   * @return {YXmlTreeWalker} A subtree and a position within it.\n   *\n   * @public\n   */\n  createTreeWalker (filter) {\n    return new YXmlTreeWalker(this, filter)\n  }\n\n  /**\n   * Returns the first YXmlElement that matches the query.\n   * Similar to DOM's {@link querySelector}.\n   *\n   * Query support:\n   *   - tagname\n   * TODO:\n   *   - id\n   *   - attribute\n   *\n   * @param {CSS_Selector} query The query on the children.\n   * @return {YXmlElement|YXmlText|YXmlHook|null} The first element that matches the query or null.\n   *\n   * @public\n   */\n  querySelector (query) {\n    query = query.toUpperCase();\n    // @ts-ignore\n    const iterator = new YXmlTreeWalker(this, element => element.nodeName && element.nodeName.toUpperCase() === query);\n    const next = iterator.next();\n    if (next.done) {\n      return null\n    } else {\n      return next.value\n    }\n  }\n\n  /**\n   * Returns all YXmlElements that match the query.\n   * Similar to Dom's {@link querySelectorAll}.\n   *\n   * @todo Does not yet support all queries. Currently only query by tagName.\n   *\n   * @param {CSS_Selector} query The query on the children\n   * @return {Array<YXmlElement|YXmlText|YXmlHook|null>} The elements that match this query.\n   *\n   * @public\n   */\n  querySelectorAll (query) {\n    query = query.toUpperCase();\n    // @ts-ignore\n    return Array.from(new YXmlTreeWalker(this, element => element.nodeName && element.nodeName.toUpperCase() === query))\n  }\n\n  /**\n   * Creates YXmlEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YXmlEvent(this, parentSubs, transaction));\n  }\n\n  /**\n   * Get the string representation of all the children of this YXmlFragment.\n   *\n   * @return {string} The string representation of all children.\n   */\n  toString () {\n    return typeListMap(this, xml => xml.toString()).join('')\n  }\n\n  /**\n   * @return {string}\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const fragment = _document.createDocumentFragment();\n    if (binding !== undefined) {\n      binding._createAssociation(fragment, this);\n    }\n    typeListForEach(this, xmlType => {\n      fragment.insertBefore(xmlType.toDOM(_document, hooks, binding), null);\n    });\n    return fragment\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  xml.insert(0, [new Y.XmlText('text')])\n   *\n   * @param {number} index The index to insert content at\n   * @param {Array<YXmlElement|YXmlText>} content The array of content\n   */\n  insert (index, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListInsertGenerics(transaction, this, index, content);\n      });\n    } else {\n      // @ts-ignore _prelimContent is defined because this is not yet integrated\n      this._prelimContent.splice(index, 0, ...content);\n    }\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  xml.insert(0, [new Y.XmlText('text')])\n   *\n   * @param {null|Item|YXmlElement|YXmlText} ref The index to insert content at\n   * @param {Array<YXmlElement|YXmlText>} content The array of content\n   */\n  insertAfter (ref, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        const refItem = (ref && ref instanceof AbstractType) ? ref._item : ref;\n        typeListInsertGenericsAfter(transaction, this, refItem, content);\n      });\n    } else {\n      const pc = /** @type {Array<any>} */ (this._prelimContent);\n      const index = ref === null ? 0 : pc.findIndex(el => el === ref) + 1;\n      if (index === 0 && ref !== null) {\n        throw error.create('Reference item not found')\n      }\n      pc.splice(index, 0, ...content);\n    }\n  }\n\n  /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} [length=1] The number of elements to remove. Defaults to 1.\n   */\n  delete (index, length = 1) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListDelete(transaction, this, index, length);\n      });\n    } else {\n      // @ts-ignore _prelimContent is defined because this is not yet integrated\n      this._prelimContent.splice(index, length);\n    }\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<YXmlElement|YXmlText|YXmlHook>}\n   */\n  toArray () {\n    return typeListToArray(this)\n  }\n\n  /**\n   * Appends content to this YArray.\n   *\n   * @param {Array<YXmlElement|YXmlText>} content Array of content to append.\n   */\n  push (content) {\n    this.insert(this.length, content);\n  }\n\n  /**\n   * Preppends content to this YArray.\n   *\n   * @param {Array<YXmlElement|YXmlText>} content Array of content to preppend.\n   */\n  unshift (content) {\n    this.insert(0, content);\n  }\n\n  /**\n   * Returns the i-th element from a YArray.\n   *\n   * @param {number} index The index of the element to return from the YArray\n   * @return {YXmlElement|YXmlText}\n   */\n  get (index) {\n    return typeListGet(this, index)\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @return {Array<YXmlElement|YXmlText>}\n   */\n  slice (start = 0, end = this.length) {\n    return typeListSlice(this, start, end)\n  }\n\n  /**\n   * Executes a provided function on once on overy child element.\n   *\n   * @param {function(YXmlElement|YXmlText,number, typeof self):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    typeListForEach(this, f);\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlFragmentRefID);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} _decoder\n * @return {YXmlFragment}\n *\n * @private\n * @function\n */\nconst readYXmlFragment = _decoder => new YXmlFragment();\n\n/**\n * An YXmlElement imitates the behavior of a\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}.\n *\n * * An YXmlElement has attributes (key value pairs)\n * * An YXmlElement has childElements that must inherit from YXmlElement\n */\nclass YXmlElement extends YXmlFragment {\n  constructor (nodeName = 'UNDEFINED') {\n    super();\n    this.nodeName = nodeName;\n    /**\n     * @type {Map<string, any>|null}\n     */\n    this._prelimAttrs = new Map();\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get nextSibling () {\n    const n = this._item ? this._item.next : null;\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get prevSibling () {\n    const n = this._item ? this._item.prev : null;\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    ;(/** @type {Map<string, any>} */ (this._prelimAttrs)).forEach((value, key) => {\n      this.setAttribute(key, value);\n    });\n    this._prelimAttrs = null;\n  }\n\n  /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   *\n   * @return {YXmlElement}\n   */\n  _copy () {\n    return new YXmlElement(this.nodeName)\n  }\n\n  /**\n   * @return {YXmlElement}\n   */\n  clone () {\n    const el = new YXmlElement(this.nodeName);\n    const attrs = this.getAttributes();\n    for (const key in attrs) {\n      el.setAttribute(key, attrs[key]);\n    }\n    // @ts-ignore\n    el.insert(0, this.toArray().map(item => item instanceof AbstractType ? item.clone() : item));\n    return el\n  }\n\n  /**\n   * Returns the XML serialization of this YXmlElement.\n   * The attributes are ordered by attribute-name, so you can easily use this\n   * method to compare YXmlElements\n   *\n   * @return {string} The string representation of this type.\n   *\n   * @public\n   */\n  toString () {\n    const attrs = this.getAttributes();\n    const stringBuilder = [];\n    const keys = [];\n    for (const key in attrs) {\n      keys.push(key);\n    }\n    keys.sort();\n    const keysLen = keys.length;\n    for (let i = 0; i < keysLen; i++) {\n      const key = keys[i];\n      stringBuilder.push(key + '=\"' + attrs[key] + '\"');\n    }\n    const nodeName = this.nodeName.toLocaleLowerCase();\n    const attrsString = stringBuilder.length > 0 ? ' ' + stringBuilder.join(' ') : '';\n    return `<${nodeName}${attrsString}>${super.toString()}</${nodeName}>`\n  }\n\n  /**\n   * Removes an attribute from this YXmlElement.\n   *\n   * @param {String} attributeName The attribute name that is to be removed.\n   *\n   * @public\n   */\n  removeAttribute (attributeName) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, attributeName);\n      });\n    } else {\n      /** @type {Map<string,any>} */ (this._prelimAttrs).delete(attributeName);\n    }\n  }\n\n  /**\n   * Sets or updates an attribute.\n   *\n   * @param {String} attributeName The attribute name that is to be set.\n   * @param {String} attributeValue The attribute value that is to be set.\n   *\n   * @public\n   */\n  setAttribute (attributeName, attributeValue) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, attributeName, attributeValue);\n      });\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimAttrs).set(attributeName, attributeValue);\n    }\n  }\n\n  /**\n   * Returns an attribute value that belongs to the attribute name.\n   *\n   * @param {String} attributeName The attribute name that identifies the\n   *                               queried value.\n   * @return {String} The queried attribute value.\n   *\n   * @public\n   */\n  getAttribute (attributeName) {\n    return /** @type {any} */ (typeMapGet(this, attributeName))\n  }\n\n  /**\n   * Returns whether an attribute exists\n   *\n   * @param {String} attributeName The attribute name to check for existence.\n   * @return {boolean} whether the attribute exists.\n   *\n   * @public\n   */\n  hasAttribute (attributeName) {\n    return /** @type {any} */ (typeMapHas(this, attributeName))\n  }\n\n  /**\n   * Returns all attribute name/value pairs in a JSON Object.\n   *\n   * @return {Object<string, any>} A JSON Object that describes the attributes.\n   *\n   * @public\n   */\n  getAttributes () {\n    return typeMapGetAll(this)\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const dom = _document.createElement(this.nodeName);\n    const attrs = this.getAttributes();\n    for (const key in attrs) {\n      dom.setAttribute(key, attrs[key]);\n    }\n    typeListForEach(this, yxml => {\n      dom.appendChild(yxml.toDOM(_document, hooks, binding));\n    });\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this);\n    }\n    return dom\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlElementRefID);\n    encoder.writeKey(this.nodeName);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlElement}\n *\n * @function\n */\nconst readYXmlElement = decoder => new YXmlElement(decoder.readKey());\n\n/**\n * @extends YEvent<YXmlElement|YXmlText|YXmlFragment>\n * An Event that describes changes on a YXml Element or Yxml Fragment\n */\nclass YXmlEvent extends YEvent {\n  /**\n   * @param {YXmlElement|YXmlText|YXmlFragment} target The target on which the event is created.\n   * @param {Set<string|null>} subs The set of changed attributes. `null` is included if the\n   *                   child list changed.\n   * @param {Transaction} transaction The transaction instance with wich the\n   *                                  change was created.\n   */\n  constructor (target, subs, transaction) {\n    super(target, transaction);\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n    this.childListChanged = false;\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string>}\n     */\n    this.attributesChanged = new Set();\n    subs.forEach((sub) => {\n      if (sub === null) {\n        this.childListChanged = true;\n      } else {\n        this.attributesChanged.add(sub);\n      }\n    });\n  }\n}\n\n/**\n * You can manage binding to a custom type with YXmlHook.\n *\n * @extends {YMap<any>}\n */\nclass YXmlHook extends YMap {\n  /**\n   * @param {string} hookName nodeName of the Dom Node.\n   */\n  constructor (hookName) {\n    super();\n    /**\n     * @type {string}\n     */\n    this.hookName = hookName;\n  }\n\n  /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   */\n  _copy () {\n    return new YXmlHook(this.hookName)\n  }\n\n  /**\n   * @return {YXmlHook}\n   */\n  clone () {\n    const el = new YXmlHook(this.hookName);\n    this.forEach((value, key) => {\n      el.set(key, value);\n    });\n    return el\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object.<string, any>} [hooks] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type\n   * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const hook = hooks[this.hookName];\n    let dom;\n    if (hook !== undefined) {\n      dom = hook.createDom(this);\n    } else {\n      dom = document.createElement(this.hookName);\n    }\n    dom.setAttribute('data-yjs-hook', this.hookName);\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this);\n    }\n    return dom\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlHookRefID);\n    encoder.writeKey(this.hookName);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlHook}\n *\n * @private\n * @function\n */\nconst readYXmlHook = decoder =>\n  new YXmlHook(decoder.readKey());\n\n/**\n * Represents text in a Dom Element. In the future this type will also handle\n * simple formatting information like bold and italic.\n */\nclass YXmlText extends YText {\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get nextSibling () {\n    const n = this._item ? this._item.next : null;\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get prevSibling () {\n    const n = this._item ? this._item.prev : null;\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  _copy () {\n    return new YXmlText()\n  }\n\n  /**\n   * @return {YXmlText}\n   */\n  clone () {\n    const text = new YXmlText();\n    text.applyDelta(this.toDelta());\n    return text\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlText.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Text} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks, binding) {\n    const dom = _document.createTextNode(this.toString());\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this);\n    }\n    return dom\n  }\n\n  toString () {\n    // @ts-ignore\n    return this.toDelta().map(delta => {\n      const nestedNodes = [];\n      for (const nodeName in delta.attributes) {\n        const attrs = [];\n        for (const key in delta.attributes[nodeName]) {\n          attrs.push({ key, value: delta.attributes[nodeName][key] });\n        }\n        // sort attributes to get a unique order\n        attrs.sort((a, b) => a.key < b.key ? -1 : 1);\n        nestedNodes.push({ nodeName, attrs });\n      }\n      // sort node order to get a unique order\n      nestedNodes.sort((a, b) => a.nodeName < b.nodeName ? -1 : 1);\n      // now convert to dom string\n      let str = '';\n      for (let i = 0; i < nestedNodes.length; i++) {\n        const node = nestedNodes[i];\n        str += `<${node.nodeName}`;\n        for (let j = 0; j < node.attrs.length; j++) {\n          const attr = node.attrs[j];\n          str += ` ${attr.key}=\"${attr.value}\"`;\n        }\n        str += '>';\n      }\n      str += delta.insert;\n      for (let i = nestedNodes.length - 1; i >= 0; i--) {\n        str += `</${nestedNodes[i].nodeName}>`;\n      }\n      return str\n    }).join('')\n  }\n\n  /**\n   * @return {string}\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlTextRefID);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlText}\n *\n * @private\n * @function\n */\nconst readYXmlText = decoder => new YXmlText();\n\nclass AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {number} length\n   */\n  constructor (id, length) {\n    this.id = id;\n    this.length = length;\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get deleted () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * Merge this struct with the item to the right.\n   * This method is already assuming that `this.id.clock + this.length === this.id.clock`.\n   * Also this method does *not* remove right from StructStore!\n   * @param {AbstractStruct} right\n   * @return {boolean} wether this merged with right\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   * @param {number} offset\n   * @param {number} encodingRef\n   */\n  write (encoder, offset, encodingRef) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    throw error.methodUnimplemented()\n  }\n}\n\nconst structGCRefNumber = 0;\n\n/**\n * @private\n */\nclass GC extends AbstractStruct {\n  get deleted () {\n    return true\n  }\n\n  delete () {}\n\n  /**\n   * @param {GC} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (this.constructor !== right.constructor) {\n      return false\n    }\n    this.length += right.length;\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    if (offset > 0) {\n      this.id.clock += offset;\n      this.length -= offset;\n    }\n    addStruct(transaction.doc.store, this);\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeInfo(structGCRefNumber);\n    encoder.writeLen(this.length - offset);\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    return null\n  }\n}\n\nclass ContentBinary {\n  /**\n   * @param {Uint8Array} content\n   */\n  constructor (content) {\n    this.content = content;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.content]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentBinary}\n   */\n  copy () {\n    return new ContentBinary(this.content)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentBinary}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentBinary} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeBuf(this.content);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 3\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2 } decoder\n * @return {ContentBinary}\n */\nconst readContentBinary = decoder => new ContentBinary(decoder.readBuf());\n\nclass ContentDeleted {\n  /**\n   * @param {number} len\n   */\n  constructor (len) {\n    this.len = len;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.len\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return []\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return false\n  }\n\n  /**\n   * @return {ContentDeleted}\n   */\n  copy () {\n    return new ContentDeleted(this.len)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentDeleted}\n   */\n  splice (offset) {\n    const right = new ContentDeleted(this.len - offset);\n    this.len = offset;\n    return right\n  }\n\n  /**\n   * @param {ContentDeleted} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.len += right.len;\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    addToDeleteSet(transaction.deleteSet, item.id.client, item.id.clock, this.len);\n    item.markDeleted();\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeLen(this.len - offset);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 1\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2 } decoder\n * @return {ContentDeleted}\n */\nconst readContentDeleted = decoder => new ContentDeleted(decoder.readLen());\n\n/**\n * @param {string} guid\n * @param {Object<string, any>} opts\n */\nconst createDocFromOpts = (guid, opts) => new Doc({ guid, ...opts, shouldLoad: opts.shouldLoad || opts.autoLoad || false });\n\n/**\n * @private\n */\nclass ContentDoc {\n  /**\n   * @param {Doc} doc\n   */\n  constructor (doc) {\n    if (doc._item) {\n      console.error('This document was already integrated as a sub-document. You should create a second instance instead with the same guid.');\n    }\n    /**\n     * @type {Doc}\n     */\n    this.doc = doc;\n    /**\n     * @type {any}\n     */\n    const opts = {};\n    this.opts = opts;\n    if (!doc.gc) {\n      opts.gc = false;\n    }\n    if (doc.autoLoad) {\n      opts.autoLoad = true;\n    }\n    if (doc.meta !== null) {\n      opts.meta = doc.meta;\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.doc]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentDoc}\n   */\n  copy () {\n    return new ContentDoc(createDocFromOpts(this.doc.guid, this.opts))\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentDoc}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentDoc} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    // this needs to be reflected in doc.destroy as well\n    this.doc._item = item;\n    transaction.subdocsAdded.add(this.doc);\n    if (this.doc.shouldLoad) {\n      transaction.subdocsLoaded.add(this.doc);\n    }\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    if (transaction.subdocsAdded.has(this.doc)) {\n      transaction.subdocsAdded.delete(this.doc);\n    } else {\n      transaction.subdocsRemoved.add(this.doc);\n    }\n  }\n\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) { }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeString(this.doc.guid);\n    encoder.writeAny(this.opts);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 9\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentDoc}\n */\nconst readContentDoc = decoder => new ContentDoc(createDocFromOpts(decoder.readString(), decoder.readAny()));\n\n/**\n * @private\n */\nclass ContentEmbed {\n  /**\n   * @param {Object} embed\n   */\n  constructor (embed) {\n    this.embed = embed;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.embed]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentEmbed}\n   */\n  copy () {\n    return new ContentEmbed(this.embed)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentEmbed}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentEmbed} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeJSON(this.embed);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 5\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentEmbed}\n */\nconst readContentEmbed = decoder => new ContentEmbed(decoder.readJSON());\n\n/**\n * @private\n */\nclass ContentFormat {\n  /**\n   * @param {string} key\n   * @param {Object} value\n   */\n  constructor (key, value) {\n    this.key = key;\n    this.value = value;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return []\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return false\n  }\n\n  /**\n   * @return {ContentFormat}\n   */\n  copy () {\n    return new ContentFormat(this.key, this.value)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentFormat}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentFormat} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    // @todo searchmarker are currently unsupported for rich text documents\n    /** @type {AbstractType<any>} */ (item.parent)._searchMarker = null;\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeKey(this.key);\n    encoder.writeJSON(this.value);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 6\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentFormat}\n */\nconst readContentFormat = decoder => new ContentFormat(decoder.readKey(), decoder.readJSON());\n\n/**\n * @private\n */\nclass ContentJSON {\n  /**\n   * @param {Array<any>} arr\n   */\n  constructor (arr) {\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.arr.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.arr\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentJSON}\n   */\n  copy () {\n    return new ContentJSON(this.arr)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentJSON}\n   */\n  splice (offset) {\n    const right = new ContentJSON(this.arr.slice(offset));\n    this.arr = this.arr.slice(0, offset);\n    return right\n  }\n\n  /**\n   * @param {ContentJSON} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.arr = this.arr.concat(right.arr);\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const len = this.arr.length;\n    encoder.writeLen(len - offset);\n    for (let i = offset; i < len; i++) {\n      const c = this.arr[i];\n      encoder.writeString(c === undefined ? 'undefined' : JSON.stringify(c));\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 2\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentJSON}\n */\nconst readContentJSON = decoder => {\n  const len = decoder.readLen();\n  const cs = [];\n  for (let i = 0; i < len; i++) {\n    const c = decoder.readString();\n    if (c === 'undefined') {\n      cs.push(undefined);\n    } else {\n      cs.push(JSON.parse(c));\n    }\n  }\n  return new ContentJSON(cs)\n};\n\nclass ContentAny {\n  /**\n   * @param {Array<any>} arr\n   */\n  constructor (arr) {\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.arr.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.arr\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentAny}\n   */\n  copy () {\n    return new ContentAny(this.arr)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentAny}\n   */\n  splice (offset) {\n    const right = new ContentAny(this.arr.slice(offset));\n    this.arr = this.arr.slice(0, offset);\n    return right\n  }\n\n  /**\n   * @param {ContentAny} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.arr = this.arr.concat(right.arr);\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const len = this.arr.length;\n    encoder.writeLen(len - offset);\n    for (let i = offset; i < len; i++) {\n      const c = this.arr[i];\n      encoder.writeAny(c);\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 8\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentAny}\n */\nconst readContentAny = decoder => {\n  const len = decoder.readLen();\n  const cs = [];\n  for (let i = 0; i < len; i++) {\n    cs.push(decoder.readAny());\n  }\n  return new ContentAny(cs)\n};\n\n/**\n * @private\n */\nclass ContentString {\n  /**\n   * @param {string} str\n   */\n  constructor (str) {\n    /**\n     * @type {string}\n     */\n    this.str = str;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.str.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.str.split('')\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentString}\n   */\n  copy () {\n    return new ContentString(this.str)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentString}\n   */\n  splice (offset) {\n    const right = new ContentString(this.str.slice(offset));\n    this.str = this.str.slice(0, offset);\n\n    // Prevent encoding invalid documents because of splitting of surrogate pairs: https://github.com/yjs/yjs/issues/248\n    const firstCharCode = this.str.charCodeAt(offset - 1);\n    if (firstCharCode >= 0xD800 && firstCharCode <= 0xDBFF) {\n      // Last character of the left split is the start of a surrogate utf16/ucs2 pair.\n      // We don't support splitting of surrogate pairs because this may lead to invalid documents.\n      // Replace the invalid character with a unicode replacement character (� / U+FFFD)\n      this.str = this.str.slice(0, offset - 1) + '�';\n      // replace right as well\n      right.str = '�' + right.str.slice(1);\n    }\n    return right\n  }\n\n  /**\n   * @param {ContentString} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.str += right.str;\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeString(offset === 0 ? this.str : this.str.slice(offset));\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 4\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentString}\n */\nconst readContentString = decoder => new ContentString(decoder.readString());\n\n/**\n * @type {Array<function(UpdateDecoderV1 | UpdateDecoderV2):AbstractType<any>>}\n * @private\n */\nconst typeRefs = [\n  readYArray,\n  readYMap,\n  readYText,\n  readYXmlElement,\n  readYXmlFragment,\n  readYXmlHook,\n  readYXmlText\n];\n\nconst YArrayRefID = 0;\nconst YMapRefID = 1;\nconst YTextRefID = 2;\nconst YXmlElementRefID = 3;\nconst YXmlFragmentRefID = 4;\nconst YXmlHookRefID = 5;\nconst YXmlTextRefID = 6;\n\n/**\n * @private\n */\nclass ContentType {\n  /**\n   * @param {AbstractType<any>} type\n   */\n  constructor (type) {\n    /**\n     * @type {AbstractType<any>}\n     */\n    this.type = type;\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.type]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentType}\n   */\n  copy () {\n    return new ContentType(this.type._copy())\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentType}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentType} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    this.type._integrate(transaction.doc, item);\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    let item = this.type._start;\n    while (item !== null) {\n      if (!item.deleted) {\n        item.delete(transaction);\n      } else {\n        // This will be gc'd later and we want to merge it if possible\n        // We try to merge all deleted items after each transaction,\n        // but we have no knowledge about that this needs to be merged\n        // since it is not in transaction.ds. Hence we add it to transaction._mergeStructs\n        transaction._mergeStructs.push(item);\n      }\n      item = item.right;\n    }\n    this.type._map.forEach(item => {\n      if (!item.deleted) {\n        item.delete(transaction);\n      } else {\n        // same as above\n        transaction._mergeStructs.push(item);\n      }\n    });\n    transaction.changed.delete(this.type);\n  }\n\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {\n    let item = this.type._start;\n    while (item !== null) {\n      item.gc(store, true);\n      item = item.right;\n    }\n    this.type._start = null;\n    this.type._map.forEach(/** @param {Item | null} item */ (item) => {\n      while (item !== null) {\n        item.gc(store, true);\n        item = item.left;\n      }\n    });\n    this.type._map = new Map();\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    this.type._write(encoder);\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 7\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentType}\n */\nconst readContentType = decoder => new ContentType(typeRefs[decoder.readTypeRef()](decoder));\n\n/**\n * @todo This should return several items\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {{item:Item, diff:number}}\n */\nconst followRedone = (store, id) => {\n  /**\n   * @type {ID|null}\n   */\n  let nextID = id;\n  let diff = 0;\n  let item;\n  do {\n    if (diff > 0) {\n      nextID = createID(nextID.client, nextID.clock + diff);\n    }\n    item = getItem(store, nextID);\n    diff = nextID.clock - item.id.clock;\n    nextID = item.redone;\n  } while (nextID !== null && item instanceof Item)\n  return {\n    item, diff\n  }\n};\n\n/**\n * Make sure that neither item nor any of its parents is ever deleted.\n *\n * This property does not persist when storing it into a database or when\n * sending it to other peers\n *\n * @param {Item|null} item\n * @param {boolean} keep\n */\nconst keepItem = (item, keep) => {\n  while (item !== null && item.keep !== keep) {\n    item.keep = keep;\n    item = /** @type {AbstractType<any>} */ (item.parent)._item;\n  }\n};\n\n/**\n * Split leftItem into two items\n * @param {Transaction} transaction\n * @param {Item} leftItem\n * @param {number} diff\n * @return {Item}\n *\n * @function\n * @private\n */\nconst splitItem = (transaction, leftItem, diff) => {\n  // create rightItem\n  const { client, clock } = leftItem.id;\n  const rightItem = new Item(\n    createID(client, clock + diff),\n    leftItem,\n    createID(client, clock + diff - 1),\n    leftItem.right,\n    leftItem.rightOrigin,\n    leftItem.parent,\n    leftItem.parentSub,\n    leftItem.content.splice(diff)\n  );\n  if (leftItem.deleted) {\n    rightItem.markDeleted();\n  }\n  if (leftItem.keep) {\n    rightItem.keep = true;\n  }\n  if (leftItem.redone !== null) {\n    rightItem.redone = createID(leftItem.redone.client, leftItem.redone.clock + diff);\n  }\n  // update left (do not set leftItem.rightOrigin as it will lead to problems when syncing)\n  leftItem.right = rightItem;\n  // update right\n  if (rightItem.right !== null) {\n    rightItem.right.left = rightItem;\n  }\n  // right is more specific.\n  transaction._mergeStructs.push(rightItem);\n  // update parent._map\n  if (rightItem.parentSub !== null && rightItem.right === null) {\n    /** @type {AbstractType<any>} */ (rightItem.parent)._map.set(rightItem.parentSub, rightItem);\n  }\n  leftItem.length = diff;\n  return rightItem\n};\n\n/**\n * Redoes the effect of this operation.\n *\n * @param {Transaction} transaction The Yjs instance.\n * @param {Item} item\n * @param {Set<Item>} redoitems\n * @param {DeleteSet} itemsToDelete\n * @param {boolean} ignoreRemoteMapChanges\n *\n * @return {Item|null}\n *\n * @private\n */\nconst redoItem = (transaction, item, redoitems, itemsToDelete, ignoreRemoteMapChanges) => {\n  const doc = transaction.doc;\n  const store = doc.store;\n  const ownClientID = doc.clientID;\n  const redone = item.redone;\n  if (redone !== null) {\n    return getItemCleanStart(transaction, redone)\n  }\n  let parentItem = /** @type {AbstractType<any>} */ (item.parent)._item;\n  /**\n   * @type {Item|null}\n   */\n  let left = null;\n  /**\n   * @type {Item|null}\n   */\n  let right;\n  // make sure that parent is redone\n  if (parentItem !== null && parentItem.deleted === true) {\n    // try to undo parent if it will be undone anyway\n    if (parentItem.redone === null && (!redoitems.has(parentItem) || redoItem(transaction, parentItem, redoitems, itemsToDelete, ignoreRemoteMapChanges) === null)) {\n      return null\n    }\n    while (parentItem.redone !== null) {\n      parentItem = getItemCleanStart(transaction, parentItem.redone);\n    }\n  }\n  const parentType = parentItem === null ? /** @type {AbstractType<any>} */ (item.parent) : /** @type {ContentType} */ (parentItem.content).type;\n\n  if (item.parentSub === null) {\n    // Is an array item. Insert at the old position\n    left = item.left;\n    right = item;\n    // find next cloned_redo items\n    while (left !== null) {\n      /**\n       * @type {Item|null}\n       */\n      let leftTrace = left;\n      // trace redone until parent matches\n      while (leftTrace !== null && /** @type {AbstractType<any>} */ (leftTrace.parent)._item !== parentItem) {\n        leftTrace = leftTrace.redone === null ? null : getItemCleanStart(transaction, leftTrace.redone);\n      }\n      if (leftTrace !== null && /** @type {AbstractType<any>} */ (leftTrace.parent)._item === parentItem) {\n        left = leftTrace;\n        break\n      }\n      left = left.left;\n    }\n    while (right !== null) {\n      /**\n       * @type {Item|null}\n       */\n      let rightTrace = right;\n      // trace redone until parent matches\n      while (rightTrace !== null && /** @type {AbstractType<any>} */ (rightTrace.parent)._item !== parentItem) {\n        rightTrace = rightTrace.redone === null ? null : getItemCleanStart(transaction, rightTrace.redone);\n      }\n      if (rightTrace !== null && /** @type {AbstractType<any>} */ (rightTrace.parent)._item === parentItem) {\n        right = rightTrace;\n        break\n      }\n      right = right.right;\n    }\n  } else {\n    right = null;\n    if (item.right && !ignoreRemoteMapChanges) {\n      left = item;\n      // Iterate right while right is in itemsToDelete\n      // If it is intended to delete right while item is redone, we can expect that item should replace right.\n      while (left !== null && left.right !== null && isDeleted(itemsToDelete, left.right.id)) {\n        left = left.right;\n      }\n      // follow redone\n      // trace redone until parent matches\n      while (left !== null && left.redone !== null) {\n        left = getItemCleanStart(transaction, left.redone);\n      }\n      if (left && left.right !== null) {\n        // It is not possible to redo this item because it conflicts with a\n        // change from another client\n        return null\n      }\n    } else {\n      left = parentType._map.get(item.parentSub) || null;\n    }\n  }\n  const nextClock = getState(store, ownClientID);\n  const nextId = createID(ownClientID, nextClock);\n  const redoneItem = new Item(\n    nextId,\n    left, left && left.lastId,\n    right, right && right.id,\n    parentType,\n    item.parentSub,\n    item.content.copy()\n  );\n  item.redone = nextId;\n  keepItem(redoneItem, true);\n  redoneItem.integrate(transaction, 0);\n  return redoneItem\n};\n\n/**\n * Abstract class that represents any content.\n */\nclass Item extends AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {Item | null} left\n   * @param {ID | null} origin\n   * @param {Item | null} right\n   * @param {ID | null} rightOrigin\n   * @param {AbstractType<any>|ID|null} parent Is a type if integrated, is null if it is possible to copy parent from left or right, is ID before integration to search for it.\n   * @param {string | null} parentSub\n   * @param {AbstractContent} content\n   */\n  constructor (id, left, origin, right, rightOrigin, parent, parentSub, content) {\n    super(id, content.getLength());\n    /**\n     * The item that was originally to the left of this item.\n     * @type {ID | null}\n     */\n    this.origin = origin;\n    /**\n     * The item that is currently to the left of this item.\n     * @type {Item | null}\n     */\n    this.left = left;\n    /**\n     * The item that is currently to the right of this item.\n     * @type {Item | null}\n     */\n    this.right = right;\n    /**\n     * The item that was originally to the right of this item.\n     * @type {ID | null}\n     */\n    this.rightOrigin = rightOrigin;\n    /**\n     * @type {AbstractType<any>|ID|null}\n     */\n    this.parent = parent;\n    /**\n     * If the parent refers to this item with some kind of key (e.g. YMap, the\n     * key is specified here. The key is then used to refer to the list in which\n     * to insert this item. If `parentSub = null` type._start is the list in\n     * which to insert to. Otherwise it is `parent._map`.\n     * @type {String | null}\n     */\n    this.parentSub = parentSub;\n    /**\n     * If this type's effect is redone this type refers to the type that undid\n     * this operation.\n     * @type {ID | null}\n     */\n    this.redone = null;\n    /**\n     * @type {AbstractContent}\n     */\n    this.content = content;\n    /**\n     * bit1: keep\n     * bit2: countable\n     * bit3: deleted\n     * bit4: mark - mark node as fast-search-marker\n     * @type {number} byte\n     */\n    this.info = this.content.isCountable() ? binary.BIT2 : 0;\n  }\n\n  /**\n   * This is used to mark the item as an indexed fast-search marker\n   *\n   * @type {boolean}\n   */\n  set marker (isMarked) {\n    if (((this.info & binary.BIT4) > 0) !== isMarked) {\n      this.info ^= binary.BIT4;\n    }\n  }\n\n  get marker () {\n    return (this.info & binary.BIT4) > 0\n  }\n\n  /**\n   * If true, do not garbage collect this Item.\n   */\n  get keep () {\n    return (this.info & binary.BIT1) > 0\n  }\n\n  set keep (doKeep) {\n    if (this.keep !== doKeep) {\n      this.info ^= binary.BIT1;\n    }\n  }\n\n  get countable () {\n    return (this.info & binary.BIT2) > 0\n  }\n\n  /**\n   * Whether this item was deleted or not.\n   * @type {Boolean}\n   */\n  get deleted () {\n    return (this.info & binary.BIT3) > 0\n  }\n\n  set deleted (doDelete) {\n    if (this.deleted !== doDelete) {\n      this.info ^= binary.BIT3;\n    }\n  }\n\n  markDeleted () {\n    this.info |= binary.BIT3;\n  }\n\n  /**\n   * Return the creator clientID of the missing op or define missing items and return null.\n   *\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    if (this.origin && this.origin.client !== this.id.client && this.origin.clock >= getState(store, this.origin.client)) {\n      return this.origin.client\n    }\n    if (this.rightOrigin && this.rightOrigin.client !== this.id.client && this.rightOrigin.clock >= getState(store, this.rightOrigin.client)) {\n      return this.rightOrigin.client\n    }\n    if (this.parent && this.parent.constructor === ID && this.id.client !== this.parent.client && this.parent.clock >= getState(store, this.parent.client)) {\n      return this.parent.client\n    }\n\n    // We have all missing ids, now find the items\n\n    if (this.origin) {\n      this.left = getItemCleanEnd(transaction, store, this.origin);\n      this.origin = this.left.lastId;\n    }\n    if (this.rightOrigin) {\n      this.right = getItemCleanStart(transaction, this.rightOrigin);\n      this.rightOrigin = this.right.id;\n    }\n    if ((this.left && this.left.constructor === GC) || (this.right && this.right.constructor === GC)) {\n      this.parent = null;\n    }\n    // only set parent if this shouldn't be garbage collected\n    if (!this.parent) {\n      if (this.left && this.left.constructor === Item) {\n        this.parent = this.left.parent;\n        this.parentSub = this.left.parentSub;\n      }\n      if (this.right && this.right.constructor === Item) {\n        this.parent = this.right.parent;\n        this.parentSub = this.right.parentSub;\n      }\n    } else if (this.parent.constructor === ID) {\n      const parentItem = getItem(store, this.parent);\n      if (parentItem.constructor === GC) {\n        this.parent = null;\n      } else {\n        this.parent = /** @type {ContentType} */ (parentItem.content).type;\n      }\n    }\n    return null\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    if (offset > 0) {\n      this.id.clock += offset;\n      this.left = getItemCleanEnd(transaction, transaction.doc.store, createID(this.id.client, this.id.clock - 1));\n      this.origin = this.left.lastId;\n      this.content = this.content.splice(offset);\n      this.length -= offset;\n    }\n\n    if (this.parent) {\n      if ((!this.left && (!this.right || this.right.left !== null)) || (this.left && this.left.right !== this.right)) {\n        /**\n         * @type {Item|null}\n         */\n        let left = this.left;\n\n        /**\n         * @type {Item|null}\n         */\n        let o;\n        // set o to the first conflicting item\n        if (left !== null) {\n          o = left.right;\n        } else if (this.parentSub !== null) {\n          o = /** @type {AbstractType<any>} */ (this.parent)._map.get(this.parentSub) || null;\n          while (o !== null && o.left !== null) {\n            o = o.left;\n          }\n        } else {\n          o = /** @type {AbstractType<any>} */ (this.parent)._start;\n        }\n        // TODO: use something like DeleteSet here (a tree implementation would be best)\n        // @todo use global set definitions\n        /**\n         * @type {Set<Item>}\n         */\n        const conflictingItems = new Set();\n        /**\n         * @type {Set<Item>}\n         */\n        const itemsBeforeOrigin = new Set();\n        // Let c in conflictingItems, b in itemsBeforeOrigin\n        // ***{origin}bbbb{this}{c,b}{c,b}{o}***\n        // Note that conflictingItems is a subset of itemsBeforeOrigin\n        while (o !== null && o !== this.right) {\n          itemsBeforeOrigin.add(o);\n          conflictingItems.add(o);\n          if (compareIDs(this.origin, o.origin)) {\n            // case 1\n            if (o.id.client < this.id.client) {\n              left = o;\n              conflictingItems.clear();\n            } else if (compareIDs(this.rightOrigin, o.rightOrigin)) {\n              // this and o are conflicting and point to the same integration points. The id decides which item comes first.\n              // Since this is to the left of o, we can break here\n              break\n            } // else, o might be integrated before an item that this conflicts with. If so, we will find it in the next iterations\n          } else if (o.origin !== null && itemsBeforeOrigin.has(getItem(transaction.doc.store, o.origin))) { // use getItem instead of getItemCleanEnd because we don't want / need to split items.\n            // case 2\n            if (!conflictingItems.has(getItem(transaction.doc.store, o.origin))) {\n              left = o;\n              conflictingItems.clear();\n            }\n          } else {\n            break\n          }\n          o = o.right;\n        }\n        this.left = left;\n      }\n      // reconnect left/right + update parent map/start if necessary\n      if (this.left !== null) {\n        const right = this.left.right;\n        this.right = right;\n        this.left.right = this;\n      } else {\n        let r;\n        if (this.parentSub !== null) {\n          r = /** @type {AbstractType<any>} */ (this.parent)._map.get(this.parentSub) || null;\n          while (r !== null && r.left !== null) {\n            r = r.left;\n          }\n        } else {\n          r = /** @type {AbstractType<any>} */ (this.parent)._start\n          ;/** @type {AbstractType<any>} */ (this.parent)._start = this;\n        }\n        this.right = r;\n      }\n      if (this.right !== null) {\n        this.right.left = this;\n      } else if (this.parentSub !== null) {\n        // set as current parent value if right === null and this is parentSub\n        /** @type {AbstractType<any>} */ (this.parent)._map.set(this.parentSub, this);\n        if (this.left !== null) {\n          // this is the current attribute value of parent. delete right\n          this.left.delete(transaction);\n        }\n      }\n      // adjust length of parent\n      if (this.parentSub === null && this.countable && !this.deleted) {\n        /** @type {AbstractType<any>} */ (this.parent)._length += this.length;\n      }\n      addStruct(transaction.doc.store, this);\n      this.content.integrate(transaction, this);\n      // add parent to transaction.changed\n      addChangedTypeToTransaction(transaction, /** @type {AbstractType<any>} */ (this.parent), this.parentSub);\n      if ((/** @type {AbstractType<any>} */ (this.parent)._item !== null && /** @type {AbstractType<any>} */ (this.parent)._item.deleted) || (this.parentSub !== null && this.right !== null)) {\n        // delete if parent is deleted or if this is not the current attribute value of parent\n        this.delete(transaction);\n      }\n    } else {\n      // parent is not defined. Integrate GC struct instead\n      new GC(this.id, this.length).integrate(transaction, 0);\n    }\n  }\n\n  /**\n   * Returns the next non-deleted item\n   */\n  get next () {\n    let n = this.right;\n    while (n !== null && n.deleted) {\n      n = n.right;\n    }\n    return n\n  }\n\n  /**\n   * Returns the previous non-deleted item\n   */\n  get prev () {\n    let n = this.left;\n    while (n !== null && n.deleted) {\n      n = n.left;\n    }\n    return n\n  }\n\n  /**\n   * Computes the last content address of this Item.\n   */\n  get lastId () {\n    // allocating ids is pretty costly because of the amount of ids created, so we try to reuse whenever possible\n    return this.length === 1 ? this.id : createID(this.id.client, this.id.clock + this.length - 1)\n  }\n\n  /**\n   * Try to merge two items\n   *\n   * @param {Item} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (\n      this.constructor === right.constructor &&\n      compareIDs(right.origin, this.lastId) &&\n      this.right === right &&\n      compareIDs(this.rightOrigin, right.rightOrigin) &&\n      this.id.client === right.id.client &&\n      this.id.clock + this.length === right.id.clock &&\n      this.deleted === right.deleted &&\n      this.redone === null &&\n      right.redone === null &&\n      this.content.constructor === right.content.constructor &&\n      this.content.mergeWith(right.content)\n    ) {\n      const searchMarker = /** @type {AbstractType<any>} */ (this.parent)._searchMarker;\n      if (searchMarker) {\n        searchMarker.forEach(marker => {\n          if (marker.p === right) {\n            // right is going to be \"forgotten\" so we need to update the marker\n            marker.p = this;\n            // adjust marker index\n            if (!this.deleted && this.countable) {\n              marker.index -= this.length;\n            }\n          }\n        });\n      }\n      if (right.keep) {\n        this.keep = true;\n      }\n      this.right = right.right;\n      if (this.right !== null) {\n        this.right.left = this;\n      }\n      this.length += right.length;\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Mark this Item as deleted.\n   *\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    if (!this.deleted) {\n      const parent = /** @type {AbstractType<any>} */ (this.parent);\n      // adjust the length of parent\n      if (this.countable && this.parentSub === null) {\n        parent._length -= this.length;\n      }\n      this.markDeleted();\n      addToDeleteSet(transaction.deleteSet, this.id.client, this.id.clock, this.length);\n      addChangedTypeToTransaction(transaction, parent, this.parentSub);\n      this.content.delete(transaction);\n    }\n  }\n\n  /**\n   * @param {StructStore} store\n   * @param {boolean} parentGCd\n   */\n  gc (store, parentGCd) {\n    if (!this.deleted) {\n      throw error.unexpectedCase()\n    }\n    this.content.gc(store);\n    if (parentGCd) {\n      replaceStruct(store, this, new GC(this.id, this.length));\n    } else {\n      this.content = new ContentDeleted(this.length);\n    }\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const origin = offset > 0 ? createID(this.id.client, this.id.clock + offset - 1) : this.origin;\n    const rightOrigin = this.rightOrigin;\n    const parentSub = this.parentSub;\n    const info = (this.content.getRef() & binary.BITS5) |\n      (origin === null ? 0 : binary.BIT8) | // origin is defined\n      (rightOrigin === null ? 0 : binary.BIT7) | // right origin is defined\n      (parentSub === null ? 0 : binary.BIT6); // parentSub is non-null\n    encoder.writeInfo(info);\n    if (origin !== null) {\n      encoder.writeLeftID(origin);\n    }\n    if (rightOrigin !== null) {\n      encoder.writeRightID(rightOrigin);\n    }\n    if (origin === null && rightOrigin === null) {\n      const parent = /** @type {AbstractType<any>} */ (this.parent);\n      if (parent._item !== undefined) {\n        const parentItem = parent._item;\n        if (parentItem === null) {\n          // parent type on y._map\n          // find the correct key\n          const ykey = findRootTypeKey(parent);\n          encoder.writeParentInfo(true); // write parentYKey\n          encoder.writeString(ykey);\n        } else {\n          encoder.writeParentInfo(false); // write parent id\n          encoder.writeLeftID(parentItem.id);\n        }\n      } else if (parent.constructor === String) { // this edge case was added by differential updates\n        encoder.writeParentInfo(true); // write parentYKey\n        encoder.writeString(parent);\n      } else if (parent.constructor === ID) {\n        encoder.writeParentInfo(false); // write parent id\n        encoder.writeLeftID(parent);\n      } else {\n        error.unexpectedCase();\n      }\n      if (parentSub !== null) {\n        encoder.writeString(parentSub);\n      }\n    }\n    this.content.write(encoder, offset);\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @param {number} info\n */\nconst readItemContent = (decoder, info) => contentRefs[info & binary.BITS5](decoder);\n\n/**\n * A lookup map for reading Item content.\n *\n * @type {Array<function(UpdateDecoderV1 | UpdateDecoderV2):AbstractContent>}\n */\nconst contentRefs = [\n  () => { error.unexpectedCase(); }, // GC is not ItemContent\n  readContentDeleted, // 1\n  readContentJSON, // 2\n  readContentBinary, // 3\n  readContentString, // 4\n  readContentEmbed, // 5\n  readContentFormat, // 6\n  readContentType, // 7\n  readContentAny, // 8\n  readContentDoc, // 9\n  () => { error.unexpectedCase(); } // 10 - Skip is not ItemContent\n];\n\nconst structSkipRefNumber = 10;\n\n/**\n * @private\n */\nclass Skip extends AbstractStruct {\n  get deleted () {\n    return true\n  }\n\n  delete () {}\n\n  /**\n   * @param {Skip} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (this.constructor !== right.constructor) {\n      return false\n    }\n    this.length += right.length;\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    // skip structs cannot be integrated\n    error.unexpectedCase();\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeInfo(structSkipRefNumber);\n    // write as VarUint because Skips can't make use of predictable length-encoding\n    encoding.writeVarUint(encoder.restEncoder, this.length - offset);\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    return null\n  }\n}\n\n/** eslint-env browser */\n\nconst glo = /** @type {any} */ (typeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof window !== 'undefined'\n    ? window\n    // @ts-ignore\n    : typeof global !== 'undefined' ? global : {});\n\nconst importIdentifier = '__ $YJS$ __';\n\nif (glo[importIdentifier] === true) {\n  /**\n   * Dear reader of this message. Please take this seriously.\n   *\n   * If you see this message, make sure that you only import one version of Yjs. In many cases,\n   * your package manager installs two versions of Yjs that are used by different packages within your project.\n   * Another reason for this message is that some parts of your project use the commonjs version of Yjs\n   * and others use the EcmaScript version of Yjs.\n   *\n   * This often leads to issues that are hard to debug. We often need to perform constructor checks,\n   * e.g. `struct instanceof GC`. If you imported different versions of Yjs, it is impossible for us to\n   * do the constructor checks anymore - which might break the CRDT algorithm.\n   *\n   * https://github.com/yjs/yjs/issues/438\n   */\n  console.error('Yjs was already imported. This breaks constructor checks and will lead to issues! - https://github.com/yjs/yjs/issues/438');\n}\nglo[importIdentifier] = true;\n\nexport { AbsolutePosition, AbstractConnector, AbstractStruct, AbstractType, YArray as Array, ContentAny, ContentBinary, ContentDeleted, ContentEmbed, ContentFormat, ContentJSON, ContentString, ContentType, Doc, GC, ID, Item, YMap as Map, PermanentUserData, RelativePosition, Snapshot, YText as Text, Transaction, UndoManager, UpdateEncoderV1, YXmlElement as XmlElement, YXmlFragment as XmlFragment, YXmlHook as XmlHook, YXmlText as XmlText, YArrayEvent, YEvent, YMapEvent, YTextEvent, YXmlEvent, applyUpdate, applyUpdateV2, cleanupYTextFormatting, compareIDs, compareRelativePositions, convertUpdateFormatV1ToV2, convertUpdateFormatV2ToV1, createAbsolutePositionFromRelativePosition, createDeleteSet, createDeleteSetFromStructStore, createDocFromSnapshot, createID, createRelativePositionFromJSON, createRelativePositionFromTypeIndex, createSnapshot, decodeRelativePosition, decodeSnapshot, decodeSnapshotV2, decodeStateVector, decodeUpdate, decodeUpdateV2, diffUpdate, diffUpdateV2, emptySnapshot, encodeRelativePosition, encodeSnapshot, encodeSnapshotV2, encodeStateAsUpdate, encodeStateAsUpdateV2, encodeStateVector, encodeStateVectorFromUpdate, encodeStateVectorFromUpdateV2, equalSnapshots, findIndexSS, findRootTypeKey, getItem, getState, getTypeChildren, isDeleted, isParentOf, iterateDeletedStructs, logType, logUpdate, logUpdateV2, mergeUpdates, mergeUpdatesV2, parseUpdateMeta, parseUpdateMetaV2, readUpdate, readUpdateV2, relativePositionToJSON, snapshot, transact, tryGc, typeListToArraySnapshot, typeMapGetSnapshot };\n//# sourceMappingURL=yjs.mjs.map\n"],"names":["window","performance","isoCrypto","crypto","len","buf","ArrayBuffer","arr","Uint8Array","getRandomValues","i","Math","ceil","random","uint32","Uint32Array","uuidv4Template","uuidv4","replace","c","toString","create","f","Promise","Symbol","Pair","constructor","left","right","this","doc","document","DOMParser","ELEMENT_NODE","TEXT_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","BOLD","UNBOLD","BLUE","GREY","GREEN","RED","PURPLE","ORANGE","UNCOLOR","_browserStyleMap","_nodeStyleMap","computeLoggingArgs","args","strBuilder","logArgs","length","arg","style","undefined","push","String","Number","join","styles","currentStyle","map","set","m","value","key","unshift","Object","JSON","stringify","print","console","log","vconsoles","forEach","vc","createIterator","next","iterator","iteratorMap","fmap","done","AbstractConnector","ydoc","awareness","super","DeleteItem","clock","DeleteSet","clients","Map","iterateDeletedStructs","transaction","ds","deletes","clientid","structs","store","get","del","iterateStructs","isDeleted","id","dis","client","midindex","mid","midclock","findIndexDS","sortAndMergeDeleteSet","dels","j","sort","a","b","mergeDeleteSets","dss","merged","dssI","delsLeft","has","slice","array","addToDeleteSet","createDeleteSet","createDeleteSetFromStructStore","ss","dsitems","struct","deleted","writeDeleteSet","encoder","encoding","restEncoder","size","resetDsCurVal","item","writeDsClock","writeDsLen","readDeleteSet","decoder","numClients","decoding","restDecoder","numberOfDeletes","dsField","readDsClock","readDsLen","readAndApplyDeleteSet","unappliedDS","state","getState","clockEnd","index","findIndexSS","splice","splitItem","delete","UpdateEncoderV2","toUint8Array","generateNewClientId","Doc","guid","collectionid","gc","gcFilter","meta","autoLoad","shouldLoad","clientID","share","StructStore","_transaction","_transactionCleanups","subdocs","Set","_item","isLoaded","isSynced","whenLoaded","resolve","on","provideSyncedPromise","eventHandler","off","whenSynced","emit","load","transact","subdocsLoaded","add","getSubdocs","getSubdocGuids","Array","from","origin","name","TypeConstructor","AbstractType","type","t","_integrate","Constr","_map","n","parent","_start","_length","Error","getArray","YArray","getText","YText","getMap","YMap","getXmlFragment","YXmlFragment","toJSON","destroy","subdoc","content","opts","subdocsAdded","subdocsRemoved","eventName","DSDecoderV1","UpdateDecoderV1","readLeftID","createID","readRightID","readClient","readInfo","readString","readParentInfo","readTypeRef","readLen","readAny","readBuf","buffer","readJSON","parse","readKey","DSDecoderV2","dsCurrVal","diff","UpdateDecoderV2","keys","keyClockDecoder","clientDecoder","leftClockDecoder","rightClockDecoder","infoDecoder","stringDecoder","parentInfoDecoder","typeRefDecoder","lenDecoder","ID","read","keyClock","DSEncoderV1","UpdateEncoderV1","writeLeftID","writeRightID","writeClient","writeInfo","info","writeString","s","writeParentInfo","isYKey","writeTypeRef","writeLen","writeAny","any","writeBuf","writeJSON","embed","writeKey","DSEncoderV2","error","keyMap","keyClockEncoder","clientEncoder","leftClockEncoder","rightClockEncoder","infoEncoder","stringEncoder","parentInfoEncoder","typeRefEncoder","lenEncoder","write","writeClientsStructs","_sm","sm","getStateVector","entries","startNewStructs","firstStruct","writeStructs","readUpdateV2","transactionOrigin","structDecoder","local","retry","clientRefs","numOfStateUpdates","numberOfStructs","refs","GC","Skip","cantCopyParentInfo","Item","readItemContent","readClientsStructRefs","restStructs","clientsStructRefs","stack","clientsStructRefsIds","getNextStructTarget","nextStructsTarget","pop","curStructsTarget","missingSV","updateMissingSv","mclock","stackHead","addStackToRestSS","unapplicableItems","filter","offset","missing","getMissing","structRefs","integrate","update","integrateStructs","pending","pendingStructs","mergeUpdatesV2","dsRest","pendingDs","pendingDSUpdate","dsRest2","applyUpdateV2","readUpdate","YDecoder","applyUpdate","encodeStateAsUpdateV2","encodedTargetStateVector","targetStateVector","writeStateAsUpdate","decodeStateVector","updates","diffUpdateV2","mergeUpdates","convertUpdateFormatV2ToV1","encodeStateAsUpdate","readStateVector","ssLength","decodedState","writeStateVector","sv","encodeStateVector","writeDocumentStateVector","encodeStateVectorV2","EventHandler","l","createEventHandler","addEventHandlerListener","removeEventHandlerListener","g","callEventHandlerListeners","arg0","arg1","compareIDs","writeID","readID","findRootTypeKey","child","logType","res","PermanentUserData","storeType","yusers","initUser","user","userDescription","ids","addClientId","observe","event","changes","added","getContent","encodedDs","keysChanged","setUserMapping","users","_event","setTimeout","userOverwrite","_userDescription","yds","deleteSet","getUserByClientId","getUserByDeletedId","RelativePosition","tname","assoc","relativePositionToJSON","rpos","json","createRelativePositionFromJSON","AbsolutePosition","createRelativePosition","typeid","createRelativePositionFromTypeIndex","countable","lastId","encodeRelativePosition","writeRelativePosition","decodeRelativePosition","uint8Array","itemID","readRelativePosition","createAbsolutePositionFromRelativePosition","rightID","typeID","followRedone","ContentType","createAbsolutePosition","compareRelativePositions","Snapshot","equalSnapshots","snap1","snap2","ds1","ds2","sv1","sv2","dsitems1","dsitems2","dsitem1","dsitem2","encodeSnapshotV2","snapshot","encodeSnapshot","decodeSnapshotV2","decodeSnapshot","createSnapshot","emptySnapshot","isVisible","splitSnapshotAffectedStructs","getItemCleanStart","createDocFromSnapshot","originDoc","newDoc","lastStructIndex","lastStruct","addStruct","getItem","findIndexCleanStart","getItemCleanEnd","clockStart","Transaction","beforeState","afterState","changed","changedParentTypes","_mergeStructs","writeUpdateMessageFromTransaction","writeStructsFromTransaction","addChangedTypeToTransaction","parentSub","tryToMergeWithLeft","pos","mergeWith","tryGcDeleteSet","deleteItems","di","deleteItem","endDeleteItemClock","si","keep","tryMergeDeleteSet","tryGc","cleanupTransactions","transactionCleanups","mergeStructs","fs","subs","itemtype","_callObserver","events","target","currentTarget","event1","event2","path","_dEH","beforeClock","firstChangePos","replacedStructPos","_observers","loaded","removed","initialCall","finishCleanup","StackItem","deletions","insertions","clearUndoManagerStackItem","tr","um","stackItem","scope","some","keepItem","popStackItem","undoManager","eventType","result","_tr","itemsToRedo","itemsToDelete","performedChange","redone","redoItem","ignoreRemoteMapChanges","deleteFilter","subProps","_searchMarker","UndoManager","typeScope","captureTimeout","captureTransaction","trackedOrigins","addToScope","undoStack","redoStack","undoing","redoing","lastChange","afterTransactionHandler","stopCapturing","clear","endClock","startClock","now","didAdd","lastOp","changeEvent","ytypes","ytype","every","yt","addTrackedOrigin","removeTrackedOrigin","clearUndoStack","clearRedoStack","canUndo","canRedo","undoStackCleared","redoStackCleared","undo","redo","LazyStructReader","filterSkips","gen","lazyStructReaderGenerator","curr","logUpdate","logUpdateV2","updateDecoder","lazyDecoder","decodeUpdate","decodeUpdateV2","LazyStructWriter","currClient","written","clientStructs","encodeStateVectorFromUpdateV2","YEncoder","stopCounting","currClock","enc","encodeStateVectorFromUpdate","parseUpdateMetaV2","to","parseUpdateMeta","sliceStruct","leftItem","rightOrigin","updateDecoders","lazyStructDecoders","currWrite","updateEncoder","lazyStructEncoder","dec","dec1","dec2","clockDiff","currDecoder","firstClient","iterated","writeStructToLazyStructWriter","finishLazyStructWriting","lazyStructWriter","reader","svClock","diffUpdate","flushLazyStructWriter","lazyWriter","partStructs","convertUpdateFormat","convertUpdateFormatV1ToV2","YEvent","_changes","_keys","_delta","getPathTo","action","oldValue","adds","prev","delta","packOp","insert","concat","retain","globalSearchMarkerTimestamp","ArraySearchMarker","p","marker","timestamp","overwriteMarker","findMarker","yarray","reduce","pindex","refreshMarkerTimestamp","searchMarker","pm","markPosition","updateMarkerChanges","getTypeChildren","callTypeObservers","changedType","_eH","y","_copy","clone","_write","_encoder","_first","_parentSubs","observeDeep","unobserve","unobserveDeep","typeListSlice","start","end","cs","typeListToArray","typeListToArraySnapshot","typeListForEach","typeListMap","typeListCreateIterator","currentContent","currentContentIndex","typeListGet","typeListInsertGenericsAfter","referenceItem","ownClientId","jsonContent","packJsonContent","ContentAny","Boolean","ContentBinary","ContentDoc","lengthExceeded","typeListInsertGenerics","startIndex","typeListDelete","startLength","typeMapDelete","typeMapSet","typeMapGet","val","typeMapGetAll","typeMapHas","typeMapGetSnapshot","v","createMapIterator","entry","YArrayEvent","_prelimContent","static","items","toArray","el","parentSubs","maxMarker","currMarker","typeListPushGenerics","YArrayRefID","YMapEvent","ymap","values","_value","YMapRefID","equalAttrs","object","ItemTextListPosition","currentAttributes","forward","ContentFormat","updateCurrentAttributes","findNextPosition","count","findPosition","insertNegatedAttributes","currPos","negatedAttributes","nextFormat","format","minimizeAttributeChanges","attributes","insertAttributes","currentVal","insertText","text","_val","ContentString","ContentEmbed","getLength","formatText","iterationLoop","attr","newlines","cleanupFormattingGap","startAttributes","currAttributes","endAttributes","cleanups","reachedEndOfCurr","startAttrValue","cleanupYTextFormatting","deleteText","startAttrs","YTextEvent","ytext","childListChanged","sub","oldAttributes","deleteLen","addOp","op","str","curVal","string","_pending","e","applyDelta","toDelta","foundFormattingItem","afterClock","attrs","cleanupContextlessFormattingGap","sanitize","ins","prevSnapshot","computeYChange","ops","packStr","addAttributes","cur","k","insertEmbed","removeAttribute","attributeName","setAttribute","attributeValue","getAttribute","getAttributes","YTextRefID","YXmlTreeWalker","root","_filter","_root","_currentNode","_firstCall","YXmlElement","firstChild","first","createTreeWalker","querySelector","query","toUpperCase","element","nodeName","querySelectorAll","YXmlEvent","xml","toDOM","_document","hooks","binding","fragment","createDocumentFragment","_createAssociation","xmlType","insertBefore","insertAfter","ref","refItem","pc","findIndex","YXmlFragmentRefID","_prelimAttrs","nextSibling","prevSibling","stringBuilder","keysLen","toLocaleLowerCase","hasAttribute","dom","createElement","yxml","appendChild","YXmlElementRefID","attributesChanged","YXmlHook","hookName","hook","createDom","YXmlHookRefID","YXmlText","createTextNode","nestedNodes","node","YXmlTextRefID","AbstractStruct","encodingRef","isCountable","copy","getRef","ContentDeleted","markDeleted","createDocFromOpts","ContentJSON","split","firstCharCode","charCodeAt","typeRefs","_decoder","nextID","rightItem","redoitems","ownClientID","parentItem","parentType","leftTrace","rightTrace","nextClock","nextId","redoneItem","isMarked","doKeep","doDelete","o","conflictingItems","itemsBeforeOrigin","r","parentGCd","newStruct","replaceStruct","ykey","contentRefs","glo","globalThis","importIdentifier"],"sourceRoot":""}