name: Build and Release Cross-Platform

permissions:
  contents: write # Required to create a release and upload assets

on:
  push:
    branches:
      - main # Adjust to your desired branch

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check_commit.outputs.should_release }}
      version:        ${{ steps.extract_info.outputs.version }}
      description:    ${{ steps.extract_info.outputs.description }}
      prerelease:     ${{ steps.extract_info.outputs.prerelease }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check commit message
        id: check_commit
        shell: bash
        run: |
          commit_msg=$(git log -1 --pretty=%B)
          if [[ "$commit_msg" == *"Release v"* ]]; then
            echo "should_release=true"  >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract release info from commit message
        id: extract_info
        if: steps.check_commit.outputs.should_release == 'true'
        shell: bash
        run: |
          commit_msg=$(git log -1 --pretty=%B)
          version=$(echo "$commit_msg" | sed -n 's/.*Release v\([[:alnum:].\-]\+\).*/\1/p')
          description=$(echo "$commit_msg" | sed -n '/^~$/,/^~$/p' | sed '1d;$d')

          if [ -z "$version" ]; then
            echo "No valid release version found. Exiting."
            exit 1
          fi

          if echo "$version" | grep -q '-'; then prerelease=true; else prerelease=false; fi

          echo "version=$version"       >> $GITHUB_OUTPUT
          echo "description<<EOF"       >> $GITHUB_OUTPUT
          echo "$description"           >> $GITHUB_OUTPUT
          echo "EOF"                    >> $GITHUB_OUTPUT
          echo "prerelease=$prerelease" >> $GITHUB_OUTPUT

  build-windows:
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build executable
        run: pyinstaller --onefile --windowed --name "Snipping Lens" --icon="my_icon.ico" --add-data="my_icon.png;." snipping_lens.py

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: ./dist/Snipping Lens.exe

  build-linux:
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgirepository1.0-dev \
            gir1.2-gtk-3.0 \
            libcairo2-dev \
            pkg-config \
            python3-dev \
            xclip

      - name: Install Python dependencies
        run: |
          pip install pycairo
          pip install -r requirements.txt

      - name: Install AppImage tools
        run: |
          sudo apt-get install -y fuse libfuse2
          wget -q -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build AppImage
        run: |
          mkdir -p AppDir/usr/bin AppDir/usr/share/applications AppDir/usr/share/icons/hicolor/256x256/apps

          # Build executable
          pyinstaller --onefile --name snipping_lens snipping_lens.py

          # Copy binary and icon into AppDir
          cp dist/snipping_lens AppDir/usr/bin/
          cp my_icon.png AppDir/usr/share/icons/hicolor/256x256/apps/snipping_lens.png

          # Create desktop file
          cat > AppDir/usr/share/applications/snipping_lens.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=Snipping Lens
          Exec=snipping_lens
          Icon=snipping_lens
          Categories=Utility;
          Terminal=false
          EOF

          # Copy desktop file & icon into AppDir root (required by appimagetool)
          cp AppDir/usr/share/applications/snipping_lens.desktop AppDir/snipping_lens.desktop
          cp my_icon.png AppDir/snipping_lens.png

          # Create AppRun
          cat > AppDir/AppRun << EOF
          #!/bin/bash
          SELF=$(readlink -f "$0"); HERE=${SELF%/*}
          export PATH="${HERE}/usr/bin:$PATH"
          export LD_LIBRARY_PATH="${HERE}/usr/lib:$LD_LIBRARY_PATH"
          export XDG_DATA_DIRS="${HERE}/usr/share:$XDG_DATA_DIRS"
          exec "${HERE}/usr/bin/snipping_lens" "$@"
          EOF
          chmod +x AppDir/AppRun

          # Generate AppImage
          ./appimagetool AppDir
          mv Snipping_Lens-x86_64.AppImage SnippingLens-${{ needs.check-release.outputs.version }}-x86_64.AppImage

      - name: Build DEB package
        run: |
          mkdir -p debian/DEBIAN debian/usr/bin debian/usr/share/applications debian/usr/share/icons/hicolor/256x256/apps debian/etc/xdg/autostart
          cp dist/snipping_lens debian/usr/bin/
          cp my_icon.png debian/usr/share/icons/hicolor/256x256/apps/snipping_lens.png
          cat > debian/usr/share/applications/snipping_lens.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=Snipping Lens
          Exec=/usr/bin/snipping_lens
          Icon=/usr/share/icons/hicolor/256x256/apps/snipping_lens.png
          Categories=Utility;
          Terminal=false
          EOF
          cp debian/usr/share/applications/snipping_lens.desktop debian/etc/xdg/autostart/
          cat > debian/DEBIAN/control << EOF
          Package: snipping-lens
          Version: ${{ needs.check-release.outputs.version }}
          Section: utils
          Priority: optional
          Architecture: amd64
          Depends: python3, python3-gi, xclip
          Maintainer: Your Name <your.email@example.com>
          Description: Snipping Lens
           A tool to automatically search screenshots with Google Lens.
          EOF
          cat > debian/DEBIAN/postinst << EOF
          #!/bin/sh
          chmod +x /usr/bin/snipping_lens
          exit 0
          EOF
          chmod 755 debian/DEBIAN/postinst
          dpkg-deb --build debian
          mv debian.deb snipping-lens_${{ needs.check-release.outputs.version }}_amd64.deb

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: |
            SnippingLens-${{ needs.check-release.outputs.version }}-x86_64.AppImage
            snipping-lens_${{ needs.check-release.outputs.version }}_amd64.deb

  create-release:
    needs: [check-release, build-windows, build-linux]
    if: needs.check-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-exe
          path: ./windows

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-packages
          path: ./linux

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-release.outputs.version }}
          release_name: "v${{ needs.check-release.outputs.version }}"
          body: ${{ needs.check-release.outputs.description }}
          draft: false
          prerelease: ${{ needs.check-release.outputs.prerelease }}

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./windows/Snipping Lens.exe"
          asset_name: SnippingLens-Windows.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux AppImage Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./linux/SnippingLens-${{ needs.check-release.outputs.version }}-x86_64.AppImage"
          asset_name: SnippingLens-${{ needs.check-release.outputs.version }}-x86_64.AppImage
          asset_content_type: application/x-executable

      - name: Upload Linux DEB Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./linux/snipping-lens_${{ needs.check-release.outputs.version }}_amd64.deb"
          asset_name: snipping-lens_${{ needs.check-release.outputs.version }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package
