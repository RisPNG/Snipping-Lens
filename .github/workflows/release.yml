name: Build and Release EXE and AppImage

permissions:
  contents: write # Required to create a release and upload assets

on:
  push:
    branches:
      - main # Adjust to your desired branch

jobs:
  build_windows:
    if: contains(github.event.head_commit.message, 'Release v')
    runs-on: windows-latest
    outputs:
      asset_path: ./dist/Snipping Lens.exe
      asset_name: SnippingLens.exe
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11" # Using a common stable version

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build Windows executable
        # Assuming my_icon.ico is in the root of your repository
        run: pyinstaller --onefile --windowed --name "Snipping Lens" --icon="my_icon.ico" --add-data="my_icon.png;." snipping_lens.py

      - name: Verify artifact
        run: |
          if (Test-Path -Path "./dist/Snipping Lens.exe") {
            echo "Windows EXE built successfully."
          } else {
            echo "Error: Windows EXE not found!"
            exit 1
          }
          
  build_linux:
    if: contains(github.event.head_commit.message, 'Release v')
    runs-on: ubuntu-latest
    outputs:
      asset_path: ./SnippingLens-x86_64.AppImage # Default name from linuxdeploy
      asset_name: SnippingLens.AppImage
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install System Dependencies for AppImage
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2 # Needed to run AppImages created by older tools, and sometimes linuxdeploy itself

      - name: Install Python Dependencies
        run: pip install -r requirements.txt

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Download linuxdeploy and Python plugin
        run: |
          wget -c https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget -c https://github.com/linuxdeploy/linuxdeploy-plugin-python/releases/download/continuous/linuxdeploy-plugin-python-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage linuxdeploy-plugin-python-x86_64.AppImage

      - name: Build with PyInstaller for Linux
        run: |
          pyinstaller --noconsole --onefile --name "snipping-lens-bin" --add-data="my_icon.png:." snipping_lens.py
          # The output will be in dist/snipping-lens-bin

      - name: Prepare AppDir
        run: |
          mkdir -p AppDir/usr/bin
          cp dist/snipping-lens-bin AppDir/usr/bin/snipping-lens
          cp my_icon.png AppDir/my_icon.png # linuxdeploy will pick this up with --icon-file

          # Create .desktop file
          cat <<EOF > AppDir/snipping-lens.desktop
          [Desktop Entry]
          Name=Snipping Lens
          Exec=snipping-lens
          Icon=my_icon
          Type=Application
          Categories=Utility;Graphics;
          Comment=Screenshot tool with Google Lens integration
          EOF
          chmod +x AppDir/usr/bin/snipping-lens

      - name: Run linuxdeploy to create AppImage
        env:
          APPIMAGE_EXTRACT_AND_RUN: 1 # For running plugin AppImage
          VERSION: ${{ steps.extract_info.outputs.version }} # Get version from release job (or re-extract here)
                                                              # For now, let linuxdeploy auto-version or set a fixed one if needed
                                                              # Or extract version here if create_release job is separate
        run: |
          # Ensure plugin is found
          export PATH=$PATH:$(pwd) 
          ./linuxdeploy-x86_64.AppImage \
            --appdir AppDir \
            --output appimage \
            --plugin python \
            --executable AppDir/usr/bin/snipping-lens \
            --desktop-file AppDir/snipping-lens.desktop \
            --icon-file AppDir/my_icon.png
          # AppImage will be named like SnippingLens-x86_64.AppImage or similar by default

      - name: Verify and Rename AppImage
        run: |
          find . -name "*.AppImage" -print0 | xargs -0 -I {} mv {} ./SnippingLens-x86_64.AppImage
          if [ -f "./SnippingLens-x86_64.AppImage" ]; then
            echo "AppImage built successfully."
            # Store the actual name for upload if it's dynamic
            # echo "appimage_name=$(find . -name '*.AppImage' -printf '%f')" >> $GITHUB_ENV
          else
            echo "Error: AppImage not found!"
            ls -R . # List files for debugging
            exit 1
          fi

  create_github_release:
    if: contains(github.event.head_commit.message, 'Release v')
    runs-on: ubuntu-latest
    needs: [build_windows, build_linux] # Depends on both build jobs
    steps:
      - name: Checkout repository (for commit message)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # Only need the latest commit

      - name: Extract release info from commit message
        id: extract_release_info
        shell: bash
        run: |
          commit_msg=$(git log -1 --pretty=%B)
          echo "Commit message: $commit_msg"
          version=$(echo "$commit_msg" | sed -n 's/.*Release v\([[:alnum:].\-]\+\).*/\1/p')
          description=$(echo "$commit_msg" | sed -n '/^~$/,/^~$/p' | sed '1d;$d')

          if [ -z "$version" ]; then
            echo "No valid release version found in commit message. Exiting."
            exit 1
          fi
          
          prerelease=false
          if echo "$version" | grep -q '-'; then
            prerelease=true
          fi

          echo "Version: $version"
          echo "Description: $description"
          echo "Prerelease: $prerelease"

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "description<<EOF" >> $GITHUB_OUTPUT
          echo "$description" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "prerelease=$prerelease" >> $GITHUB_OUTPUT

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact # Default artifact name if not specified in upload by build_windows
          path: ./dist_windows/
          # This assumes build_windows uploads an artifact named 'SnippingLens-Windows-Artifact' or similar
          # Let's adjust build jobs to upload artifacts explicitly named

      # Corrected artifact download: Need to know how build jobs upload them.
      # For simplicity, let's assume paths from 'outputs' of build jobs are directly usable
      # if jobs run on same runner or artifacts are passed correctly.
      # The current setup with 'outputs' from build jobs is for asset paths, not for artifact download.
      # We need to upload artifacts in build jobs and download them here.

      # --- Revised Artifact Handling ---
      # In build_windows:
      # - name: Upload Windows Artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: windows-build
      #     path: ${{ steps.build_windows.outputs.asset_path }} # Or directly ./dist/Snipping Lens.exe

      # In build_linux:
      # - name: Upload Linux Artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: linux-build
      #     path: ${{ steps.build_linux.outputs.asset_path }} # Or directly ./SnippingLens-x86_64.AppImage

      # Then in create_github_release:
      - name: Download Windows Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-build # This name must match the upload-artifact name in build_windows
          path: ./release_assets/windows

      - name: Download Linux Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-build # This name must match the upload-artifact name in build_linux
          path: ./release_assets/linux
      # --- End Revised Artifact Handling ---

      - name: List downloaded assets
        run: ls -R ./release_assets

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.extract_release_info.outputs.version }}
          release_name: "Release v${{ steps.extract_release_info.outputs.version }}"
          body: ${{ steps.extract_release_info.outputs.description }}
          draft: false
          prerelease: ${{ steps.extract_release_info.outputs.prerelease }}

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release_assets/windows/Snipping Lens.exe # Path after download
          asset_name: SnippingLens.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release_assets/linux/SnippingLens-x86_64.AppImage # Path after download
          asset_name: SnippingLens.AppImage
          asset_content_type: application/vnd.appimage # Correct content type for AppImage

# Add these steps to your build jobs:
# In build_windows, after "Build Windows executable":
#      - name: Upload Windows Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: windows-build
#          path: ./dist/Snipping Lens.exe 
#          retention-days: 1

# In build_linux, after "Verify and Rename AppImage":
#      - name: Upload Linux Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: linux-build
#          path: ./SnippingLens-x86_64.AppImage
#          retention-days: 1