name: Build and Release

permissions:
  contents: write

on:
  push:
    branches: [ main ]

jobs:
  # ─────────────────────────── WINDOWS BUILD ───────────────────────────
  build_windows:
    if: contains(github.event.head_commit.message, 'Release v')
    runs-on: windows-latest
    outputs:
      exe_path: ${{ steps.pack.outputs.exe_path }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build EXE
        id: pack
        shell: bash
        run: |
          pyinstaller --onefile --windowed \
            --name SnippingLens \
            --icon my_icon.ico \
            --add-data "my_icon.png;." \
            snipping_lens.py
          echo "exe_path=${GITHUB_WORKSPACE}/dist/SnippingLens.exe" >> "$GITHUB_OUTPUT"

      - uses: actions/upload-artifact@v4
        with:
          name: SnippingLens-exe
          path: ${{ steps.pack.outputs.exe_path }}

  # ─────────────────────────── LINUX BUILD ────────────────────────────
  build_linux:
    if: contains(github.event.head_commit.message, 'Release v')
    runs-on: ubuntu-latest
    outputs:
      appimage_path: ${{ steps.buildapp.outputs.appimage_path }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install build tools & GTK/AppIndicator dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            patchelf zsync \
            python3-gi gir1.2-gtk-3.0 gir1.2-appindicator3-0.1 \
            libappindicator3-dev \
            xclip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Install FUSE support (optional)
        run: |
          sudo apt-get update && sudo apt-get install -y libfuse2 || true

      - name: Fetch linuxdeploy & GTK plugin
        run: |
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage -O linuxdeploy
          wget -q https://github.com/linuxdeploy/linuxdeploy-plugin-gtk/releases/download/continuous/linuxdeploy-plugin-gtk-x86_64.AppImage -O linuxdeploy-plugin-gtk
          chmod +x linuxdeploy linuxdeploy-plugin-gtk

      - name: Build standalone binary
        run: |
          pyinstaller --onefile \
            --name snipping_lens \
            --hidden-import=gi \
            --hidden-import=gi.repository.Gtk \
            --hidden-import=gi.repository.AppIndicator3 \
            snipping_lens.py

      - name: Package AppImage
        id: buildapp
        shell: bash
        run: |
          mkdir -p AppDir/usr/bin
          cp dist/snipping_lens AppDir/usr/bin/SnippingLens
          chmod +x AppDir/usr/bin/SnippingLens

          # desktop entry + icon
          mkdir -p AppDir/usr/share/applications
          cat > AppDir/usr/share/applications/snippinglens.desktop << EOL
          [Desktop Entry]
          Name=Snipping Lens
          Exec=SnippingLens
          Type=Application
          Icon=snippinglens
          Categories=Utility;
          StartupNotify=true
          X-GNOME-UsesNotifications=true
          EOL

          mkdir -p AppDir/usr/share/icons/hicolor/64x64/apps
          cp my_icon.png AppDir/usr/share/icons/hicolor/64x64/apps/snippinglens.png
          cp my_icon.png AppDir/snippinglens.png

          # Run linuxdeploy to bundle everything
          ./linuxdeploy --appdir AppDir --plugin gtk --output appimage

          # Rename AppImage to a stable filename
          APPIMAGE=$(ls *.AppImage | head -n1)
          mv "$APPIMAGE" SnippingLens.AppImage
          echo "appimage_path=${GITHUB_WORKSPACE}/SnippingLens.AppImage" >> "$GITHUB_OUTPUT"

      - uses: actions/upload-artifact@v4
        with:
          name: SnippingLens-appimage
          path: ${{ steps.buildapp.outputs.appimage_path }}

  # ─────────────────────────── CREATE RELEASE ──────────────────────────
  release:
    needs: [ build_windows, build_linux ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: SnippingLens-exe
          path: release_assets
      - uses: actions/download-artifact@v4
        with:
          name: SnippingLens-appimage
          path: release_assets

      - id: meta
        shell: bash
        run: |
          msg="$(git log -1 --pretty=%B)"
          ver="$(echo "$msg" | sed -n 's/.*Release v\([[:alnum:].\-]\+\).*/\1/p')"
          body="$(echo "$msg" | sed -n '/^~$/,/^~$/p' | sed '1d;$d')"
          prerelease=false
          if [[ "$ver" == *-* ]]; then prerelease=true; fi
          echo "version=$ver"      >> "$GITHUB_OUTPUT"
          printf "body<<EOF\n%s\nEOF\n" "$body" >> "$GITHUB_OUTPUT"
          echo "prerelease=$prerelease" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        id: create_rel
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.meta.outputs.version }}
          release_name: v${{ steps.meta.outputs.version }}
          body: ${{ steps.meta.outputs.body }}
          prerelease: ${{ steps.meta.outputs.prerelease }}

      - name: Upload Windows EXE
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_rel.outputs.upload_url }}
          asset_path: release_assets/SnippingLens.exe
          asset_name: SnippingLens.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_rel.outputs.upload_url }}
          asset_path: release_assets/SnippingLens.AppImage
          asset_name: SnippingLens.AppImage
          asset_content_type: application/octet-stream
