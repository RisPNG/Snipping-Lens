name: Build and Release Cross-Platform

permissions:
  contents: write # Required to create a release and upload assets

on:
  push:
    branches:
      - main # Adjust to your desired branch

jobs:
  build-windows:
    # Only run if the commit message contains "Release v"
    if: contains(github.event.head_commit.message, 'Release v')
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13.2
        uses: actions/setup-python@v4
        with:
          python-version: "3.13.2"

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build Windows executable
        run: pyinstaller --onefile --windowed --name "Snipping Lens" --icon="my_icon.ico" --add-data="my_icon.png;." snipping_lens.py

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: "./dist/Snipping Lens.exe"

  build-linux:
    # Only run if the commit message contains "Release v"
    if: contains(github.event.head_commit.message, 'Release v')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13.2
        uses: actions/setup-python@v4
        with:
          python-version: "3.13.2"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y xclip python3-tk python3-dev build-essential libfuse2

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build Linux executable
        run: pyinstaller --onefile --name "snipping-lens" --add-data="my_icon.png:." snipping_lens.py

      - name: Create AppImage structure
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy executable
          cp dist/snipping-lens AppDir/usr/bin/
          
          # Create desktop file
          cat > AppDir/usr/share/applications/snipping-lens.desktop << 'EOF'
          [Desktop Entry]
          Type=Application
          Name=Snipping Lens
          Exec=snipping-lens
          Icon=snipping-lens
          Comment=Automatic Google Lens search for screenshots
          Categories=Graphics;Photography;
          Keywords=screenshot;lens;search;
          StartupNotify=true
          EOF
          
          # Copy icon (convert PNG to different sizes if needed)
          cp my_icon.png AppDir/usr/share/icons/hicolor/256x256/apps/snipping-lens.png
          
          # Create AppRun
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          export PATH="${HERE}/usr/bin:${PATH}"
          exec "${HERE}/usr/bin/snipping-lens" "$@"
          EOF
          chmod +x AppDir/AppRun
          
          # Create symbolic links required by AppImage
          ln -sf usr/share/applications/snipping-lens.desktop AppDir/
          ln -sf usr/share/icons/hicolor/256x256/apps/snipping-lens.png AppDir/

      - name: Download and setup AppImageTool
        run: |
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage

      - name: Create AppImage
        run: |
          ./appimagetool-x86_64.AppImage AppDir SnippingLens-x86_64.AppImage
          chmod +x SnippingLens-x86_64.AppImage

      - name: Create DEB package structure
        run: |
          # Create debian package structure
          mkdir -p deb-package/DEBIAN
          mkdir -p deb-package/usr/bin
          mkdir -p deb-package/usr/share/applications
          mkdir -p deb-package/usr/share/icons/hicolor/256x256/apps
          mkdir -p deb-package/usr/share/doc/snipping-lens
          
          # Copy executable
          cp dist/snipping-lens deb-package/usr/bin/
          chmod +x deb-package/usr/bin/snipping-lens
          
          # Copy desktop file
          cp AppDir/usr/share/applications/snipping-lens.desktop deb-package/usr/share/applications/
          
          # Copy icon
          cp my_icon.png deb-package/usr/share/icons/hicolor/256x256/apps/snipping-lens.png
          
          # Create copyright file
          cat > deb-package/usr/share/doc/snipping-lens/copyright << 'EOF'
          Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
          Upstream-Name: snipping-lens
          Source: https://github.com/yourusername/snipping-lens
          
          Files: *
          Copyright: $(date +%Y) Your Name
          License: MIT
          EOF
          
          # Create control file
          cat > deb-package/DEBIAN/control << 'EOF'
          Package: snipping-lens
          Version: 1.0.0
          Section: graphics
          Priority: optional
          Architecture: amd64
          Depends: python3, python3-pil, python3-requests, xclip, gnome-screenshot
          Maintainer: Your Name <your.email@example.com>
          Description: Automatic Google Lens search for screenshots
           Snipping Lens automatically detects when you take screenshots
           and searches them using Google Lens for quick information lookup.
           .
           Features:
           - Cross-platform support (Windows and Linux)
           - Automatic screenshot detection
           - Google Lens integration
           - System tray integration
          EOF
          
          # Create postinst script
          cat > deb-package/DEBIAN/postinst << 'EOF'
          #!/bin/bash
          set -e
          
          # Update desktop database
          if command -v update-desktop-database >/dev/null 2>&1; then
              update-desktop-database -q /usr/share/applications
          fi
          
          # Update icon cache
          if command -v gtk-update-icon-cache >/dev/null 2>&1; then
              gtk-update-icon-cache -q /usr/share/icons/hicolor
          fi
          
          exit 0
          EOF
          chmod +x deb-package/DEBIAN/postinst
          
          # Create prerm script
          cat > deb-package/DEBIAN/prerm << 'EOF'
          #!/bin/bash
          set -e
          
          # Kill any running instances
          pkill -f snipping-lens || true
          
          exit 0
          EOF
          chmod +x deb-package/DEBIAN/prerm

      - name: Build DEB package
        run: |
          dpkg-deb --build deb-package snipping-lens.deb

      - name: Upload Linux AppImage artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage
          path: "SnippingLens-x86_64.AppImage"

      - name: Upload Linux DEB artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb
          path: "snipping-lens.deb"

  release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract release info from commit message
        id: extract_release_info
        shell: bash
        run: |
          # Get the latest commit message
          commit_msg=$(git log -1 --pretty=%B)
          echo "Commit message:"
          echo "$commit_msg"
        
          # Extract the version (matches digits and optional dash/letters)
          version=$(echo "$commit_msg" | sed -n 's/.*Release v\([[:alnum:].\-]\+\).*/\1/p')
        
          # Extract the description between the tilde markers.
          # This assumes the description is enclosed between lines containing only '~'
          description=$(echo "$commit_msg" | sed -n '/^~$/,/^~$/p' | sed '1d;$d')

          # Ensure a valid version was found
          if [ -z "$version" ]; then
            echo "No valid release version found in the commit message. Exiting."
            exit 1
          fi
        
          # Determine if it's a pre-release (if version contains a dash)
          if echo "$version" | grep -q '-'; then
            prerelease=true
          else
            prerelease=false
          fi

          echo "Version: $version"
          echo "Description: $description"
          echo "Prerelease: $prerelease"

          # Set outputs using the environment file method.
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "description<<EOF" >> $GITHUB_OUTPUT
          echo "$description" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "prerelease=$prerelease" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.extract_release_info.outputs.version }}
          release_name: "v${{ steps.extract_release_info.outputs.version }}"
          body: |
            ${{ steps.extract_release_info.outputs.description }}
            
            ## Downloads
            
            ### Windows
            - **SnippingLens.exe** - Standalone executable for Windows
            
            ### Linux
            - **SnippingLens-x86_64.AppImage** - Universal Linux application (no installation required)
            - **snipping-lens.deb** - Debian/Ubuntu package
            
            ## Installation Instructions
            
            ### Windows
            1. Download `SnippingLens.exe`
            2. Run the executable
            3. The app will start in the system tray
            
            ### Linux (AppImage)
            1. Download `SnippingLens-x86_64.AppImage`
            2. Make it executable: `chmod +x SnippingLens-x86_64.AppImage`
            3. Run: `./SnippingLens-x86_64.AppImage`
            
            ### Linux (DEB package)
            1. Download `snipping-lens.deb`
            2. Install: `sudo dpkg -i snipping-lens.deb`
            3. Fix dependencies if needed: `sudo apt-get install -f`
            4. Run from applications menu or terminal: `snipping-lens`
            
            ## Usage
            - **Left-click** the tray icon to take a screenshot
            - **Right-click** the tray icon for options (Pause/Resume, Show Logs, Exit)
            - Screenshots are automatically detected and searched on Google Lens
            - The app starts automatically with your system
          draft: false
          prerelease: ${{ steps.extract_release_info.outputs.prerelease }}

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./windows-exe/Snipping Lens.exe"
          asset_name: SnippingLens.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux AppImage Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./linux-appimage/SnippingLens-x86_64.AppImage"
          asset_name: SnippingLens-x86_64.AppImage
          asset_content_type: application/octet-stream

      - name: Upload Linux DEB Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./linux-deb/snipping-lens.deb"
          asset_name: snipping-lens.deb
          asset_content_type: application/octet-stream